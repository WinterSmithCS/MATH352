(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1038523,      18718]
NotebookOptionsPosition[   1034080,      18575]
NotebookOutlinePosition[   1034444,      18591]
CellTagsIndexPosition[   1034401,      18588]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "montecarlo", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"montecarlo", "[", 
   RowBox[{"n_", ",", "f_", ",", "xmin_", ",", "xmax_", ",", "ymax_"}], "]"}],
   ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"boxarea", "=", 
       RowBox[{"ymax", "*", 
        RowBox[{"(", 
         RowBox[{"xmax", "-", "xmin"}], ")"}]}]}], ",", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "Because", " ", "of", " ", "a", " ", "bug", " ", "in", " ", "the", 
         " ", "Mathematica", " ", "function", " ", "Random"}], ",", 
        RowBox[{
        "we", " ", "must", " ", "first", " ", "take", " ", "numerical", " ", 
         "approximations", " ", "to", " ", "the", " ", "input", " ", "values",
          " ", "xmin"}], ",", "xmax", ",", 
        RowBox[{"and", " ", 
         RowBox[{"ymax", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"nymax", "=", 
       RowBox[{"N", "[", "ymax", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"nxmax", "=", 
       RowBox[{"N", "[", "xmax", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"nxmin", "=", 
       RowBox[{"N", "[", "xmin", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"count", "=", "0"}], ",", "\[IndentingNewLine]", "randpoint", 
      ",", "\[IndentingNewLine]", 
      RowBox[{"pointlist", "=", 
       RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"i", "=", "1"}], ",", 
       RowBox[{"i", "\[LessEqual]", "n"}], ",", 
       RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"randpoint", "=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Random", "[", 
            RowBox[{"Real", ",", 
             RowBox[{"{", 
              RowBox[{"nxmin", ",", "nxmax"}], "}"}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Random", "[", 
            RowBox[{"Real", ",", 
             RowBox[{"{", 
              RowBox[{"0", ",", "nymax"}], "}"}]}], "]"}]}], "}"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"pointlist", "=", 
         RowBox[{"Append", "[", 
          RowBox[{"pointlist", ",", "randpoint"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"randpoint", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "\[LessEqual]", 
            RowBox[{"f", "[", 
             RowBox[{"randpoint", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ")"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"count", "++"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"count", "/", "n"}], ")"}], "*", "ymax", "*", 
        RowBox[{"(", 
         RowBox[{"xmax", "-", "xmin"}], ")"}]}], "//", "N"}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"In", " ", "the", " ", "following", " ", "command"}], ",", 
       RowBox[{
        RowBox[{
        "the", " ", "first", " ", "two", " ", "graphics", " ", "calls", " ", 
         "are", " ", "given", " ", "the", " ", "option", " ", 
         "DisplayFunction"}], "\[Rule]", 
        RowBox[{
        "Identity", " ", "so", " ", "that", " ", "they", " ", "are", " ", 
         "not", " ", "plotted", " ", "on", " ", "the", " ", 
         RowBox[{"screen", ".", "Then"}], " ", "the", " ", "Show", " ", 
         "command", " ", "is", " ", "given", " ", "the", " ", "two", " ", 
         "plots", " ", "with", " ", "the", " ", "DisplayFunction", " ", 
         "option", " ", "set", " ", "back", " ", "to", " ", "the", " ", 
         "default", " ", 
         RowBox[{"value", ".", "This"}], " ", "results", " ", "in", " ", 
         "only", " ", "one", " ", "graph", " ", "being", " ", "shown", " ", 
         "on", " ", "the", " ", "screen"}]}], ",", 
       RowBox[{"rather", " ", "than", " ", 
        RowBox[{"three", "."}]}]}], "*)"}], 
     RowBox[{"Show", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Plot", "[", 
          RowBox[{
           RowBox[{"f", "[", "x", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"x", ",", "xmin", ",", "xmax"}], "}"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}], ",", 
         RowBox[{"ListPlot", "[", 
          RowBox[{"pointlist", ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}]}], 
        "}"}], ",", 
       RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}], ",", 
       RowBox[{"AspectRatio", "\[Rule]", "1"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellChangeTimes->{{3.619119633637137*^9, 3.619119743556432*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "f", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], ":=", 
  RowBox[{"x", "^", "2"}]}]}], "Input",
 CellChangeTimes->{{3.619061427436977*^9, 3.619061442352462*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"montecarlo", "[", 
  RowBox[{"100", ",", "f", ",", "0", ",", "1", ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.6190614460977*^9, 3.619061460365301*^9}}],

Cell[BoxData["0.33`"], "Print",
 CellChangeTimes->{
  3.619061461446684*^9, 3.619061506169589*^9, {3.6190615876715117`*^9, 
   3.619061612820325*^9}, 3.619119354307084*^9, 3.619119481620069*^9, 
   3.61911972737733*^9}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
hyTnP/0/O4G7FA==
      "]]}}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.01388888888888889], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJwVknk81AkDh8X7yd1Kq9SEUnZKRuVoadO3dbxJEilbu8i6ErX5kGMLsSuL
1EdtWW9ZRwYpFo2I5EqSGeVsDMaYe+Y3Y1SKSY7t/eP5PH89/z0bA88dCVFV
UVEJ/sL/zXfu8VS6CZGn1nVjqEkCSpAg48lRHg7PUDUDpggsb3st5rnwwf7x
QO16SznsRlT1bCr6wKiPEW4fl4D8lpNlHt6G5qqVcQ2jQ6DllRYK1aUwaGJe
YNJqEKBVwnxI7gTtiFQt3JQBi2WCdcmtrfjJvuqEswcLukxuC+sZH5/kk/rx
cQqMeW1TW/FJjn/0ijbHiVnIIVNqbguL4Kk2VrLZi4u99y7yQyvZuH3mVKb9
5uewIF2pbS9lonZp1arDNyV4H8kSz6Z86V9Ka3xpg8hmxEQlXZWASe32twqV
Y0htmMN+wIc25VJ00kUu0nodXk9bCaBkfF98LJ6LTad2QllMQD/CVUM9cxxs
UrnViiNs/PX2mnMsZxDDofF2w9EisDuDG7WmasGrizpBERIoXU0zTnvLxOev
D9l2X5Dist58h9l9IcIEJ/8Z6JRCLT3xtHEZgYYU4z8orkPwtw0MXPPzBEoq
be4JRKOIc3SnXcipxpuCiHoH5zEYOT4yoxp1wTGTyp0OEYJz9eJ49MNOGDDY
n/fFEkjYpLhFXBGg9U7EN8t2FOPSar+j+20EmA6uaHLtnwK9nrw/j/Qcr7bp
f1Jm8BC2Z1uwYcYAds2f0uA29aPxHjFAcX0E+fmCAjpVDK5+k+kBxiTQ3/O3
+wsOzDJUZS0LLKRm490sexLTPh9eHtvaAN0if8rexQ7YfGXyZ9ffcgRGu+3W
HuJgbosnpc6sCMeHi6oijcSobK7JOJkjwrmq5CfXUwkYmuyKaA6RwUmng7a9
TI4rrPX5Zd7VoH1cW37dS4pA0+Cfxp4z4Fm2ZlY0KMfeyk/cq8/kuEU2aQ00
piM4/JmAODMJ23J+VGwsH+TjCeT0dQSmy3s33HYZx+8/qLcXFU7hgYrIJCWn
CVvJM0Ge344gtmOLyZAzFyWMLo24i3L0rynJ3eetQMB/xvI5iRNwrbDboKSW
wKB7uoR0Wgbxgg4VTAZoLuYGyWIpfM5qr5v1oSOd+GFySLobZ0OTwvcZDeG3
+6EbtdliuND7dh/XGEXIXcEmUZ8EPWsOJ0RFj8Jp4QwS18ow80vqo0Pvu7HM
biM+B8tQw3OiOzoRuFz89eLd8QJ0dCp9O/8nRuLE2sQTHTLkme4vi6oWIf36
R6E7nw97zX2zHd4vwVrldZ7nOoVurbsrrPwksD/NsAvf9gTk8Z1TacQzkDyI
qF2LzfCk55sFkrmQXBsPGvncD5u8Ax/5mxXYOTOf585vRkhAUpt6UDfe56Xr
8Qq5uFE3wawvnEC7Moaz3OANrHXsHmpwJKgqIPUF/yHCPdulQdeuAbSlW/+s
d5CD37Z+ED2/o8Cfc+YN59KF0BtM0/V344HPv0Sz5PKRS6pddK98jepsH2vK
kfv4vfhsAYtgQrvXEu65AtgrDQId13MgGCVlPYICnLDywxYyOvan9UVefjwB
xo4z2i2hCkTetPixq00A9YTvHV496IPq66DGbx+zQMvVIS30iDH1xOSQlXoD
otRb/7vdVoJlD39hpq2tRHLWYNgHhQL5VXrvVK1Z2MNKfmxwdwwt37D36Fnw
cKPFML6QngoHP7+WlSvFuJbb8KpiuRxjjn4ZXDcFDH2tHUdPSWD1gSxXRAjB
6FRdwsoJFAt9b5qHDEDZ4ml6ntYHD0OdAHsLMbawdryRWvQjU+7L+mpOgpP+
8dozwkFMGc9bpnvTYEqVGUVvSoa+lo9S/N0wEnKqiAUqDwFZ3zVlHpiCg8c5
7aere9FvHWZUnzuIec3RFM06Pq7b0Jw0q3lI2R1X7t0ohfn0G6+DGyRYLJ1b
Ggnk4yjzWOpsvgzTRU9HSmmTOFT9a9fpISlEbi+eLs0RuJJVH2DK6IJHXUx9
j/MoEhwOJg2aToAg8itcNvJw/5ZTZL7uONwbM9pfbG/HO08FtWOLGIQi8455
wysorqYGN9mxoKXyIDub0obev9K8ir78sdfMusldUwjLGF15ackI/gXFiz0K

      "]]}, {}}},
  AspectRatio->1,
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{0, 1}, {0., 0.9999999591836739}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6190615952300863`*^9, 3.619061612942965*^9}, 
   3.619119354371644*^9, 3.619119481675355*^9, 3.619119727459299*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"montecarlo", "[", 
  RowBox[{"100", ",", "Cos", ",", "0", ",", 
   RowBox[{"Pi", "/", "2"}], ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.619061624848662*^9, 3.619061638140601*^9}}],

Cell[BoxData["0.9581857593448869`"], "Print",
 CellChangeTimes->{3.6190616386976557`*^9}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
      "]]}}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.01388888888888889], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJwVlPk/FAgDh2cTW87avFs5to3VW8nWLt601vtlo1eO0JZEpIRylaPc02vf
Yrzl3U5T4qVyrHLlGhFyy2gZx8wYNUxmzGGYGWPGZHY/3t4fns/zFzzP9rMX
j4auIRAI5z7xf2+im9VozCpxeJbgYHBEgs6O318/bZqG8fNcKpnPgc7gX1sq
CriYsNQkDUnE6AquXMuK/wCHVKl7JFWCqw7ZfZlGMrzV/aFTuoMCMWFxRkgY
QpzHeIXMgY+jJNlS2aFlnNmYermUxUdZnFluiLEM/8oc/TxKKcKLEzttAv7B
R5LHmcInpvP40DNv8Kq3CdS+pdW8uWk8anKpudEuwkWP+DMzdjQUWMo0iGQx
fJiR1QtZEygJI6lS9kvw/mosvzt/BJRR58z6Vgb0nLbdPP1OBGvbjpR863Hs
2RnOsGhlovgFMT6VoQCt51vHpQ1zoCbTfSm/iaAqZpZekI8gK5awP2hZBtUA
Nc/wQRt8u1L/EnR6AcZOskD9Qg7kk+3Gx64+RxNPZ7PVSxrIVZ7XdYIH8XTp
17bIDC7yvMxt/h2rwkbL2zfUUj7s9XInovMXwMivMF56w8D9+OPnct25oKU3
hq/zpyOEQO1OGFOBHy8eflVfj8ubwn5KmhjG5J8tZcXe09hcZ1SakyVH+MqF
qrV2s3D5LK0nUYMNHbuc8Brw0MVsFfUNMkH3UjcUpk2gJ9HFVOk7j4o267HK
KA4KOmydiRZSDIfppjttm4NWSvYkoXAOheSA299+TcP9zVvKPn4vRH2/7KNv
4gA0bKnGM6titBWZtBoXTsPle017p2glOsxLayabRGD9Mhfz8DwNJ7I0LYL6
e7ASRBzoa1bC+T7pS2czAWrFlbcsuBlQh1znxG3nYetpU3PawzegVwozlE+r
8JikVcXrlkFqqUru5EgwcFaVrmGmxOLi1zkSSx5koV+pj1H7QWKR3HeJ3qH2
mjbfcJEBs5uGG6p0RShN7tWhMsQYue6foLjbh5TOlGaN64tQbH3gw4yZQeSQ
k4dE7yMaCSuFHBcePFtfjrYeUMBGKSv6o0GA+oVMaX/dEl47xFrdK5tC1I2r
gbKiZUhM93huTLyDyTuhJYRbS5j9wdr2RK0I2VPGByjRS/ii180suXwBQz6q
ZoZfL5T69i33hkVglIcbVEcvA6U/796kHsG9CFQ8H1Uh5OD8bgKFiWfrSsZ3
xcqgztmtTeGwkRHQ5HFziAsF4Z8cbdYbuMbHXNyur8I6q3RrjTVivPuy9VTx
MhdZq6FbHu/jgF5d8t7kaS8eN568ZxPcjJK7+79ZPzaPGG260aW3JcgP4h1u
PE6DRbW+06XOBmw4t+K4miqHJlnw3Wr5AKLdDgaEbPoAN5wi/2z/GvSTjw5z
a6QgWxHN6HUMSL3/4KpTeaj7sdLb/bYI/iZFMutVKYwu96sjiBLMepjGDsUs
InJuL3nKkY7wZgMrSiAL7xPOHxR8LkSjlvx4+S9yBNy23TfxIxvOt3bJch0U
8B1fX2ESOIQW7783u1RJUWu+TWewmIGerfvTDh+ZQPPRYyWvhW+wczHbq+aF
AMLEyZW9NiOQf1XNNZHzMb/AOiUdkkD8XyOadfIASDX+QbpW3Wg5S0gviViC
GfORu6ZyBkQ/4aR5nQxs9kiORD6G9dZrAm4GULEuZNQrL5GLGrsN7V5hKjQn
+6izTkowdS3YcFWhwJ6FCN3ai3MQ9iUUP/zPKHRf/C3E2H4a0XfZYWv1ykBP
Os+JeDCDapNDWk1VIrxNy78y/qQDPwVEb6FlyuHVv+OSwp6FmN86I1OHq4GQ
A8EFR+ZgvvfEA21bNi6LLjUa5rNAXCA2+NGUMKU8cfU/OAu3PXUr+7IF2FKQ
b6DpJ8Rnfr5ho0ljCPg1TqPnDgOkwsUZz1oOHAXfrD7L6MLjXTtaMsIZEDwa
0m2YYmJF8jLkkLYA/eRXYbGcEbTr3Whw7KuCwOQ783abT3/W8jC98nAW+qMK
mieTh8CFvMrajE99/5nds36QD7vxNDceX4rB993WpQk0MLrYymfX+LiS5x0a
lS4G+4vfXV0aPqDiY3mba9QctJ0u2EgtxDiXQ4lzFfTjbJFPqqadEvnciCTT
JzX4H0kdSDA=
      "]]}, {}}},
  AspectRatio->1,
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->
   NCache[{{0, Rational[1, 2] Pi}, {0., 0.9999999999999994}}, {{
     0, 1.5707963267948966`}, {0., 0.9999999999999994}}],
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.619061638745764*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"<<", "ComputationalGeometry`"}]], "Input",
 CellChangeTimes->{{3.619064273007421*^9, 3.6190642826521177`*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ConvexHull", "::", "shdw"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Symbol \[NoBreak]\\!\\(\\\"ConvexHull\\\"\\)\[NoBreak] \
appears in multiple contexts \[NoBreak]\\!\\({\\\"ComputationalGeometry`\\\", \
\\\"Global`\\\"}\\)\[NoBreak]; definitions in context \
\[NoBreak]\\!\\(\\\"ComputationalGeometry`\\\"\\)\[NoBreak] may shadow or be \
shadowed by other definitions. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/shdw\\\", ButtonNote -> \
\\\"ComputationalGeometry`ConvexHull::shdw\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.6190642836612*^9, 3.619064697309017*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Problem", " ", "3"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Clear", "[", "montecarlo", "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"circlep", "[", "x_", "]"}], ":=", 
    RowBox[{"{", 
     RowBox[{"x", ",", 
      RowBox[{
       RowBox[{"1", "/", "2"}], "+", 
       RowBox[{"Sqrt", "[", 
        RowBox[{"x", "-", 
         RowBox[{"x", "^", "2"}]}], "]"}]}]}], "}"}]}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"circlem", "[", "x_", "]"}], ":=", 
    RowBox[{"{", 
     RowBox[{"x", ",", 
      RowBox[{
       RowBox[{"1", "/", "2"}], "-", 
       RowBox[{"Sqrt", "[", 
        RowBox[{"x", "-", 
         RowBox[{"x", "^", "2"}]}], "]"}]}]}], "}"}]}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"pcircle", "=", 
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{"Map", "[", 
        RowBox[{"circlep", ",", 
         RowBox[{"Range", "[", 
          RowBox[{"0", ",", "1", ",", ".001"}], "]"}]}], "]"}], ",", 
       RowBox[{"Map", "[", 
        RowBox[{"circlem", ",", 
         RowBox[{"Range", "[", 
          RowBox[{"0", ",", "1", ",", ".001"}], "]"}]}], "]"}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{"montecarlo", "=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"randpoint", ",", "\[IndentingNewLine]", 
        RowBox[{"count", " ", "=", "0"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"i", "=", "0"}], ",", 
         RowBox[{"i", "\[LessEqual]", "1000"}], ",", 
         RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"randpoint", "=", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"RandomReal", "[", 
              RowBox[{"{", 
               RowBox[{"0", ",", "1"}], "}"}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"RandomReal", "[", 
              RowBox[{"{", 
               RowBox[{"0", ",", "1"}], "}"}], "]"}]}], "}"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", " ", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"randpoint", "[", 
               RowBox[{"[", "2", "]"}], "]"}], "<", 
              RowBox[{
               RowBox[{"circlep", "[", 
                RowBox[{"randpoint", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "]"}], "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], "&&", 
             RowBox[{
              RowBox[{"randpoint", "[", 
               RowBox[{"[", "2", "]"}], "]"}], ">", 
              RowBox[{
               RowBox[{"circlem", "[", 
                RowBox[{"randpoint", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "]"}], "[", 
               RowBox[{"[", "2", "]"}], "]"}]}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"count", "++"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"count", "/", "1000"}], ")"}], "//", "N"}], "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.6190619699645233`*^9, 3.619062059936006*^9}, {
   3.619062199977601*^9, 3.619062328406123*^9}, {3.61906242726789*^9, 
   3.619062428062541*^9}, {3.61906246270119*^9, 3.6190628134840918`*^9}, {
   3.6190628478021708`*^9, 3.619062874830408*^9}, {3.619062975811948*^9, 
   3.619062983267879*^9}, {3.619063188695816*^9, 3.61906319367449*^9}, {
   3.619063237302219*^9, 3.619063241897728*^9}, {3.619063349805641*^9, 
   3.6190633967803717`*^9}, {3.619063449845117*^9, 3.6190634617653513`*^9}, {
   3.619063777856955*^9, 3.619063849754505*^9}, {3.6190639463099403`*^9, 
   3.619063958105073*^9}, {3.6190639917261963`*^9, 3.61906401601593*^9}, {
   3.6190640706104527`*^9, 3.619064070835445*^9}, {3.619064112587391*^9, 
   3.6190641238177958`*^9}, {3.619064167512919*^9, 3.619064226978079*^9}, 
   3.619064692737056*^9, {3.619064746797011*^9, 3.619064748799539*^9}, {
   3.619065028909173*^9, 3.61906503408286*^9}, {3.6190656279821777`*^9, 
   3.619065648786007*^9}, {3.619065711227359*^9, 3.619065746792715*^9}, {
   3.619065782618104*^9, 3.619065838568042*^9}, {3.619065901228572*^9, 
   3.619065950559091*^9}, {3.61906601413043*^9, 3.619066026225963*^9}, {
   3.619066107821072*^9, 3.619066124301807*^9}, {3.619066984055366*^9, 
   3.6190669927077103`*^9}}],

Cell[BoxData["0.778`"], "Print",
 CellChangeTimes->{{3.6190658394906816`*^9, 3.6190658521866837`*^9}, 
   3.619065906531348*^9, 3.6190659650715857`*^9, {3.619066017844781*^9, 
   3.619066029955619*^9}, 3.619066113704794*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Problem", " ", "4"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "with", " ", "original", " ", "version", " ", "of", " ", "montecarlo"}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{"montecarlo", "[", 
   RowBox[{"10000", ",", 
    RowBox[{
     RowBox[{"Sin", "[", 
      RowBox[{"Pi", "#"}], "]"}], "&"}], ",", "0", ",", "1", ",", "1"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.619066978130691*^9, 3.619067017433085*^9}, {
  3.619067100078209*^9, 3.619067173823403*^9}, {3.619118316863123*^9, 
  3.619118328714551*^9}}],

Cell[BoxData["0.6303`"], "Print",
 CellChangeTimes->{3.6190671753428907`*^9, 3.6191192088061047`*^9, 
  3.619119775218246*^9}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
Bo1W
      "]]}}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.005555555555555556], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJwUl3dczf8fxamQNITQMjITQhEaR0UUWRltSkQ0iOzR8qVlVCpSaSjtPbT3
3nvfe7t7tTSpfvf31+fxuPePz+f9er/OOc+z2dL+4k2+RYsWrdyxaNH/n+T1
jiFLjrFBAFUzoiEAW9Kdo5SUo7D0rcGBmnAm1o8PRH/Yk464lw4fDdSa8Z7+
+2EToRepiXMJLfzDKBqdvr37VClWyr5ceP2pH9fkv7y4PUHCh9pGiZomOnQt
XDUiFWkQvuDozIriIqyBNm/k9hUPF5vmTvi2InOMoJ8aQcLdRWsefPtTj1yX
NfJd2xgozbkbF7yHA+ub9wyCk/twIL1Y6coDNkYfuafteVAEw/lqm88Zg2iS
1PY8tZ4EJZdUSWIaC83ien6aepnY/lScf0GFgh4nn917tg3CXPvZhSyJIUzW
K0wPdpHxsGb15d3KVMzOiU+vdW6HUStXp1+pGA66xjmPVRJBmdeG5Q0O0r+7
q9M+DkH+w2ZNxeAKbLKk5uhNhEFh3t/COmgIedf8/3z/+R3JN0rHyfJchHjv
EBqLaoT18V2ZNXep0HvCLaf6kdA6JbWI/SQORorHE95ZF4CzRoJ/6fEahIV0
xvrs+IAdGWpBmaJVWKn6Z7/P0TBI1KW95DMiQnSLVeQyJgFsRtulSQ4JTixq
+6fLXQhfHLazYysLxz/e+zESVQUFmwNL5zX7cSo8dyDcpw35fKYMx2IOzN62
M/0CSfgS/uMmdbwZAh2v/puxb8G25V5ikufbcK13399rcUSo9Eq9kglrR8JT
w9UC9EgoFH1r1swbgsQNrYNP1w5D/cW6+fl9LUhe7K3wwZmDwYn4H2+u9OCr
QMBsTxAXUW/J5T4/s7GQb3uK+pKNnkS5VvUWFiRLb8b/vNYLxk+aa+92Ao6f
emYma0DAqujL5yfi/TE8YZ5lKtmAo7I04SqzGLzsu5+tqFiFAYODy0OuZWGj
Cp92CYeM92Fz+gxPOmSFzXY1trLBiLp+hFZKx99+D41Vq3+j5yZBNvNxL1zc
djDOurMw+2V1qP+GMsSSVPUik4qg2voJdt4laHX5ml/Iz0WjDXftzT4ajjUN
Xjt8qgI/8OrBN3oMoF93MYD3HRO5tdo7hNhwXVVefJREg7j6MaVEayI+vkhd
l3eAiDxR3aBCUxYEL3N8h0wIeP5lyCqidBAkod0GBP0OaFrJddU60MGQZZ3f
bMdCxq6HVvTLNMSM3Z/X/NmHqwXFIeT4YewqkVxeqEDHx+FlcVLKrWh5KL62
pZ6EoK5/hxDFxOtqj8n2hSFQVrxaW9lTioVRJ8NVNWTo2zkuatbJxEDstvwP
vX2YncpzPKaZC4U9ekOHjw/BoFLofu1sDdgl9TLenlRwLVR6ny4iocMt35Tq
mYz9OuPu1NIOfMhy3vKzoApvM3braE4kY1fc4nAvJhVdGp02O0ZJmAhl2q90
bcd0Z/i715/aEXfj04nOvc1wfiNRp8V7T7N3795qfxI0tDvZ21nhEFDP8gqq
poAevd6fP5SOi2XnD4/7c6E6uufXosNsfL2+/B11JBQbjwo9ku+gYIibb6Sw
kwDVi5lfuxrpSFNl/wh26oXfyg/7OXsHMKUwohYSzMDB4r9zz9Rr8aonTyjC
oBOe8vaJUvH5WF0glv7n3hAe3KIY95SUQKLEdOh4IRlGPyeZJmUE7O9Tnu66
0owfHOuWSRoDrzftdE4914XubcQNkm84OEXQ0I+QoML26dcbx3PoUGvtS4M5
FcVTm3dccSvFpDR3TfJrGg68u/db25kNlXfBr7PNKYj474V8l8QAzqQXsVeZ
1yMzKWXO0DMfj34F/Y7xbsC73Mnnj8aHocL35l/do178OqFyXZjExoa5k78C
Z1i40rFz+5g6G4La+2pG9ZkQYb+svryfjm3s+HXnGHWYvWbltHu8AyNtEmfd
w4m4Ny8xZa7LRc2uq+7PVrGguyb88OxYL2L+dCwiebEwt5qrb3OsAofNGSdY
TSW4vV58WyNPrzWWEUmVykX4OiObmiDbgsSQ3AiBuAFYnqp5+VyEidC47H0J
GWwYSd+gJD4qB8233+t6VQN6vVoXL5Vi8vZ71Mp7oh/GfNqpBZNNyGocGJ93
6IRbZmzv6j4OnluforfFk7HJP+LDcj0CdNNWNiVOF+O/t0/CXlqSYObn1/zi
YjbSv3gHxvL2T1zA2MyyswVeo99X8kUWw+ex3c3MiXrc2bJVaBOxC6xfNQ+7
+0ugOBIyGniehXfyX+72O+dCPXr99WqRXGztvbTijwUFVS/01Dv3R0LnFn3s
CLMG4mdjH+gLcHGJfbQpi+c3lXcFqswi6yBqr1lTWUgDpe6dJPcdBUwygVTx
KAm9VfG7l31tga9alVhAQDZWD/rt+Py3DC+I8r/3PeWA2t8/4c7TgYcI0+uD
zgWI/7g6ekRjCA8HX3i+FiHD1SLzvrszCVs6bRIP8nzpvvralOhDtRi742e6
Kn4Al+6ve8PeR8OY+PSiWSkKolpX8729lot2owk5iT8MvKvWEm7kUFAy8lyw
s6gP3inXD3mHlONKZdKjB++6sNvMVdn+fT8M3v/LiQijYq5gw22b/EHkxBoE
5QS1IXxngljTQDmKnfm7kr1533Xu0qUfaEcRbWGrYXQ33LqkZEyl+vFbWP2j
iPsQfr1tyf5iQcO9Nfz/7a6go1DoanDMCjYCDrYQO2eY0J/yqmP7EkAruJ+i
Q2hB7M15hxGbUnzyue36+Hklkmf81k+f64H6iv/uykwPoDx0ZmNPdz+0FYJN
H7yioVWzetZycSO+iZl1Rhfk4NjPj/2/pR5iqcYfg7acb5gcCfeIINIQUKe5
d5pJx9bOxvvOyUxcO3bYXzWsB08+jxZFufbALsVVJXBvF8ra3Sp/6nTh0epr
R1fWMuCr9XOHGoGC02UFfhsvDGHL9buVsesIGOz3MjzczIXUnpv31PeXI6l6
xZPp4lbc9756pf9pB47+Tn1sPEaHfUPDWYOtdBy5prWUa8VEx+Teb4vPs2E7
fDvFWSMasy9lPs7eIEAn/8oKyT00vG933Fa3g422sH5RxdLPEPB+uuSqCx1J
I2v6N2lxcYWKo3EPo9FZ15Pw98QQPvy3WE/QuQPT6wyK23aR4OZLPDdlQIFl
znNH1jMGlJ2N505epyDBwG93RjcXLvVdmw+MlsGtlyuV9osJ7kHN8OnVBLTb
+YxkT5MRc0+v32yBAf81JUoej+Lw2vqBQdQwDcFiZ5g1vky0PJLWMk3iINTP
arlc3xtI/LwqEre3AamfY6d8DubCR+BZzeKnMTgTlSh2NWEY/DnZz6NXDSD0
rfOy45/L4DL0g//OietgJEeXZjZ0obm8r+KFTgGSdb2P5c2QUCRz/EDwk3as
3mjItWeTIKzIpyLW3AeByenVyzaRMXc3SWvpogp80L7TmqdFRyARMz6XuNj7
n82WszuGkdhXcuvk4k7oyO3ZZ8XLn5v0gwE/fauhN/CULHy2BEKjniSf8F6M
f1gWM36SCr+Pj0kavLmUGHwOl6gPx5NktV92vl2IZhoGBn+lYtvtQ7odoYPw
Kz1leEyQjZR7BzuHHnTh1lYhW5dbbUg+9HqdimgXqsedFAV5Pvf+tccO9ZZo
bBrffapZh4YWV40R3xAOiK4l/C+5ZMzU1WnKzbHwKan04RqBYRwNn58U0BtG
6r+rhL2VFISb3/V59YKAAKk976+PNmHzzv0XpCl0bHI/Eh2nRARjnwIj2ygD
hnM+wXn7SPAOyLHrW8EE+dpK/Z6lBBBF/qt6bUFFyqpDApu+sDBRoeZHetyG
c8GVf4LmhyCe1JUjzeOvV4tS6gcsiZCrMi9oV+ai4/j63wqEdmy6RlvTdrkZ
5iJu7iIyTPx7L1h2pOozPEJ0uwMXU7G3XP/TB5Nu1JsVrZxZx4L5ZqkH9aWR
4LKanvxTfokJV9WjuvvZcG6SrzsVSgJznLBCu6EJDkccIl6IDKBLdq3sqrcM
7KtJp66I8ERzme1ej8w+tOVFC5AXuEh//STy89YcDC72TUi2KEX2Xwvlcy+L
sFyzaKMfXwfsssMfu/2jY7Ywzcz70RAUe6lHp39VwkFyvvWAsgUGBBVtv14g
IDhVseu1EQMj1Tf5Rs+XY0PhmrRDG9tw9IDmVv8N+Wi8ZF/5VpOLQM3BqLmN
RbB/vr/YMrYVeu8P/NpWU4/vgp6Tz4934v6V/4b6w1hYCCOIOjYwMSlo+5Xb
1YvTlpcDblh3QJweFrjfswe7yYeFPjSwsJxxdrT6QzuyStY5r7WtxkGm/fz7
My2ILjWcPV5PwNo8AefrtUSk7/uslU3hcfXYqKvKQA58yt0qV+YR4K5kom4R
HI31ryxtDnsx0FpLTvKgcTAbwMhqT6nBqJe+/Xg7B7ry4+EpeizY/r2n4znI
wMkYC5HjnWyEMhctsblBxYSuyTna+UH8i6RYJmhwoX5U8M9/Osk4VednT+E0
4VLjCodlrcX4s8//y5oZAhy8NjUvY1QhdFSuUISn7x38+aovJLmwGn5opnG6
EY+uDc/8u0fBqrtqL4wrO0GLvDz2H+/88pPPv8mZliDEOrY6ubQE4QKfLjW0
tsHkUpWPZzQRAxX03qn8GjCUHMqceDlZxJx4RNvRjdUK7axuUyr870lZUEK7
sfk33UGhNRzFQrMZ7/dRYbE+ZGVQcw2+y5375iHH4wA372yLrcNQ1b32b49j
L6Q+b9XcMpcCk+ursvYFcqBhcaJsI8/f51OF8V6Idx61kJSwwCK4bM3YaFFO
gZ5o8sW1jFy0TuTwO3wrwq88NSUrnj9Pb+94YriXCJI1K+BQHRdb/0Z1/Mnj
cd+P5k+WCvV4w8ziz5hrw5rXt+xnpwLxbsUVFb6LPVBVD82e5xAwUXC2mZbI
wdWYezLeX3l+9zf55uNpKk7YDdP3ObbhrMnZZSdUB7B0oWqqy8MbtfF8jUUv
W/DS98z+JlojztT71d13J2JKyPrV3n0NuB3xcOdVZQakEk0XzEMKUBMzGL+y
iIUWfrHLEapFGN/2dsdzEQoOpZoZNZa0I5J/9W2HLe04bWUxUSVUjsZdhPNv
efxi+7ZV80l6HsY+ee1J7bfEbb+H0dWsYqzVs7EROtcHX6Vv5z7GkEC+N7k0
aWMaRMeLD/o7l0Jwl1ujCK83E6d1Mof7mzAZqmJmoDOEDTdO/KTFFON49JIm
Y14Pv0GWSB8/5o3QXXuEJEXjIfRlSnfvABtH9/mgI5eMhmIyV+UHzweihT9o
81dBoj3t4QkeZ58SElxvkjiMNPpBraZCXs+MyUlab88C/wsTFV+vIQy9DJUx
eFyMuuFJR5eLfXgh7TV3lNd3mhP+fdXcMgC732Ofzh2iwuD4dWbyGxYI+gky
J6bp0EuXXvTYsg23PtqVaC4bBqlSTSxHfAgxWR1zFZUVcFoyZrRUphJleXeN
16wj4rzDvWMZwSQs7vni5PyuEDEdy4N+NjfDw6tfSsOEDZfE/y68/EvB9RSx
0xjhAGubO70lCdByaecbimdDdd1J9XRuEbz1knuUl6dD7eujsFkvNqrDE1RF
z/H6l/6V9rurqLiSteNxom8dot9yo9Ime9Cr1ak/UZ6ML8snmb8/McHCET59
oz480j0dMHb+N2ILLY/SPLPRtJRit2xRA9aR9V3vTDShmXYvT8aVg/3fCF63
Z4mwaj7z7cwQGXtNzp/+vL0EL//R7HW/8vJblP/BrlAKiHLluo00LpL8xTf6
36zBbKDJdS5fCW557bE/ydv71WaOR+XimbjtkJMye70IQvvcB/gbG/FRac5+
u7UfotUe+nXfKuHtcaSowTgbSYKxW62fMKG5uPz9Mw8udqw4+2dSrA0hwWLS
Rt79eBNa1HxqLw1nfj0Jn3vCwr8NduN1SIfIfVfFQcVqJGUZSOyO4+lKZp/C
rrkWTJM1lxrr9uLp1bqPStviUcVO9PfQLoPjgl+EzeAQDoZmPch92g/h66dG
OTtZuB/yNZYo8BkijtbKWzhMvHtAf5W7kowx/p7jSStpGH2XJnErmA6H97RF
TF0m8iq+KAlxB5Dgf/CQqSwTWm+Wj85v4ULxndxj+0IWFB5/erU9rxx5PiYX
riV0QNB1y8uujloQsx/vehTsDOPG9OVvDmfhXryS4+CuMmy7yFy9xr8H1U3i
hX2VVNhHS8xbalEgvWfxhm3av1Hcu6r6rGMTUj2ovR+1s2BwjbZKYm0NFD2H
rTgaTUi/0WK6+GcDtj+9HKzKaYT+zeby6ock/Cz+blspSsT0Rj5XZakBpP4y
qau27IWT2L7r27hZmFG4rXJ3lIrfHx6fl2YQEHtmhf3EKBFbIy2Ec304OFj9
UPbxwU6MmJlZ1lBbUWFr8dU1jogjQgor4qKZmKdkVIoeqwHF/ciO3hg25oLP
9f4cYmK752XlTf7lIIXY3J9W+40l65NLlOzJiK5tKVT+S8OEh0lVySAXJ3wy
THby5q84P9lxy7MbuT3PUmoXBnHu9JolY+1dUA9S7Cs+0AYZ+1n5oGwOtpa9
8Fv2MBUPTgom3O5pwc+wpMyJHUMoK1iS9jekG72n3Vw9TQnYtXDcbyyvE3tG
2kLpyg047/pDq5yQCYkBOcayFC5MH01pNBwi4v6F6aKGn6FYHWsjMFlXhXzB
r3aCdwuwbVvZDeGITiTZ9VgHZHDw5rNNwfIyno8zFwUbRnZCTUyk9e1QN67w
77B4cjcdP/TzThvNlGK1oPYjnRYWKjS8Bs90f0TdapENog/pOPCpJeLP2np8
sE9zKXdlQF3jycovkjQE1T36brGvHKyy++fgxNPLSfN5x7MtuPAyzuuIUwek
VW5joIADZz/Z6O1faYDn+t1W7Dac0TX/76wAEx8fXq+OLmbjH4NvO+MWERtX
kTcdj6jBQ9vp2I83+0BY8tZipfAwXlwNtB4MH8a6D4d/R3YwUThqXHh2ZSSc
tllc/vGKjTXHf615H8mEwH8Tx8153JgdKR96/mQAfuqc7z+zqwiVoemsWvMh
tJoJLr/BV4FmWT7GKc1WuIZMNj4r4KKvRyvYi05H8fiqUnMjNo6dV0j87yYX
s+w68c/joci7eeniNWokNicuTdg9RESjtPI3slsxLGqzZFqnilCYfTxkpmEQ
SgbfdLMe8vpN0/lmh71UDKaFfvlUWQaygIf19+MEuEr5MzN5fWbDZhPKXQ4Z
Sz54b3p7qxlNRYSLa8IoeO0bGmV4jbfvrRbX9yuRYdVZc6MwnOczghZHtIVS
sWb6d8Xr/E5s8ijulNzWDkOzkS1tMZUw9Grxf5zC680r/Y+VCA0ilGHzXMi4
C9mFmUSL2FL8WPgvLm5NE3b2aDsqh3Ngn/XDZJ9iI/LDp3Y4+fnjfsSPpd1y
dPjsc2rosiYh/HvACZPvRGxoCjhd+IwF5WfmL7hPGmGSLLhRbHMy3F6oXR9O
YiNY8ILqi0oS8vsPndmhQYKXi6ZGdSSP4y5kLDyfacLbqLyyQPU+3HkqUZM/
M4jlUh/vbltfiudDM6v3MznocSpL3XunCXI97re9PtbgyKugozHHKIi3O96h
kM+bg0nksqlzv5HtZHa8PogL8cjLlY4hNIQtzn5VSGrFKcefL7uZ6ZDVH55s
6q2GcMPLobs9Zdh7o+ypwCU6ds84frT3qMNv5ciQ7EAu8llj0VW+OYij/icp
EclC0kRtzEYTMmYTeiLlMrrA6snrSPImYZNGguRVni5TPDMl9UeroPvV0jbV
jI2WmJSpMx96EWmctmS7Ou++rFdwcpfxuG2LpsGHHAr2XYHm/Fs6Sq89ft68
kItFfWuF8/OZEEwYEi3ZSEO/9iH1c+LfsZO1yuGrDwMBIpZ9Fpt4e9e9o7k+
hsflGkLOwykshL2mW137FYEzYiemy+cIWBblekBiJQlbiSvuOb2mQ91dypHf
uALfJZ+e+xnOxvbDRm/EOipAXq92WaqyEvtuSJbK25OQ4rRiucEtKlysrSnh
SS1o2u8kuWkXHV6Ct/L5D3BwQGyRTIA5HYs/PtioFTKEsN5DXZsjhuErM+W9
PJWB/UoMsZ4wDmZIPivf8HTmLK9vHvCbi9cZ68d8su7j9heZBsLiCtivanhl
FdeJnVfXMTVOZOP+L/8d3XQuzq7VUk11IWO/1ZDw93IGXFbbkSxXtUNOsFHP
8CIDKf+qWCsINOxcW79bkpdXm0TD7OPMSlDl27Hht1ct5q91Kfh8i0Z92YGH
Hxza4RAx5Obf04X6w6F+ly1b8Z3zzFv7UAtutfz8ukSKhv3sR20X/LrxcyH5
idb8II7+F2P74U8HbIfXebh/Y0IxqHfdlo19aAqmq1llDUL4ibKIBq0S9+os
/H969uNm6WWzVpEOTEUOTHaNEZCxbMUp2cdELHGpVz+0iALLfxOmYnYf0B4s
Fv8mjAaBFVqm4gEM/HwusimcPwQ2bZ4W+lQWhqaMtl7MJ2CJu9tTQ1k6nJbT
rrSrUHFjibLGkrEB/LGVv/19Xx1sZXxu2goMQFzlWF6j7DCqrKZ/1jtlILY3
RXapCA21l74MPkYevDb8qNq5vAR8x0Z3ngolY/nByX/nyuvwJT7qyUZeztla
PKY55VEQkuf1J29fK07TzQWfa1BRqnvQQmBvF8Q4qgcl3gUgVzjq6ZmDLXA6
fc509jsX/UGGbSOvSfB0/BW4pW4Y9BvemSm3e7Atmml/vrgXXWvajAMtmdjV
5uYavLMV2km71a7kcnCFEPeY/2ItjotInS8t6sDyWwIr5ni+Hhuu/98LYRY6
Dz94M+EziC0jt5NrLBrhnmCt39xUiR8e9582p1fDYMOUs/7uZlA2MG799GvD
n/eku/kqBBgJrCW3t7Ex8DM4O+4qCZ+Y3XwXlLhYd/m+28zkAP691I5W/D2E
2yb6pik5vOcPPrOiW51YZLfBINV8EBv2jSuarKvB1Y3XP221qkSfakJr5Xki
EpWUQhXuVcHjSNjGxf7NKBKz1XnHywla25vEwOJK0IL0LL14fnDoj4C44Ite
xFKthaWfDWD/jPvr8XVcvE0cETVMpqDOLDBGQ7seiR+Ja759q0HhHfEzYfVD
OPn5sJcNqRzK2zd5jU+1QT//m7DqOR5/vlbRPfeVgqXP2gmycxRs8K/bUFNM
5fFj3fJDKZ8xbnrv4EB9K9YLS/avUqnGuurGi+OqBKw0nvR8k8dEyJjgyR1f
6DAWyc2jmT7FqZT5FbXl9Tin9/7EdBYLVvm3pYujSGhwyE3POFwClQMvf9ul
MTCREPuqfaILSmWkb/XeZJiYvMiLze1HmdTVlaGWJKjVOtLFzlfC76zC7K8l
gTi86rrToxpeD98gI+//tREuB505VW5E+GQqieSd7sDaD8Y9MreH4PngmULv
ViKCWw+oY5iAnrqjBVxuBDYG7tRJVu6Bx97LEn9lvsP7qVpKwQEqrj/M0P1w
oRmMuIPRao3dkJuLlXj0mMcPiml3K54xUffv/vul/Dx/Gu+sI6Y2gV2zx2Rp
2TDeJucaZi30wuP9eJePQTRW1+159+05A+evJ/g3lPSAXuNslXS1CW/KcrMc
f3zBdMlc3fW1BMz80OATZJVjLKmwTDSain6+rQF7PlBAUooY005kY/ygRDv1
MhmG95U2aAxWQOzKsTiN82RENcqGdu4YxGsvm3/z94bgWx4Wv5mXo4UqtcLc
s53g+oQN3rXMgOmHQur7CQa8lL7b6AlRsCZ0/IVDJAWy69/5911k4n7ZJ0/X
/UxssZ2b/i1fh+e3rD6oKJKx01k3bjP9Kz7vdHI+HNaN9kfzKwIGuLj67ueo
wrMhrHpveoxQxOO+pIRFdy7Xo9zzpc9K+yY8c3cxnufl5L7LOfrBq8joPLj2
ruMCCTfOfJgrn0tDh7mb+euDrXiU8Wu6eLYYRr/i7B5+HkbpWwtG9CxP1759
MafGef6ddXPLvu0JGLVO3hjrWAEVg7JXZrzeNkxvvpr8vQleIjmpkvP1WBeX
Pl3f0QHulFsRl0LFnLdbcNhGMqz7z72U+FEDbc3QXL1vXEi5vE2/uoyO7PQi
E/9EP5yym9pwk0bBk3bH5yMnaLB78qEnJHQQZov7XFJbM+Dyibja+0wCXF45
af6RLMaVKAWTPWE9KD4v+SNzIwO5casN1l/hYFN35Vu5phLQTyuX2V1m4lC+
2rTtbhZUz/efz3Bl4UxfueSGdcNInrY/IX6TjYIqgzr/fhK6hBXJewXIKHp7
VzYrbgiC/PGrPf6Vo/hoo+JEPhdzuzKXt2b14NWJOot7Kym4MFcV5j/cA+mD
o25v1nOhEj100+0hDUsdDKnPazi4XyJz4280ByPp/spC5ixs9Inyy+X1xptN
s+3zPP6tHH6bQb5KgNPmoW/BYymwIn3SjNClQ7bnlPJkIxmDERdHH/FRQfk2
f+/LyTrIf04f4ZTz+GHORaorm4K9caQ4q+8MqA6wGs4pk/FDaIXkK9dmeGXn
0pfdSca92KntWhvIeBYhE2rsREGLfex/7TdZ2HHjy6E7M90QSzpj3B9Ug2t2
ClI9ZjR0HD8k+t6jEDKulDv3rQYQ1cKmTv1rhkOOP6VxgYXph1pSChF9kB+d
GjiSSIHX02H1gJ90aF6WvPiimIH1hh9Ojy2jwpJIuvyo6htuJ1CthDZn4FRi
d+aXJBJGynuMBbQYcDxguKlTrwNzlx5qPhVpgXATh6bznIvQY5fPnnhDwPnj
8tv997Vg1ZuSp8/oZGwxCv/UtbwFDU2xFfZSFPg5VE/5S7PxPcZcZ6lbHw4U
RO1dFU2EkiA5coM8ESLmCe6/W7oxEjdUICNajlKBlbpa0RRk2q4tOJWXiYH8
gRtbVGkgkD4PDR7phkvS5GQ5hQV11q3APaHdaP2pmDNoSsVbFSO976M8XfAd
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
IVt8utQLBT6BPYMnYyCdJ1byXrobOtyeqqfyJxF7yWD2PaMH7v2VH9Pr26Fw
ztXZ6e0X7PU4VtNQXIOcgzEr22/4QX9+I0lLk4ANPg3/kWJr4b/1lf37bRMo
q6XHfjoyAoXdkS7//51ETWKou/6fYViUXxX6plkGQ4kDKUnb6aAxfGpnZcZw
bqwBL60Hwb/a8nb842mY6t8QqV4egE5kftLz5mjsPOw0m6k3DffkY7uj50cg
VEWumtTOwNjjhDuCCyxIfqmXq3k8iJmGcKNXp9j+aRlCqBiZQgyvpmh5yDQM
Le/okS/3gEw5O2XUS8JWwqvYvbZTOGbSPT5+pgHRx9YLM9ZXw7St3LmskAXK
b30NM7RhG/N9+SU2L3M9Ufbu9J6CrlDPZu0OGpqK6nUtrPpwqPATtfVmCcqF
E5t3pHaCcbI9MfhyBQq+ZG/VzWFCvHPeI9PpK1SNxr5bchKxpHp5S4/xJHx2
O5WWsf1WeqZn32LcV2T8ot1aFqnCOqfikrP8dIRvdXGa+1eHV1ft3h1X68Xz
5pqD60WpUN9Mypx0bYdwU+LDpF1j6Lfk1o48UIXw5Uoar/Ak/Jwsq26u7oBW
9HzqD942mKbe1u98zeaP569vqAUx8f1kflSv9QBsuU01mzfTYXNzD/l7yRAU
Zo+4y6pOwk2y7eybgnZ8MUze/cyCgfEfVC0uy17ks5odL5UW4sSlTYEOq9je
nZh4usUoEILOs09O/2lHc8w1xXMOTKgQLnXKfJ+Cz02jN+UvqKhdr/nr5VUG
ZPWtuVeYVOBgVu3srZsjmOVYlzA40gM9J3XilSAybmSkyVk8GcUZ18brK8vr
odVw4KiPUSEGpcw09wo2Q9zwbPbP9HEMLl4+u+UZBTNHswKCLZpRtaVyW7AM
BXTzTYdq7WmIusNKaN1BwGZHn9/n7bqQpBL+Yzt9CLMV+fGLR8i4IjgqcHU7
E4VCYpLttzux3VeLksXusT07TOyy6ih4072Te6CgGWln76+5cH0EKzPE/NqP
tGP0fLmtvcMk1o8kaq18zM5jyZA3HSKlsKyNrBMUHENWf4oRR0s9Co87ZXKc
I+LczSCdPeve4oEiK5FjfQc27ohJ0PGexKjGtuv0ZjIePvFI2unBzs+1d21H
Skaxo8Lf0WcLFZyWuUsP01sx4O16eSmQzfdu/r0zb5JQ+9OOUVyfgcaXUZee
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
Sl8JwuuoF+i9hRiXNQ3NP9CDwk1uzemqbHypNC8m9GUjLEr+4lau73g5n++/
aNiBfFgG5VnlQZ5RUMYpJUP0h1HLPGcCp1ZvSuiuakI+59hjfsEOWHm5k+9N
sOF5kpbN4fbLgd03AquCexF0Mb9hwG4Iv7rHHiT2dkM4KtXXYmESC33BMhHs
DAyj6VtOQifWCcrRZuI7kePx1oeXO58bWjfltc0TcTShR9OCOYn/Ll57UTtS
g3HfKEWtVAbOWLd0U+q74Rl8zSMviYhXY8YmyYQCbDr6ZMOJogkI5f8kZoam
4tn+EMaObZM4YX7zXdOjIcypHFBTbeQg5NjvjeGrGLhsSjOW2dOFe2YubRPF
IxjkW3Je734jFpI02vK4+XfTf4tm2ggDcyKHku61VMLMOnTdjDkJWwyv5YfH
j8DdOq+9i48IhVKZL2IfGcig/QmgR5HxaFQkacGYjq17FhxX9X/EYdsrejO2
FHRYmenGfqNhKEX2BJ/LBJ7eWCHkzhjC1fMc9RhuH7malHnWOXVh5irF45Hb
KJRXT+94f4WJuTvfpsZLGvBy0H7uxEgXpubmD4hz/THY5NFtP00ifByWvtHo
pMJDL1NZ/3Ehrt8KGI18U4wDPRYHBu2pUN+nYCtxnYjxldXZWSajMI33XpIs
SkZ1TtHNLc8qIWC7Io+nlIpT78itrA00kGptL6fW03Ff3yU8Y89X7Pv7Yau6
TAJuy/s9Or+bA6FjTsdUE3qQ5qbdONhGxrobLkfYTdzzxpN4nE4j4xXrzCgx
nPF/FJ13ONX/G8ZJ0VRoIKuUlFER+kbulAYZkaRNShORlLQko5CVBklm9sgm
e+9x7Hn2cI5z0pIiv/P761z+Odd13s/zvu/Xy8XnwOXmmTRdNxa2nPzjNTvQ
DpIm0fv19ABix1TauC874H/gAWMgsxFBln+keU3j2H/hR57gAP/zJzmc31BX
BVeP3wolj0chIHR4U5svB5/T33opl0+gdLl65r7YMaz6GOWYUdqDqitLq6S2
1GCFzk7dtJpU3N+XMffDn4pLr2eDhS634lZnrVtIfin+TjsVXzuZB9IRTnXi
zR5MZnyWvmJMgh9j9PueUBrCslf+XLR/EJWOlxaP6Y/igcFJZxW+/3nGlydN
5w9DWnX86EiUK8Zm3x9o4zYjcsc9rTupJNxVJh9c+GsShS9lx7SL6RhIu9l8
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
2vAqKbIxyHUUm7pNrdkRBZgZEHQvliMCYrx3tOUYmBw+HKCbkoxs2mFRxjAd
QRHnz1VFUPCS2C6QociCmFh/rnUKHb7Lh67/OdYKaffwFdwvGOB5oX9BNXgY
F/7x2P0SHceRfgcN+iyHKybfK5k00dFNNrx52qsfvmyPaUU+Mn6J8FzSseFc
p3HLupFsFvQqm/rVBoYhO5wxuecNAz7pIyEia9oxkVy4Pt+JAfv2zyaCBk0I
bdb2P6vYiOX2gY4pnHM8+fnG3lm/bhR917zNPNOLTxu5JmaEqhBmMfqa62sP
zOT/0zqaxMmN2c9ar9v7IUE4x/fx/x4UIfZDtLYIJ7Nq1Y/sGkd3boJrvAQL
YEkKXXYl4Wv6xgT5F4OwrHvc5DHrDYbmgo7nNSJy/n0WF3PgnCtNfvdGPQpK
7vudgsw3jE6K8p4weo09i4/1PK7k4kifzN0Xfr0o2W3nyoirxW6rh7USonQM
M/p4TQYY+E+lweCmTj3ynFLPq5LG4Sf94aDuGAEnqH31USFUNIa6+/UUj+OK
2N6/+3srMRny+zFpFRv60xZ+ycu7oXHnr0MnLw1Hdy9zSJHkvN55/cGzxE94
IBCowOPN+Z7No+fsvFsx/jn4Hrd1F2TCr8TnBxDxXXBmK301A+9rx6RYP0eQ
mWnuLnagHRbH1auMpIiQY/LOzu8Yw7ClelVScj3Ouibz+d3JhWZt96KiIA36
3PvZYacnUDkkMLS54y7I+3UP7NzUisV74o3Ssp24/1A1YCy3Gtq1dnKs21UY
dKF+P5L8HZuPS4//J96NJ5JhA7FJ44jcVLpHN2EAHkrX+tM4fE2z9VjGBOfz
t0xlxR/E4NlcblHGqVqIErbqmmzqg+a2+wNK7+hQ33V2zYhZLXSPep9/JkFG
WOjosXUpJchs0TpU29EO1ROiW90Y/UjOupeZMNqLuBOPb618+z+Kzjueqv+P
4wktKRUlSSSVVTTUF/VCW0RFRppKQqVhREbDyB6VjJK9R7L33ntv97r3uq67
Khkl+d3fn9d9uM75nPfn9Xo+78O59wve7dARSbo2jlYRYuSuDCLY4akOy3L6
EcocYx9fnIRc72tzGe92mC9JzOkt70fQI1LVxhXNWNzObZS/ZwKeOvvKbh9l
4sTo7Gd3fSKE2j9GXEufxAtigtMqUxaE3j84ZiVMgmr99wXyPgKUOmXkf3wa
x/dnH68YGRDRbsNza78XDX1OJWxDuW5MRsSNP3Fl43mV3diDqkHM+Y6eOy9O
QHN056SVOAMbTzx+u2MdCXeL73c1f+2H6UP//dGVTPxZTwoMGO+GZbelglNr
I8K+dz9PuErChdfaC2udKDjnebNluzULSlt3hotksRHR2SHOPshEzcEdqskn
J7FWr8tk3+FBvNkl9Wd6XTPEf0jHTLSzUOlQ+2cusxqNRPsDWXQG6LbXO5ru
knFrfmeoyPQgyi8aq2w/2YfRnWGFbj3j4B7MZxlSyEh/GtZj0nsPtLDWy1Uv
6djkWtchnDOBjY+e6314mgb1YvFpdikJ7nLYJVHGhOz3lA1RHv3ojZLbGiZJ
x0/az0tinZ6wvkS6uPdNOz6OTdneTRjCF881zi6P6TCpb6tqdCjAxFTsQBeH
68vz7aMeS4bABS9dKh+QkbZDrafxeQXc0tSHDTi9Pr4jpFvTshRPdHZ65w/q
oMi71JxCnsB42lPd7fvZEKuYjyTNESAx0uWscqoXZ35M8q1vmUBDyF5Km0UJ
1qortjZqTAEZJ7PrP3RCIVG9dt46H62hIbdI+XVgBuZ6/VocQpAl/eU7nWH8
1CQtZF/JgeqxZxm7UpnY9J7xszrGBtLy9ErN3HFctl5+xsmRjSD/E24214Zw
Z9PgX9knbCQz75/wPMvCPfOswDXb6TjkuTLWlpEL8/1noitj6dgsdeZ9oBoL
WU/aYt4RyrFzq4W4z9MSBA9H8JQa9cBdaaRnmjP/Tb1CynK9gxDIWv7a1l4C
x+W3HxK04MxRic2cWFwXyqzcVrEKupF/bnnG6MYpHN+53rbN8Bu2S9co1yTT
wXNoa/DL+la8WOu3VGDGANOQsDv431dQ576xf01yerTAQ+X0g3aYve1//u/R
CJpK1qsdfJCLYFGCOdmgB36TO4UVDw7CKKG3nZDdh9MS9M3+Mc0w67x4vKK3
H4f3q9ROVHZgg0Rx/aJBO1YZW1XxvGAgPet8g5U2DYdTN56+ZktHYTm9oFW/
He+MPosRJfsRkCARXjgzit6ZNnWzrUScl6de3aAwDJ5AEfU07S6kJDdtFG4n
IenipkLv1k7IeN1Nv/CViKCZapZARAseXSMdVsnrwZ1Kk1+ya2KQI9vo7diY
h7TNJRfsOBzMfaRd7VuPHcYMDh1cs4WMxh/8q8fEOJ7v9IvfwZoJlTzDOs1q
Erxc5b/IW/bideWNc+WUEShZ8FxM8vsMXx7+fyO2UxDfu0rwqfMYArknxUg7
muA5e7TozTgZXrfmb3LN90BZ7NDZrjhOr1jUbv2eMQk+E4PDJna9EHHP/DQp
S4WZjYyl73EKLru+TnP704TVbl1zF+JKUZPuxPvhSz+QRE6Z4ifjucVn6hmh
cszKnOfTUmGD9sDhKNT7cfNipj1hlo3Ei9+IlOYB1A1Y9Ozg9HehC7lbz2QS
2wJDE89VkBFcJ90cNM2EwbkOow9NYZB37Ou1pTAh90vfQW1VNdJrH/GEcY7H
fY8sO4PaB3PNq7ttaeM44ehmNG3dAGuTpKkkRxbi8lQ/qfCGQLs62dO3hA5L
mpJlxnYirr4467LKiQpRG/aiC4mB3oE+PrfBUcipXSqrXs9ECfGmW64dCbs1
Y38eTGTia4aN9pa7hWhmRZ0mCzMRTRK9tO5UI7witGdujdDx3OqddAShB7eK
BFQPZ7Qjdbww4JZKB7DRRYN3JR07bCmO6UKDkOcNWbicWojEZGbV5idEzP/t
fG+8exSJ1iFbbklMoeflhiTt3wwcvXBywIrjFc6KS0MrcodxNZXh18XJ7W6F
HEfVvD6MdCwY3eFwRoykgPVrOyIIzlwbdzJH8CJTYDErZATqhMNJV7nb4TRg
6aTTRsL0xtjjw5f78PT+xJGZLCJcnqpwxa5IwLSqmCfzBxXJ9/7och0KwZst
xQdzcjsxfirXrqBzEtkykacmpxjYJ/y+uT6dhMepqffVttRjympnm9erFjw2
tJyxyRiCe8Ji9j1fGvwufRvn2doJbu03g4ctOHOwKdcn7wUbsgsCu99J0zEi
4HKQrMCElKOna8f3SaSNnf/PfM0w7OzElVeY9eP4Y+Z9ocZh8HozUyTZBBhv
Vo4kH57CsbO1eZE7AyGvI+AklMVAWMK3vieLozjcNJqfvyMLvDeUpp+1sWF5
4gCp8AoJdF/JX0spnJws/HlK5U4N0n01tA058/dJwS+wJ2oQtyg5roUfRuGw
vK738ksqLkbGPD4ZzOHg4pxrURsqkB7Xe3cPh3O42AKaETyT2B0bdD7zPhWJ
9gX+Ahea4Zk4rnedNwN6/3o4Jt2F7naea8YPeuEdN/fwOadn30Te/O8AFxFf
Om6JrgzmcKaV5y2Fqz24foX6w/QvHeZFVv0+exLRJSbDEuYbwpn0bY6ni3tA
lbLYful8B0Ica7N+pPbgYYXC+QXDdmgHMDbblXDm+Q/zVKkeHdvOrwrd5k3H
sesdrdIpBMwTAzXv6nHOz9uVpS9ARVLaITP34++h+qj8jW/8JHq1co1elZNB
Nd71Pub3GCgOJO3PBSxIEZLTNS+MoL/+3pXkTV2Y9Ai7aniBispcXul+6yFo
eOxqiOL4/Mn0R39Uh1nwUvx2/9dFOvR3zPtOWPZjwG79JSFDIiT6iMVb/5EQ
IvbP+HzqOH5u9x2In4vDyX0sw/0Gneg+PRMXrUbBT0kBIV8DKgS2aVxyvFgH
Sn7cyAPXSWSmGHIROFy3WmgipqHlJa66ObolJ1Uj6RzFkDDAxvLVs/FMfTKI
FotX72oSUB/K1FasasCHAX+uogNEyJ57M6fwsQfz47eX8f+dxAbv+eM38yeh
d8ny6Fb9cUQzYpfnjfXh4deMD8LJTDTPzrMHeAagq+PY9OJLJBQjrasrOPsg
U8rULmyhB+su1wlSOH1rWEX+z6qDisnKwel5zxxMPIzarRZPAp+3Vt8F5Ro8
XQOTf7psuC1v254RRkNQ74Zlq2+QsC1XXNlL8Amayo24xezYWDdhOsS7qQbe
12LEt8fl48/gfLnJNxosWoO5az2HwerevJBoP4UnG0zPyCt2Q2lxtVrAjUgQ
311vOMemQ7nEczpswwjep3OL/B3ux5tubi9/ezLuFS4nnfo5Bauyyzl8IROQ
OcMjxM+XgD/6akv/pXTiST77bMuKAqy/1/+BQSFha8o1feK7IUyKH9ojJVqO
3jtzZoPOpfC6s/r5sfNT+PMvIvme5RQeKdUmc20p43CF4O6Z2xVYaamw/MUK
Dq8Fe66ovkJFQl/Z5Iob3Qg/WXTGWHACwh+2ruzy5fSLUHqN8YtBdB8pI/Pf
70RhhomzAMdX5h4mi/Ct6UemeXzh1EwozOqums8VkXF5xii88QAb6+25+n8/
oKCL9ebNv+tsdB6168hu7sWpfyo/v29gYGl94MZu10Sc2do74PuOiGLdQseT
Ti1I3nAtTkhjEn1fncUx3Qwtkf/275amYrVlupYHqQiDlL6rhjQSHqmzay4r
cTjQI3Pv7U42/IiHbZhaNCBKVPAfx0MNUnpKXROpePpioObQu3HEnup9ZSZM
gKzPUpqVSwnyqMtMZ0/3Yd85Hms3jgcfd3YQeWRCR8P3EJr3rwo0LzgbvTw8
gavGLnT3u+NIqnIylWaMYWjhssCd3nY0T+kLP0sjw2/n3sM7d4ThfPgXKQ/5
DpxgNN8WlSYg7YXVl7PEQQRoE6rjdLqwgWsqVvN+Ne6vmFlRDQaof0976SrT
4cVJbmJyFx4eW23eGNYHmbv9P2ssWHjt43XV2a8YFyUnplXUqdhktO/rv2w6
4p4KX+svnELOyPdQPRYV/uYe6wd/1sA8ZzaVIumOJ3ZZt3OOTcBHTGzlId8U
NLjc/rh/Cwlcv3+RHW4TsGZaIGdF3BD+Yx3RLd08iOzjBe5Kp8fxKC3o7Mi+
Nmj4Fs2ZJTFRm0/pKwxjo39/0Nk61Q4UGV48I+WdA7cH5mv3h8XDke2glPSy
Anvs3079rGfhlg/l2RJpAk/4H7Ops3loPZd2SrcrFAaXfQeHxFqhfTCvatl+
Dp+bpKiv9mzHwa3P273LOxDUw/eB2zAT9obc8o97pxCiJHlcZ8U4qpJlIhs/
NaNrpiQ7ijoCZqloAIPajbO/LPz2t5Xj3bd0l02iUzhcHHc5LI3T91+0M+bU
c6BR9iIjWLoRrX/qEwxfTuFcrEmG0noyuN8uaQ1yOIUYc5ux8nU12MdljFni
E9gp11V94jQFp38fzMyR6oSush5tz/qviOr+23f5EgUf029EbHUaQkpQzd7s
uiGoDeiZEEZoWB/gylHcfhwsGM4VvsfxEusbVHN+EuK9au1PXm/DVZveHQ9k
apB5a/3LojIG2nZGH6cc6EChXF63tFgJ3Lp8A9Zf68WCQ9x9eYnbOGDzKa61
ug51OXkXbm5l4hfLSXx/GgF3lov87ebth9TFyMd3aXVoXRt5+fM8FbyZl2vV
fKYg0PNfQXzxBOL7tN84Uxlwc3t2paCXgoAHVwu+UavxdmFT78G/HZxt0Tt2
duUoTqbu+NM/T8e14A//RusmIRsV7u+rycTTT96eKrN0hK9mDZ2RIGPF7Jfc
E04kXGJ7dKgbB4LPR5lWb0IC9y6DqFdOBHgIZw/bfWoH2SX+7FE5Pzhdi3eR
6RvEsYeRl3beIUFn+3CLTxQVrR+FTGttyOi9n+bLrm7Bw1vLll5b0qH5wHOl
lhCHy6qGknYUMBHJq1LqsKkH8Y/2R8tcrsVEoOLWG0NU/K7pKOXl5IrLswNs
YXc6zt/oNyEd6cLbf2EirpvYaN2ltN/emoq1ffFmI/5s8O127kxyoGDlhl91
9nJ90KMkicdTJrD8Q/+fvRweEVsVUR3xqwpLxKVUbtVC6J33wIzVBDREQ4+5
1LHQFOwxyhNKxHiJhw71fB/u791Wx3ySgZYKeeMTnJy8dsBjzFV+AtokWzUd
iRFIFRk0qs6XY8FJfJYvdABPrywo5X4koGJstcdZjod+uehJ3bhiDC6NI3wP
ThNxJFx158bpJhwlPrSq56zPch6/k4EbJ/F0WinOP5eIqmUbckVeEWH+lSYg
vKUfhCn141mt0aiLkolk8NfCdrFrNXX1AGj5SVJbPDuQHV9QT3fpQYlCbSKb
3YjvFrfjWfQpvFkUoG8RYyJevXe9X2AHat6tFH/cNArtcatteb8rUbgl5T1B
ZAR76/X0x2QqsedqRMK7hmyIj4/550mRIZraVLWnnwrl1YG30ldSMFEu9Lbm
EhGxtlHrJi4OAk/upqfsd8RRXu7t22cYeNoySjocwYZ/IS72x9Oh8JN6oUuG
4yETYr8V6+lYLiVYXCg8hUS7lI8NJ0ZhL7vb3r+lFwqbKgVVVxHR+XG8o5Qz
X2TdaanZw2Q8VuCJvhE4jEJy2tYp53Y4P51ddyC/DNEKCqUC7FGY+Mi5o4iN
0OXrimlxJUhXyG5VHomDotLRtnYOzyy5vl59w6cNBx4SU7Ybc67Tqx7JdXwE
lM60+hddHMYDfYFUYlYriF+Z+T/yiPiaPYv+hwTolCfY8r4ah6ykqCjlJQkG
Ta1lZWwKMv3HX2+/MoEByYBLvFxFGBXZWK6s1I5QwoHUdZ+rwMxd8p/h+N2+
eyWr9PVGoTSzwv9BJw0NNYc/r0tk4OFeCWvD5WycDj8tFZ3FxpD54Kp9W6Zg
y5ttdnF6EqaUw1VvYpnQf/ef4anXFQj3fH5686FxFEa4S7j5dONFbflx5oEh
KE3t9ps+MgHXianconU9eBHR06frNwnf9Ps3PsswcVTnd5F1RgmEdI3K7Hmp
kHmrVO75KxtPHUUfcl9qwpzxufNXn7pBy+1LaW73CJaE/1jx5zHxG/9pbRgo
Rc/j1sloWSKstc+1M7dQYHLwFIPB/sLp7RDKbtMq+Pd6VC17TsR78sO6smV0
uISLtxsfaUeBeXn/po5mTI//HLyuMIhfeVNcl0M7YLqk1WfRw8T33LYrrRye
OuFxaUyFMIHCSZe486dYiPAeWbwnWgPTVWZz+60ZMLnWVactQ8K722Efzy81
Y53fG5UzJ3PgQRvdlhFOwfcj8cau3eNY0u91t9Pn+CxpgMasqYJnhcFPn3Ii
cm+92N7nmwyHk+bZ2owCmMsFXqNsKgPzNemxe9sAfNk66cP7CZg5ozoa/Lwd
LX1RJ9pq6RCPXMH3u6UWYd+/rbAoycey+r0Pxa3ZsOjXs7rzg4lMIqnvhmI/
vjBXVo0/7Me9X75eWmnReGMzYqWZPAla+xbaku4YnoVmhkry0xB1+tU4F52G
SpKVWwXXBFj/Uvvb13Ly2l36r894PaTXlBXGGSZhyWJ2zWkBIpodkps9PrYj
+kHjoS2oxKZJsbhlhiyQvTxLg64OwtrRNM31Dh3DKeNitBtkbK1elqu0bQJx
D6K3/TEjIrErymL5Vwrq5deOqpwlYuvfvjObOb6k/F47470NCV9qbizGKnSB
OCT+U/pENTpF97uou1KQt8Na43zTFK7+kfTqZNOwSiWjRntlPxR7UyPwno4u
9tpfu3dX4eGC7VcuEhtc3w/5r5Orgx9lmXrOEg2z7WuzThSQsLJUoqnkAxUv
ViffH/kWA8dFYnh2Ah3r9+08T5NvxEeN0u3HDjBgT3v0KCl3AB6UNyFzirUY
2777iOsuCsqKHjdP8TRiujZlQDiYjiCHjaptlSPQ8fJ0SmQlQ9zH6tDkJAML
/pLXLryagJ34oNjuWzQUxEQJOfk1QdLv5KW0+jywyCG/Lix247Sm/KuJJo4X
3JM+kdqeidwsn9rIzHwMDfwx8m+tRLGU6WqvW6VYlZ+ZGlMxjMjMG1dT//Vi
Pl18aX9VEZ63vtP8fbYdyzSw7rp+Gx7JknYcCBuFpITc2Q2fJtD78NzCTFk2
orLua/VljnM4L7mgOKQDCsauD+dXc47/+w2JkFwS/koHVjM43qh7uEOXUdOH
zr1PTyWKVWJbu9vyx/pT2Pbq4r8w1W7Ub1D7W97VgZI+gZDlq6fQ42bo6vWW
gb17PZiPVrXjUON/Qgd06nBGIqj8uj4FYhJyMCqZhMBRS3GzGBqOh302sNWb
gjlfevn8MBHEAmLoMKeHAu4NRaxrJWLtamP/wnUc/p56aU8FHWuFf2QXcQ2D
nf1Y98h2Nr4zS6/MDX2F+5r6ZW5zDngWLlxwWnMKVKGKLe+VhrH5xKNKT8MJ
EGti50+m02HUFJTb84vN8ffSu5PUMtx59tlTd2QQh8aPb92tlwxJuc6vRsZF
6Dj8S6iGwxvvxLj/PrRsRUEot0ZdZD9azoqySBx/Xs06kzqXnIVW4+rWRp9B
2FRcJkw9mYK7hdw1IaEpKH5IM9T1IGD1maRFtfmvUOjruMd9kI2l4nu8j/b2
Q4OosmqrBcfLhY2m4s+pYtuZ9muCiyzwnQhv+N5AxNOswfGntoUQERgmL7vS
hZ7VJtKOnMdf7VZt2tZDxH2fmEcdFzl53CK2z1CVAVvF5/+1f0yG8Z2Igsiu
YRRlO7Tcri+E0gqxRy+iyFCpfX87yYiCQw+X7WOPlsDU965Gr/IXqJqyxUys
WlDLo/GqdGIKr07v2RCo3YW4Snu+ay8IyCsT+aJiXY0P8tYiRd/oqKge4/3/
fc13iKrcJzeyIRsc17z5djUcJiKL43MZeMD91l4tsA9C3kR3myo6Sk2K1Nwe
0KF295lB3z0aeNeoSrtN05D679iW2McMjPtFbJRXZGNv5/BlzVKO92YMfbTY
xPn9RL+SEGEaDDcsnr61owcPbxz1Win1Daf25oVdO9IG6JgbTQlOYspZaLQ5
tgCRooLFb+da0LFbZHTdHhbMDpQeOXy7Feylom9ewizs+iaddOFdHyjqWiuL
/INgdeXu+6C1HZAKD1rGu4wGhQnafq49ozAizISPNJGhrhbtkeA2gHvH+8pc
OOfb7+uqlpRCgV5vwRPD/ik8kwhO3X+RALcM5bRLt1jIKIphXGcyMf83ROv0
p1HcfM7DDjlKRf/u4tXRHSRUZpgslHjSkdxh/28fdyskZCLep0mysWD7+8Gq
TwSEJRr4DK0h49C2VVXPv3XC41PqGXFvDh/aHSt0ejMOgc9uj8xftmOzQfBG
Z68OxJCnf6etHgV1KLnA/g0N34daIg/K03Cg6fKDW79J8Ag83bBVIAuun7p+
z/+go9za4s+ltcUY/RX6Z5UEDcWZ7326vhPxl/lRKz6Aiehz8Y1purWoYYQn
NsV24dqRwE8q+VM47Vfgtsq5CxdqQlmDm7tRvt45rt0nC6r8Myv93tGxV5fU
vcB5PX7lmanAZRO4ni17cGRuEp2lElx5UuWwvhNiMW/TiDW9d8yKXIbQtWpc
+vMBAkydLlR94KHA4s9MxZoDgxDyv7MpOYiMqGN+xar/MXAgRcoruHIcOTf2
3Fu7h4hFtS3ZOzYQsel09PrPFfn4dmHp69KRMBQ89hMx+0CC9LWhV5O/e3Hz
Ujyz5RQNpmsXXDaY1UNO3zSjKr0LQ6Vro62EE2AeMNt/8NcECiw3ZTJWc+bK
uHW5WQ4BlZIGpTRiL9YMN8Zd+ctElDDvjZ2sBsQuv9jetr8bw7t/y275ysTD
+I456+Ah1NQ/6f5hS8T2N/Ie4/8Y8N0vrTio2okP743LHAOICN6urXk9m4WO
s2vVUjP60HDF6Y42/yQSQ5v/+H8fhphkidbncSYysux4rdUnYaG743SW+ACe
/Slb73CAAt6bpYytDVQcFPC5Kto9DL/8ka+xx3qx1qJB6fRxFi7q3Zc+4zmI
lLQ5mcRsJsw0q56PpLHxxjUGZEdXLAtombbc2QQjuTaN8ggSUo9GD99pzkBT
oZDQEftxqIS77k26SIFqYlTRCKcXqr0PHzYancTn+Dt5FnMRSHA6OKrJ+Xni
yiNH1vv0wCRyxRYHiTDc6tczfPpoHF7GtoGphZOQ6pD8EMKZz1qfxLQsNTKY
I+/O/lZl4oPu0ge9A5+xb5ddlJRFOf7dfJpUfqITxKdNG779Y8FEl1vgURoJ
Lx98nHkT0gDFZkYO72QnxijNrlXFLBT079id2DCAlewPf8QbxnFkzddDP4db
sPfKwz7ht/3YedF/SiaYisbTM8dPyDIQ/ICZUas4glK+ednogl6cfuTgzVX8
GbOVRjEqd4n4xO20LsN/CM7yCSXXmJMg/micMbNtR8ePw/yxBBZWz7wf2OVB
Q6DORps7mXRk/M4xfL2bk4t7+2NFaqfgdXL4zcm7BGQMnTb9+pXB4QOZWkXO
uprxP7n3300yap6HJKyoaUL7zPNx5i9Of6+432w70gg25WuL++MkkMMLRHkd
2ChurLS9lUmEJFEo8O7ZUVy+HpKnl1EDEUpltQSRAJtN216rX2jAPuXr9nEm
w/gs6OMVuoKMayKSjIuN+Sjdh9N3mwcRHrCb16m5Di07rzjNSFHgPjxcp7mr
C21n+Pe15hBRJCVq6ZzEwso/Tv2DN6ZQIL1xjCBHww6r2kZRzr4zYJPOhYr0
wiNrf7XbvzqcPS93OFJlHDq2WpP71lMx3ne9rsigAnz/VQnsiq7AnYwnwmEV
49BM31172LEG92q0pIsVKUif1ez99peFmNi/ym4r05EzUSlwjI8NtSjb7Dj+
Zuyodgo5xOjBkpns5n0cT72iE/NgTRwR7zTUSqJ5onCizLx1VzsFRfOqWasO
U+C58gNU2WyOV5byXlf6BpWaqZlz1hwPa5Pp2rOKgQ6lSNrx3h5UTdRsczGi
Iqx/9E2iNQXPVi6qbAjtgojUa5/vQyQ0KrCkA7g5HrQm3XUHx9OudHu7sdZQ
sW765+HTf4Zhahm1rLuDiaRNpsmWfOPgWzOsaCtDQazUA8Fm0ig2Vb0Otmid
wJ3aAIdT+s3gj8ncdtZ0Ai9OBEcMNTMxVZpxT7yUs45PVALkThGxJU45ZJYU
jV8qiyaRI0w4Eubi9QxI2JamGzbeTcHxB5JG1z9Ww+eL/KTLz3EU/Fb07lmk
46G4jYnburd4b6A572dExxPH5Kv+m9kYCfSo9PrVgSvvPKQP549iae2fxpfK
FaBzfVWzCiVgS9HJinHdXrzKvTmVrsvE/Z/VL/U48+T7I/6eqX007MPEWlYY
k0F7U+x9TWUCe3oVpcbLObxv8l+bXk8h/Ice3p0IZ0FTk4dV1V+FXtnSougg
KmJLE6blftVg9yzzheTbXrAab1ZGaIzCQ9dGyttqHNt1ivW8vTi5vNzLzN53
FHQJp5C9DiP4MS8j/3cjFSldG34vPCUhg8hzdkixAU21f3J/32Tjq41V4dXq
caz0W1Hl1J0LwuD1x7y76Dj5qv3OlVeZoJF0mr25SuAqYyb2USEFX7i4Av/s
aULZ5qKXg0l9SNHKTPxc2gO+I0vU6xy/+NYQ7aRgwuFL0mOhHw5NcP0T+jFV
i4TbZ4RSLg9Nova+sas7jYErm+TID0qoEMf7O/t4IrCJaGokcaIB/e0yYe9O
DaGcZ0jh27JOCNye9tYM60LorjPXmofHwVWuy9A2aoGsHaWy7HgXrqj4ejes
4vT5pYlY1eUEINliU8SdfhxKu31ZT7UVA8e5N340J+EWYemU2edhjF3qfn8s
qgasHQtdewrpWKl4xTFwYwfOP+GyTWSOYTQjZvcRZSYkEj77WQ6RwSO2QSpC
lYKqx3R/121UzLtdDJKWe4Om4CfJi9uZ4HvG+OpgQobL86D/8hsJSB05aDSR
Ng7LDbwbY7eTscKd0pcs1gOK3vlhOodDDK5yVCGjFykpu255/u1Gmsddgrc7
CSI8jQ+v9w3Bx9Ci+6QUGxp6LSP2z/MQ3XX2duv0A4xsuCv4IoKN7hMzD2eK
abCQ+SO2vbsZugp5AinvqHj0tT5L5/wYZoMvni19xYADaUdBuNE4bgcpXLMr
z8KvCftze7wmMaq9Kpqf400ZOmnrPqtQ8Fr16dO9c0PoyQlF8WIr7hISAy+s
6oIy+XVj5FgUpgeUHs7eKsIORaV7K2K64FGZbfFOjoWHk0LNOZETkEyoHLzb
NIbXm5X+dlHoWLiv+UFnJRsTx0wy3TNJeCH075iz/xjieTqoBucYCP2o98lc
ugYhZiod/2b78XDwzDrBg5MYMRgQvXlmALd2rSw94t+BzjanDJLEFHbWR+3k
HaJgoXq62nMrGbGes89FZTnevUzj9ebQKrgmfImpcmoDX4aIxcHsfvz7ohR1
xDsff9dpSFzTKIWHsptVfXMFMucC+bJPZuPu6XopzeAqjGftypS9OAiBhTJ5
F18yWqK+C67xboTD58/NfLZ18N6Wu2e9PQ3nKrhVlm2pQviZXuWerG6s2q/r
sPVuEFzaFZx3/B5Ag+zPZYZSAxiz++dXmMPEWXYrw6eJiocfw9anDo6jSrtv
JD5vAvV3hd6ZHu0CQz/hxqJlL94rvBtpnuTwyplRmmXmCK5fXRQU1mAiNc3I
bv+5dvSmnnh/2LAbr5LDv61s7Ia5qHfwy4IpTEr3Bkr/K8CfF/4/33AzoTjI
n/qmj4KZ6QvryjaT8Xn7JmjcZsKWr+lK+tVijNG0PlVz+EznSx0x0aELuyPU
nm5tY2D/73K+Cb8J0HR0nt7+W4HAzMaqg+v78fxb7dYD66qxZsVBYltUCR6t
/e1E8hvCbtmeUrWr3zDJ9bnXt4UG27Mmvl1lFOjf5m9UYbMgsteGTy2uGhtl
f4jMJnJyl/zM7fGePgj64vsRLzKOXY0djRjrRnKTVcetzmFITul/uSc+AlKW
4slvWSwk/8d9a73RBI6cjUlirSDi1J6YNS9W92J1UIP2iPoQeLqOE2yODGBD
6m2lniNkPA0L+N1nQ4bglIRgKodf5Pdo1Em8CcLdf8QbgeajyPrPYvFTBQGd
DwXP3zGmo8fyxmz+Xk6uLl4aKDTj8NUPfutGLjqc1658udeSgVaJV9PmS5Oo
CFw3LcUqwa1/8caSw6NIWNx+ovJ1G25M3lh1eMcITK1SeoL1KKCc2BBXVBQO
/lDZUAeTTrgXykl6K03ia4B45julCjjN9vbtGKDgFffXuAu+dKyKFjH7crgP
ovZxM21CBASX3yU7HYqH/bov4faW43jvEn/uOn8vZLb7504qRMBg5zAhKYqA
+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
nDC2HYeqXNpjegORUxwZl8SV5Qguu55r100F48CbyRF9Bqiteu5pHA7EnxhQ
3I5XwdW4fWH9eyaCeuX3Jhyfxf0yn+WDRL6GHdpzqDSYiWdz2+6a9rYg980H
YSG5JLwOoHZkYhpaiX+zvcqpiPK6sPaC6RQUNL9YfPVvg/LpcprIvwlcDL6y
qnR8FCuyrj82Ui/ChcI6U2XinDIX/3lu0leP8zy9Y9/tOXhOU65Z4lMPk5xQ
s81jI2hnz4wnP2Yh1y5yjxSFhcmFdfdfRpCguXWLwQEZOqa3pF75nToD2U/z
N4510nA9zyAwaJiBCqO5DU+H6Hj+7NnDiK4mvAhsOxKhy4Hxfg2ZfILboh66
5Z+epCGo8b7sN+Yg8joSpfeLdaOycnKlCTEvl7lfVCn2I7zig33y7DU20qTX
LzuSMA3fZfnWx+RnkBrIaZZ5RcGRkte3Rv/RoSuts0v3IAfrTKUVdNpoYJcm
37XoqoN7y4cXqm4ctC0p5mzPL8O43q7Xz3/XwWujcE6NJHEuTy3JvK9zwFhy
Q6hCaBRBWvf0NVtG4FMpoqZP+MMWrdlW8bgZDPly9UxBwjU3fx53dTYuluww
D68sQNknS49jWpPgsfQbm+jqQNHbpC+SV7hgLnx1i3s6BeV0/aeFClN4T1tp
+X3PCKq3Xk9vW1mGCL13yQc6XuLX7OvNQwqE/yUF/nOonIRWWly33MwImo+P
L7GumUHINnZA4icu5iTWLZEQGUbforv+o1e6sMU3y+b7xWEs9hk4ZTPHRnC4
yfw73lnInfv3vK2byDv/as99/+eBSK9IQeob2EjUXax4MI7Cz/7PrR9zsV1P
nAlpCh4MHzJJLCejjLSU80KtDf8Wtrif2uwJdf0dtzJDuTBR/FzCesTFKb7D
xgoERzckfhGxp7Ax3yHdpxLDQekay5bw9YUIcP2S8GV3H/RjDS0Shycgud9p
rlwiF270nwXJ0hVolL1iOB3BAUv2We79wTa80vbYckGSBvn7UvxWVS1Qfy5u
qhrGxbb+9mS5piFU5/8s+h4Ug8SkIMoZ3XrIrLt+pOTRJCq/tbtefTOK9t+y
YZOLxnEh0pF5MHaKWP/zMWePbtReFdr4n/UojJ36noazJ7Ha2nvvCT4aNovf
zhK+P45NG9f+WtdGgsKlYzdX2lFQukEh/ghRRwcvrN50NKMGHj/YEzFzb/Cb
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
YKJJdktK1wCisS9kkeQ4on6/2yRhRMbCaTFy7pJZPJQ5spnlXIcDU3aLvv4t
wOJAaorU82poOq55mbJrBKcz70YVS1ExeGal5eF4DspC5T74W7bASXX/rOOr
MTD7YuUKE9JxzobH88aNCeTtZsxFzr/HNpWdon5GrVir+WxYZdUgWh/VPucQ
c3nyneXnpKAhlDw5YXRCgYK7Bswt9bWt+Jfy15wZR4EdJUGvYKgcfJtYwVNL
CM55K/sh+eEMBgRjdF5KVKE8xX7XLyMKBGt70pR42Fh1Kd5d1o2OL9ahIrG3
s3BjUf9Scsco2jdHv2vuGUfNeBGPv1UBJvdnjpVoVGH/zXtWmlrtsDy2wCfO
Hw2V9uz82APPobd55yfFfipGSULk2/U1cLm4zaq7joVzFVVVggY0ML0ObNqh
WQLdLWJVkW5MNB07rSJo1wF/c6EvuwvG4Md2arc2JWH+Pq/3zV4qLK8MLz+y
fRiRf85V3eii4HGfwM3p6CH8Wv3D8Lf8e7z5tmHSKZqEu/FNJ0zs2Pj2MK4/
XrsfgRfe1618SeSMFv919eQsNI7mXyWJTUNg4n6Ht24LuPwZVj7PR1CxRcBT
USIFtr4yNYd1WDg0fEMpu5yMe2JbZz6pdCNEmb1H4ADh1f8klj8drsSt2C0y
bRnj+OVyu8hkFwmfD2/75P9+Flg7/nDTKxqO2qZrL73PxQLd++jQ2RloBR08
SN4yhQf1TC3ZiGL855UqKHqIgsolw3Nn+pj4HD7XVOP6HnVLeiimFc34UnHe
e4tVB9jhT6rkhqswk11/KNQtAb0GfGuYeUPI8PdKfWWcjLokE94VLDpOfczd
mdI9ixVyE8cOikwhoOIuyzdqAgI77m44S+RGfm6BbVIgE5u65kKX7Z2AwiK+
nIP/hSM0U2dwVJKLao+IZMkuJjpOJpazrrPgYB1G+rXiHexE3RrE9xbjR75Z
yq/yBmxW3TKn/ZqOlPstO72vTuLFHZau+VQvFgYKbu1dWQrOB9c7nw+QkCmz
cZau0QUDF/XOe5wGLL6sMRPxNR/rEvSip6Y+wcn5tNI29za8/L5AyXg9DsfH
vbGBlwrhPRMqr91MwrM7sWdaeok52syO//M6Cj8ernKS6urFE2XBC1yRbMQ4
0q5/OceAIL3d9fzOQnw8eTv6yzoylC/QT2bd6EJH/tjgViInlH5nX9NLmsXt
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
3hgy1G/mnNweC9t5i79Bu5rApboZ0ccr8UfTfkORSB6x30NuMR+GcL/j+get
yVbEN8icb7HtgvnmNSzyySE80ElblzDCQfn7MbL232aobUHpOUsK5IZvNsav
pMHPUXvvrykOjq4Pyx1wqUea9tzu7g3jsJf9q35UthZSvnlnE1O6cFMz3ev7
/kr8mo+6q/KFCrm7SplHdUhgmxV3Fpf1Iuft2+tC++jYn5OnMiLLQjPPzrvr
/7EIbr8h1j3fjdNOLTdc1cnQd2ZJaR+hQeXMZm09bSak9Ro7pVJY2Du9ed+7
m20Y4y7oTtTrA3+UQUCMSA/ecEmV32tkg7qs/I5OWSLKeyW3sU3pcGSn3P7s
R4H0m7GHAf0c9PFpFfGTmYj8LfwmPzkTIib9XRkeQwg7s7IjZzkFJXuDT1oI
jkNr//rJ9sle0JOrC7l8OMSefnp7MrwFK18x6HqtbPSzOg7xHSfhiyxf35he
MrSLpwZciL446raLmUBw+Et/2tY2XgaKVrwWKtvSDLF7CivMvCZhP6WW/EO0
FBZcor4Lnb24dOtguSPRfyFRgWeWsz9hwtXSpWt3LmjJrsLPJAnflr+g2PWj
CW0VikJmb/MgGFzXlC/6DV28R2S8aWT8dUodPuVHR8Sk1vDm+CEYU99Hvc4l
g/yWO9HwazXWFY/L2y5jomyuRux3ahP2mZSknaYSvOXNPh0oRsWvDcdpl4n+
n+RZduzdqm7YmPiPa21sxsFf3Bp5a1hY2cMZLdIgo4Q/33ClaA8s33XLP5Av
hs7EDOWqyQgSznyUPeFBRaNYUtHFwg5EdwmPJ2VFIa9p1fC7RxPQTJfOOOg2
CJX2givJsk34+HDB4MMvOir+e+Btvb8D8Tec/hzMpaK8RGhblxYdD+84Ziqu
bMY75z/WZ2rKEFxwt5NF7K/QQrxC1GoyZI/Gzn86NYbIEtkrsqrDSP6neWnN
OyJHmd6sddJ1EHn4M1B7Sy94aHwP7VaOIaRuN1/tklHoelT27LvLxLL+sq9i
Z9twKOihv6RYMdgXn9Jdg1k4fvHaXHA8CZZipQnDjd/Q8mxtw9ylb0iSmZeJ
/jiIqPP+Xw9u74DNf451CT+H0E6umjmqzUGOpIRoQDwdfLdUs01Pk7E13HFE
nNqCj4E1IyVELymfi9v/ksWC8oLUuUQVf2yx0C16dYqCL1Yu1idGuvC86vYx
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
Czl4eOvF4+9OROi87lXy3nAfuw/m1MgpZyNn/bb1a+/yUL/l6NMy3XqsmFpq
KfSMhcWdfTaffGkImGi9Zr1kHOxR/lGiYH4CNykcjhDqRsjOwoM/fpYALylv
GK+LEdIpe8jrYCLagz8nRCwmYMeNjseVNj34NVR87KcND8buB8IzfjJQ+9Ny
TeFYH3zO1FnNpbKg3TCza0aIhmNnuh+2MTno/JNoWiHXgQXfX7otFPqED++v
JllMj+Ovpkj4e49htL5ZMVfQ2oan7vb5Z4t88D30SJCO5wQSUlwqG9s60ci5
ftq2WJA/ehU7/C/3oHJNZqyOVR76qVoVXjuZ2KBw1PDgWCXiYjlzfn1N6DTR
mG225OP0rNm6aGMGDiUblCsMMNFxJXb/5y8cjPiL7bJ6noRFj2ViqOZ8FBlp
XnjUOYK6IN/Z2X85UD+zZlWJgO/XfDisUmydh5cv+n3tg5pRbKql/nmOj2+L
ZZkhi+nQfVarU5dLhdfsdeLl7XwMx3V7nOoW6M3cs6sXj6VhMkS+turZAFYt
Kck/aErBwgwdkdj1NISMOps7KPPxhnj63RXZcQzpK1ils0agLRaxmnlyDIWR
KpaxgvsYk4TCh9pZyJlncG33SypM1+Wa7h2jYEwmPbGqlwf9U7SZ735snL72
cSpX4Cs/l45f9/5Mgt7VDeLUQUH+W/fqK1FMwKfTXg4WT/jQKUlBoeD66QvC
2+y7OZi3yrXW1aMaR15VCJFKw3FhY2/7BS4JFhMqdRLabHypOn5ScyUDnSOx
cfbbRnDW50l9dwcLHYsbrxWLC3w4bPijZkctbh0vSbJ5zUcQ8aVv+ck+SPsl
Sm8+wkH+As5RhiEBz6IpZ08s6sNkTyIr1YABDYep2+fduNjiLG/512IUQ3nS
HRMHakFWpFPaNrWDRn7bJSTwDbG46xryiRPYTNK1eEyvQ/GK1Rr/NdGgI/ni
lt6dQbSvehYmrEPG4UWaFhSjWpgUfEu192iE0Ydkv+VBZCwyPaHRLJgPpVjh
ZsMKGujcU4bhUn24/WpYxPzqBIjuFpF/tKjINDBSmZSlIy/U5tJFgX45b8bk
jm1MLBmqHBDbQUDNXN632N0DEOmYmvnu3g6VxhOezZVsXC87eVjEjY10IxOp
Izva8KuJNX/hAyfs7/NfelyVggdPfeVT0Yhl/StDnB/lQLGQ/Ew6phu2KgXq
L3Lq8WSNfuBElKCvCZ7DedpcTF5NEv3oUgajd0tPy7DGEVXzW3fdWTbeS5Xr
pi5sRovPsoqcswx0LNxp2HCbh2qTp8SAx6345a/f/u0LEVL8T+bHbzOQffez
s71ePTJoukZSolyMcIxdAy1KYan1ve8hiYR76notCYLzLchzSppcmY5PKvtc
5AU+8/DUVNf8dhKWHVUaDhLkwMGFUvM3d7HRscJr5gaXCWbvQqmBNe3w/ukv
ZvebjFVNR5fNCrchwEdo3ecsDr7K7Yuef7YKyuYeZYdX8uDmmOFnUCPI/x7R
IhbbaRhXuNee5N4PW5PDN27F8iHhUSu+eroG51oKw90UWzCk8DhmodY4eFdN
pamHWbjQ+5Ge87kdE2nyaTZfy6Cwp3+kvicXGeZZuyWzSbip1PPZS+sLdqoU
7d/5tw0/n6YyvR+S8WZViPUTAyYehJWc8bhFgJ/3tyw1xWH80zFpnBMjIO+8
qhL5QBsWP3awrh8vgvYxv/LB/38Hdr74729FIxY/2Luee6sbRsl73c3X0cHs
oefeK2ChM1TSeucBFsy4uQdmzHug1yDMPOlAwSoF/8dpnHEMP1svkTLdAp9V
Kxft6CJi8M1uh0aBTxO2WZ4JcCeh+d+nrXUPaiCWb9MRWMKD5ronf6UDahBd
0ykzQeyCP/PoBi2JceSHmwxn1tYj/IiBafs5Fh5+4BUM2rPxM1rDz2d9N3TC
v6jmbeQh3OPgB4sLdLysY03NfSeg7a40a+xXMQ7VbX9VLuDTs1F580zuBKFZ
dt2jmQdj6D5ldVy6vQtKL1IXBAv8c3KF8Cun/mGYX11T2DXAxtatx35vf5WF
wWOtAemCvtsVH55zY5VAKNi/4AOhD0K1Rb1q+ly0PL6RrSLFxaFdtRsaX/JQ
Mi/FdVF/Hpbl0V255whw4L06gBQ62gvZh8b5VfhIi7eX9WrFyyXXHxUpJuN/
BVw1Ig==
      "]]}, {}}},
  AspectRatio->1,
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{0, 1}, {0., 0.9999999707837952}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6190671524806843`*^9, 3.619067175597309*^9}, 
   3.619119208905472*^9, 
   3.619119775576818*^9},ImageCache->GraphicsData["CompressedBitmap", "\<\
eJzMvWmTXtWVLphFvkNmSgweqsqO7g8VHdE/41bd2x1x61P/BVf5Vhnb5Ykq
GzAUGBcYsC08YIzBgA0YLBBgS0yaMjUiJKERDUiZklJTGpCQhJikJBHS7rPP
OWvvtdd+1jrnxe6IzohUwjucs88e1visZ/0/X/zOV770jS9+56v/8sW/+8f/
+OI1X/nqv3z77/7nt/6jeGn4r4aG/mp98fvc3w35/3ZDQ/RP+fOS/2do6PPl
n2F39dVXu/qn+sATA7wf3x7kW+L9fyz/vdy5i++7/c/f6267/lvuW9ff5u59
fr97/2L9qfNT7q4b7nJT56v//eiNJe7mr1091PFX8te7Jrw39Pflv2Ntr9et
h8ReGvq/BrvEZeXHe8XH33P7nvtl+fFvXnuL+9lTW9zJuUv/45NcrVtcbK9b
cvf33Le/+W33vbuXuL3vXRz6v8FgL1Nf62m3vExfjf9Z/ntl8c/H7sz6Be76
259xu0685957Y5d75vbr3V3rzxTvFD8X3nbbN2x3b1+ovnjp3JR74Prr3f2b
DhRXPHr0qP/3+Ak3Wz3g0H8r/503yHWH0NJUk/nZgcfnP396zY/dDXctcTuO
veVOzex2L9x9vbvl6SNu9pL7h/Kynxn8spfed7vvv9Hd8sR2N/PWcbd14ffc
Dffvdu9fol2EFmY+HJ5x379qWrCR4gKn3Zrbb3IPHjjvLlVDc+cPPOhuun2N
O/2x69S7qrizO73+PnfjLQ+61UfOuWJ56jlteYlhd+m9He6H37yajl797zfc
7S+/XV7uHwa7nLtwyk3ceYdbcfJC2Msfn1rlfnDTb92RDwe8XN+52Wl333/e
6TadrXbexbOb3J3/eb+bnsUr0mt3+cYVKK46e9j9+qbyzuFBLp7d6O686dfu
8Cxt5+LfSxfcmT0vul/dcoP70aMTbvKdC0P/veU1OjTauRm3+LYb3L0bXnfv
vv++e//Uq+5H3/2Re/XUB+7cR5cGu9xwOWn3/+cd7uW308/dceO97tAsrUHb
62mLcF/DIjRfv80qnD/gfnbjArf3g0vhEpc+2OsW3PgzVyytH1y5CpeKE7h/
/CF3y3UL3HPT5ZrXqqP5GtVK9go1tMIt+M9fuPWnLvDH+R8tLxMW03/u3//N
Xf/gWjd95rz78N3jbuOjN7nv3veqe++i+4eBLtcv1dCOX37XfW/hVnfs5DG3
5fffc9/95U5/KXvyG64/wBHYmK3fA+n2vfihO3PylHvvwqX6EhfdB6896m6+
7UV34oL7+5aXo3Xw0vPtTb9y//nDF93M2clsHVqNql9+7oGbbnWLn/21u/Xb
/+a+8pVvuZt+8VypeeWJarxWsaFmjzztbvral8uZ+vLXbnJPH5ktt1mbE6Bd
v7UmuNHdP3kuSLJz++93Nwq568/odde5Bw7Nxju9s8X98MZflmf+79tdrlef
J29q7Hn0Zvf93z7nbv0uV9YtR+R3xRm3/s7vuYcPFsfx0kX30ceX3MXzx93U
wdPuI9LRLa9WrMDccbfweze7hTsKEXn+Xff6joXu5pt/747PuXo1Cxvr/f3u
xSced48/cq+77jtIIai3abMQ3uZY92N37fcfc5umT7gThza5x2651i1Yd9or
9fDYhQ2x5/5r3TW3LnSbp0+6t08ccOseLo7/vdvcuxfd37e7WiXXOu5SsYH+
+P1vuC9fw85A+7EUB/Gdrfe6G77/qNtw4A138ugut+Le77qbnzjuPnRxCdpc
rV9qqYU33+h+s36/e/3k625y/W/cjTcvdDNsCS5dOOumd73sXvjNLe4b/y6W
wL6NsQT/SJLh43fda4kBvNe9S5u25y6em3YTj/zM3XbDNe7r11zvfvDAMrf/
/Yv/3f72aH3Dj94cdwtu+ClzGRpv6C596F7f8Jj76S3fcd/81vXu9t9MuKOz
tYugfrvLhMq5Q8vdgz+43n3ra99y19/2gFt+qDLiglD56HW35M67y0H17csa
bkD575/h1P3//f0ny387bnbuY3fkjXfK37kLH9+OX/6Sf/ky98H5j8aqS15V
Xaa44nP+n3ojfq7803U/WbilvNkX/uvF8nfm5HvVN8Qgriz/7bupY2+Hz/r3
izuWHyheLyRz8Woxog27/sSvN1rfyg90svi6/9qB42+71w6frr8y7D8WbjVc
/8tuBT93WT0B/npsArr1y3ykxdc6bBT0af9NPnB2df+5y/yHipvSM7r6oPvL
1F9N5k25c599hf8UdxiqbtHlt8im89CfzvLnu6xeCX85sfblVye2HAvTtW3/
m2HkJHRpdP77xUpVH+0mz56ObhgscrUS9aXCSP0lN+99oxxOsbpo0fr1LBaj
DHNEo6QJAlOPRhMv10WTkW3jOPp2T+tcNHX4UaCAhVhma9fQVuVzH3ZGdoS7
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
L6klH73MWnFptD8c/yZxZiTCFLEET0ouAu1CdT7yoC23HUPZJoREAQ0N/NuM
yIoHBRSbfl59eRPrkd6ApXl4F2iCTXCXkwWEsif/zXO7y88sXLmPZrJTv21W
8OcRLF9xw+XmULduwJD6D1qCLC53/t5TE5N2xFox+RoyjUp+MvMH5oFPK7zk
Wh+hushUOstp1gT2Y+HBxHQAp4cUU8jq5sXjP2kVr2oYDtK4QepwOohUmqM5
7lrXHzN+q/hziK5hjJBMycMBlYHIi0w2wy7lSMOYNSvPatKCmvTxUcb5Gcna
FnPhFaRC3kAU2T6o9lnpVY1MKL1zKj55YSKvhLAUIfVgrTKXXyKaVX7+yfHQ
e4HqlbmaWp0mJhCG0H/lq7XNxiUrTT/1gBMgn3S7Yl7jWjxSIy//ds0vbmyY
XJj4EQSbrpsgFf3vt3+xJluFFgplnHAOfZTfM3e20pUIJScUdj4sV/rWNqk1
ST8zg1HwmbOAUqmTMjfyHNWAhnD5Q1mBbbPNkUrfEXG2ZpLdL6zDNFSHGPNH
ULomPI2IycktabbQ67qTb5/n/oKac5GN4GR9c9z9SDpXvcmlK/NpPDSzeYJZ
KC43CeOPltXf9YzGBtNnxQFojKXHvMxIcp6ksAOnsb4TiTnTDkMk7o0VTZzg
EJGFoNeQUydpHvjJ9YnmQJV15BTMMVBZUSWxqp1Ax4F2UIRxpjKn2h2h35d/
YkojsW6cWsqhzgDQAlGbnsPF77//fHUw2cS8IUtPHvOatF+POLTixuXIfs+3
w7269HIt0syiFRKqfZRSQzrSnH2Sq6LCnTeCK9j+Qdc3D/X87CtWpxfmoiDz
ptklTI8U+R2Q77ub6Tb74Zs7zMn4jV/8J1buI2XEu3yXJ4XFyi0nUtnEpvek
OlXoMDF5JdrV0v1JluZmGaZMVSa8KSpLP7M51h8aQboeQ10decN2q9YrSsdu
cq6k4XAo1n4NoZxOszEx7Evjy9d+8/zuZGwWSX8iPXFLWWSJyskvKbCW7CIx
yrl2KaTqawFqE9oSo9Lx8bsEIFk1+8MUo4p1M5I9Dl8lYTfJdLFMbSQcwGOI
MBUJLIQPBJVESGLOFwOor6gIUpN8t5nflYxQK4MLe1r/5QWklYtnEMW6xowJ
y1xROWfXgCsy4irwFYoBTBFMfRSimbgByJlgZSOUxIFqw4KJc/VX1DMm5wrp
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
iKGCLJ+ljhxXRpfD7pJsuw+dHNDXqVy7Z0N9eR2bEr7PtHdO+sP2SLQwQn/G
jdAoN0ImvliJO7sQ+lQPBa8X3/bCsWQyvGpHhV2T3pTFAB3t1yKSdVXsNv0u
bHGgBiZmzmJz5xWGwtVtT0nicon0a3ufDz682KZq/WePPjGvLb7ZfhgAHc9A
+nJ3moZG4tMiHx3yeD6E5B0sKjx55Q0syyZi9b4MtUhjpB8FQ9X9KUR3rGo3
q9g9OmC94IH31PzHa7YfQu9G65omVD9+4p25FDpp4TnDfEYLM0iqWwkttfqD
SAeYzOwecmEVkCK3vBNQyl75yp+0/5vYQO2Edg7nWGKAAuPkgpiOshRQhj4A
DFPtr1Bv+WTtZXQ3ZYYU6prl9oVHmUxKX3gbE24BkaaCTn3ArFX+/fVzR8Pa
4Zo99Aaf+vY6t3DqXZt2hXyJTLh/2hiEg1E0Qh49vA6gTpJ/LNjKfi6VmIeQ
McXbmjRuwHeQafPSzeoTxFFWMIt0lGjUjK0ngmT+P36/KwJPFu4gJQoiLPl/
cy+/MSymr2qeWEVcNtkPM1ly3+dv1I2bx0JH9DqRyyCgAKPnf6JW8IRnFKLl
RUnkDc9GHUDvDnNXSz9OLDes+gW0QGmm38YIARzU00AlipJ1+tlvX3Z3P/qS
fEkT4HcBbsKdF3TfVSlqGnW3PNzpKHzz7qcSYAwpdqVNcSzFNiF3kD57UZZP
BizkamBVv6w9x0FWgl2dPy0CYVKWNgtOU9MYZOImqKYmGSSGeMiiR984Ww8w
qzQNTesy3m5Lf7jx/fOn9mLedZATud9KLc2Yl4Hgh/7gnmCWwCuJWy20WcM9
vgARiCqhZCR09ix1NHSYT2T1UeLdYTWAcuJm1jKy9aZaNwwcH+0VAtw67e7b
sD9ZLzokqrq7uV7RRFaImixiJLxYZlXsaDnFC+7BzQdM6kNd+y8f10/2l+Ft
vIyZ5TEISgPpDhKZxxNvv+8+vXIdW1YTvkQpmYAeLOJeHP9BI6ZFzGP9wpN4
HxCWMzK9M9rLJuukeWQpVOFchAoVK6mkrVKN3oXU4qjKKnpWZzzrYBKD5HJu
FUieOqdyS8ks+mZdYmOV4i74XoM8AnZ88MZOjTtthvkpoKA0B+L9c9nOUr8S
Tu3xAPaxqxk2chhdN/NFFNvIVe14yfMCLj9Y/8xRXV18kpeIyfPbCKgmIPIP
HEpuSlGriSXMm0FTlF4uO2CkSpWvHqJhWvmzOb6ErKJVazYh+yHdrn9//Qa3
esO+BFGn5F4NEF2DwGsCduWsia6zHwlAx9ClldO7wBlUDIsiNKLco9vvuezl
DoroecHbchQguWf3dnTIz35nQ6vUwKOX3lYMxaOWirWbVhwQjFAaByhWVXHQ
dcLoeLOrozwSKcWQWC7CA7Pp71YpB6227UrTzdKhkEnZgmGI72s3C/ztU/Ns
8F8HNtHfiPcy9cko5pdSgasmBcuNIVCaoSGCdKKBxjC+M6b55v1zcD0FQwLh
4a2c82QhT7593mfr+r/Il6FJzretZh5X5pm/lT97Jvj2v3h8L28mK7EE0+wI
w7XzGBfiR5uS1aab6aPursvU/AydYbzDXfP7j4oZi0iFLXJ+BRtXrHRXSAum
R2GJzjTmhe34+/LEtCSPfeGmTUrUqDf/HBB06iQZCfVwvAO54qGm8TIUZpE0
6FSL3HKb8WIaYZOvLvObHBPesovnFM+i0zLDQ2dQ0Jesi4RsPRY44/7f3Mtv
GOQXRva67LhT9kk5ravKFSEZzS/Rl9HyJCGBBofvU6IUhDjbwjiUqhSbl+SB
Znae0EEtkBEynLx9uO/QpTEvZCjjkYaPeM5G89kjTxwOpXq8ZytdN4hWZlEP
3SknHg9qHGW1pv04+F3KwshI81x+AkXmmm9clUJN57TUvjRLvph9qMZJEzEZ
gYLLKGOUYgoWu1pKUR3yExVXwBIvYOlHrYsdiurgJToYl594uw+dhP6Okj7l
Dyo5bgdjo46tqaU1jCBYJIPx0LyEus5vqawQc8xXoytsYkX4kkYTcYs695pv
xyNIYTlTrUW2YM22wyQsDdYoDaYa9MYl1CkHrF4fj7H1z7yaI7yYjbCqcSD9
V75+55PtuCQbzQqFp4vnbPS/cIwluw1Ecz4D24r78mURgPwRNlb3wrOK/An1
JSa0zin1JMsqG1tKCyyHN5l7+XX319c+5jtbtj4rk7dJr4oF2822TMObZyuY
ZkXaqSxlPbSsckIeVfT7Uj0E3oF1iYY4GLiokplOX5gYegj1xYnAJqt9YZTQ
JXdUYlLQfj95SGnMDbakwK4YodJ9EW9Bz4WGHyUThq5B007ENdhLDJJZBkVO
xUXBf+e/z+GXHS8u2DyJ0bbnpi9ejSZm6JFk1TJMZlylXJItbzeI5O1B1jXC
6h9LmsWwowOF7+FR5c5WnDSOXdBXtlB7nTKlgbJpeiLC5kshbiXpavRxxTKw
x/0lL1265L5x55MDkmPKEAzVn0zXJY4DzGR0Wa+D/EhR+1RVwzoFjXGGLU8m
v5KV+2YOTsWYy3ZkIoi3wEZNKFmd1D7LqFBr/qD5lIqTw4jlqBRTK2+LHPax
hBYQ3A7LoDHpw+NM+lAtI1IOfvRsHpBd98zRLJovrejQy3Dn8VALsufwKWUg
KR/07N43MrewXAAxGvwqT9mZHvikll8jS9O1w1WB/RS5BCR4wBQM2RPn5ey0
Ve5j8v2eWMZJgfKk47a81D9VPKqmjbH5+WMjepOM9DL7j56RnJL4p7PZKPDO
bnztWto2XPCYkRGCDTX7Opf1wJRiPVk8nPSXXOBesF4RUcRJFLRL+WtV4NLC
w7gMWJt46l6Y7pBBKsJUIw5EM1JS4pknTuSZxhP/9/w2KMNF6zcNc3tDcgqi
zJ4Q9+X9E0lYqwnUw1LwxQ/0BqjclS+Z/vPwNmLJkI90w6pn249u/MVzdUF9
KhZDY4sKYHMsQTl7c85r9CcXWrGOShBPTIsRXlWZQu5r2GHDKE/jJkCRNHVI
aL+UeFlQRecpg3n2vT+Q1m8YJy4epSSsWDDo8SBmmKiFqRwOZrNC4ECcagnW
eIIhshGMuu/hB7qMHoqnbl3qZJ2G6wKY1Di41Wz5RYUTRuaK83T9U8UiA1Rx
ntnPSkMJeokkhnIkV9BZ0quZkPgeua4PbDoQYeOYq1Y9xWZ+Yz+YBdT3cIB2
Is3D43OvooQ5z+BykHrrrri3ONZtwsMq1l0F2SEUecydevt996nrOmbz7oMn
Z/un4IFlQdeCJ/9x7JJLRtJ6iWTeVLxlWN9shZEquVm9JIXcsLsOngjPQERt
59JcW9pHKDWHitgpeoUmnEaenLLcyEpSwcGPHnxhxATBsCspfDdSwvfP1eyc
8CvfhIucX3oloXamZ19TU+en5+Gth9wvm69veDbGPjnCYFe/cvFTP148xntp
/hT3gAbKeUQjPe3Ws5qaBzbub/VDOYfDd+bgkt30VAQaCXUz1SSOJb9Wkhe9
haT8rf9rIjKZfSarVkRB/zPaL8k1yse13xT04muFLF7/cJaSnkRDuHosPUFj
VMOW4+VyA4rNGKMBqtcook6WY9bpOEh2x6JeReYPXbJRvjm2/+zzN21075xb
6vzZKEVJzXhFgakSCAcvLmsm1T2/bPxO8pTic1TJwpKPhKTeu37/SPSA3hDb
lvcb8KLox9rnZ/aWHDvuFM/jKYFpapvyK4oxKCCYe+X19qPPrFzfmiVkekrQ
Og+2guL/RIaF+D8Lmm95bwEfmncgDmW5Z7NcMThdwxNO9ltNKlAqW825VDmC
m3q/lYI3O+buZtUZgQJdZGvSbuI+MCu06fXURvnzjnA7CSQReEoGVzYphOG+
HUF0syitjxoxcrlvXhWjDKJmAfvh0DvPTSdTGnANRmlEQtio9ZQGTY+Jv4ue
bWrEC7UFIsFq8cEVoLaUPxRzrT0Q2UjfDPP6PsD/wQM7kQQFcyUsMQvNXs5j
eylserCXsBJUoaMrYAGm9fJDDUUXzM/USt6XlDrNSuB7HiHyo+7tdxfd3yWR
+YRgjgctvwHjT93ykDdx9A3JHYgKtsos64W9Y0m3crOzK9akbbYmDbhHr3pp
k/bf/Rv3w/lDSQGmTUHN7jyRlGwjgdYeD+A9UgBzNObPc4XcqlZRwUbSaFk2
MuKJ44hXaXjvszBG9T+8JrVXsoULt9CHV8qdcZUVimHsxSGDlVPtI3lvxVMn
aelCVQ41jwldJytfgpFkxbGlu/gyZOqN1ewP5KCEWEgp+h5LFJ70TCzFYlrk
rq0CpSBKGT5TUjFvUdW/IFLt5yAF0MFHb3kZHdLpNfwJRRD0t346R4nvATGK
4mtXRHZjxvrpFu9y8kWTUeBsFPJG9vb6UEmkhA8MCoHvYd5i4K/9/nyHa4xz
XEO8CO4cyREVH1mvDnm5sVZ2nCLx4FlPJSdG++sjpwOIF+KNrrkgt0NNjDqE
QWNYTVlcSyPrw1W6u38oAQNk5oePRepKx47N/WGkJ1mLxjPKi+SzEz3GKyF4
wZ+OThU+5GlzZPx44jDjxIRKYky5+LlKkppELeVLUorps99Z7874lexQkIxs
Esl+3PqrF4PfkVbQmB0oquQe/hwvT5RZMd0klXIM/ZXJrDd4npyz20UJZJgP
uO1BjLuNvbf1hZs2uVNnzzP7njVoqqC/MQF7HRTTW8BIE1tua6s24uIn73yd
k9Ah+gm0oaVIUJxB0ttHMHRvAnK+cDLkSZuzxOuI/G+GgbMDWctO2s0CLQY1
S8wKsgo+nRC7Va8/skPzdA4msoHxO3793Kv0OLISgvcWF0e3KVqsVq3xjI4S
n1tsNDNDiNXclUQji8/i3v/hg50GxHd+/kzrFvkfBi5xvqQ4xyjPyCM+YCNh
DFnbP345+LjK78smCUGw4bStKXTIKADIWpigufKny5PXOPbmO+5vrnu8fb7n
9qVpb56PBe5eHobXFyhzTkjZ7mf9zDlLRaN19SsrDIZQuKhVEpfgCdVAmCBE
F6RbZ2M6VXhB0Pk5yQYtNdVV2gpJGn2U99OCUzTej22fpQhe1ytpGyE1yk5P
/ZT3oTQ7rUrHjcsq2GSpw3RqXvhyRLG2i3kFCONUw02uFMTxrKQ96en3qHeD
ooo6KuyoDyK8w+P/zMv8+Z+gJjXVeu4KABqllMqaEQWxVMWoio+vFDumrmse
rkwxUfdUgJ4a7rK8WKGQRy6WeDRPyFPVDWvZ4yWDv3bLdj3uGSThq9P5UyB/
Ofg7/sCGq8uzHgdTH9okmCtYFBZ/J8hUZFrVBEbtITMhrkturFx40rR3zbSS
HjgyTKHY3cOAD246MDImhj06l5ZYWlrs73GLpdBz7/KE+62GkVm2kx99koJT
yF9RXEVD642kqfQznGtYPphx2hLpwx+MpRWSt7frQKeo6NlMb5w5V7kNWwej
HyrkWppNKFXKEUSJc+SB+2XNoPN1xn8WCzXVJt0jdWxkyrAbo25eOXv1xUMn
GcBzRjsvacPLMJXT28gzXLv9sBGSXYYqKuqBNRa4mQbSshRbbijJNnRiGSlH
6WJizMAUHS/MaRor2QMognySQk6P0u4I9VbPd6xgORlunTwgy3Ij2kIzN0Pi
pmqvwb2E//jNy3yQyO9CK5cml0N1zfwPwAQRdTBM8FSGgcL+34M79HBDmduf
POdC34tIbsofLJdO1itkBH8srYKnAbj5vufbP/+3u55qO/igJczElGph64WC
xpsqaJH6tmfQluHSWAQ0m8mZOqBZfka3IxPHOz4QwAMhZeW8SfVl2ZR27ziT
CFvQSvE18b6Dj9+wyQq3ut6P8my+nXUac9t2JdlD65RdTMUCbHQkEops9MGW
hBMPXQ5KZoOJkVJBKD9h0hpUA4yU4rP5HBCPQTw1MERScrLk8AuFKK6M3NwL
5b63RQVEHrIolR2KgKNWG7rIKvVkJap2uPJstyfT6XJjw5oFDLWfOIVFlaP8
Wl/8bhfWNx4Q+nUmHJnryykrK13nZfmsK8H7C9SDzBiXgyczVtAkkWeArB9K
P0ub5d6/8YCuU5Op1tIVmI3VDq5E2/G1M9mq230oKm/5f1++uZUoaFk+5Yrm
nOaZezS56uArPcHXe16+i0Psk6mSkXSHCcVog1orK5tC2eDaEak90Az4+7TB
4R/bnp2vExEyJvYy+lXeXvq6ap/V8jUKv316PszngZbAjJUxyJhyYeTmGMd6
L1mTBRd8nxm4YgA/ysz0WevSkkOxzQSnU1EopZ3Ihc5TFvwvwlhzDaYOsae1
+Na53tXpDgXjIS4PmEaoWQrEKRVH6KYi0StCfvP0gq+EaE+TWUsMvmz1W6Tb
0i86WQtIf1/uKpwzff/9rifDtfzzppvAMiGTCWEJO4y5PIRf4qhoWqOylZBI
XXS0qmrTZKGUT0t6et7WHZPirZbvM/AkkI6L2Wkko0ImVnWUW9XeQs4k6Xt/
SJt+SzeT/CD23OtpdfTLcDvNbmPMEIxutoQuKxCVzCpaT9yssmJk6KWZ2ji1
EuCmRc37Yt32qxfb//rOvL63ZbKuFUH9QcYVbBI0Js7hnKJJkcQasTnsidW4
TZcC02kkLOiHp88fwT1cbrxaLl3ed5RfP1+Jnyigg8By2+r2WGA876qn6vmJ
SuTLaCsTEm+xtFLEW4oLgjZF0L+t6seBjEHqt6L8ZxWzVNmxwqyy4D5gShuf
fU0MfqeiKnTPRnggZIWO9hbKiOVcFUn6yMzUel4GhYykf6P7DTMZOISAAOCb
aWiogu3NgiehCS3YM2UIkdiEDx/+6QddX+B7fvNy+0Saf2E6CCoJFiUaJYWF
50Vl0l2b826xTmXjAzlDWTHtBPj2jpCvP46qeGQuIEcaYiW4VNbT/HI0pOvn
jnKuhf/VC4dOuM/duLF9ylXr9qWxbZFTq82nBt/7y5z+/XlfEp/4rgKsDBCA
zJ73O1XJ/VaclulIK1WPgzQFhAuEprBbxrOq/wmmtQLixVi7Bs5hn9hOVE22
8ABq4+7bBk0wDwDJPfK1wRoUGzDi5dEDuit5+3zbmt1wHKh2UdhwRN+wzEKV
zmG5Wl78LtbXVeG2VVmGnN0XAfDx9vVlWnaqn3BOm+BKMLZORX4O9st/jF2W
r8B8PYxn5Up8lRqoD//Kll1cOGFw61C+ZyTi5uOwYfHFTP/uPNNFKK3nTF1z
e8QEjgPc0sTFbYKLskJpAbChoV+ZFjcs7kkpYw3aaVfrdHsVhmF8K9S6K8UL
6tqG1SQz+BhYIHcptiG/6uPt7xLDirawD4NmwONSzpH3XmrOLhNlm5BhR2ok
0uaYOjgwqFmVqRI3yJhV5SyBfGOQLMMeieZG2evEqgMcb9vhHu43Aq0FQsx4
zGzWPGAhe3psjjvxUYqe/yRVpaAZH9HOBc3V6HQLj4YhKYESAuve+BxnM6vI
dMG/l0Fu4zlmYY4XL5XHp+0j2TaC+23IQaA3wgI7GaOYX5pVYQZ0UOAFcGku
pnIg6die1WwoSnAuVLYTRfntoX5Sduek5fssUrxLJpwo+b72akJMHH1vE6Ov
b3zuKB8W88hXt6D/a+Hvmm5PheGSu61QgginaxbiDDQSlSrZ9MzSH0k2nS4S
YHNWLKJzbE77zz/c6t5f/GBGtY0FYnwMzJRcsAunOPa70ofO0ctSXIsAVT7Z
Ut1FKcUyE3WWfGBVPTCdHQRjPL/vzTZN6NlQfnHDYzyVZAtoKA7PUbzCyVXS
jSeoHQGvsr3FwUiwKhQeJM8/myA0SYF2Y0hErURgf0B4Yxqdku3dKICM4LOi
GqM2NBAhaGITUfnSFDQxNG4PbNrPVzLCFXjPz23MeSzBJUoJEa7FE5u2UG2T
ax9iaSTEl5CJVo4ApRowtc6G0lZakbCRNRGOIUGCjcUpL/znwwsX3b/f9VR7
o++ufs5Xio5w+W9SYfFbdV+Pt9habVU5WMQLOXDsLZrt3YdOhI8Pxo8rgLCP
gM3d1ScttHuO19aZhPGq1N8AAa9wrs9m5pHvljdOv9fqHfjPH31ivj+gc/SX
OynMPkoPzu47PUClwG4fwU2BsNZ8T8SkbFaKj5pvo8jpo+xpuG8UERGkIpZW
LSq12og0zoY6qVlC1rEq7crMRtQ/zx9XVIIptBarhKic7xOWtr1o8GLyuIRn
hblwvKzcJxyEFCe7XXe6JdWg2VDCADbyWsMtO2OCX3BjFAvn/RTQjlXykjTZ
XvOJchVrth2aAVdYiGw9cZyMg0Gj7cx9EF7iw9ltypmgmKTm8SwNefpMMxYf
xa9mWrlRHnmHWNe7J//yk+3tn/7ggZ3taaM32KzTGdNWgeLWmmKAeZTPFeFh
48VRr84t9m+9GUMwJO1qFBqFoDEFP0V7ETgeekiVPtqVzM61Zs7kbGN+Dzuc
USeHvMhNqf9ZZjqcIS0guysNCoX9ldY98yqcJkX3djKYMSCFmEooGAZVAnoy
NrdL4U5rRYkHGbOQ40dkGPyB7IMv/++lw6cUmkWwW0gkyiSDyKFv/n/Uf4wE
7XM2kF5YZ2WmPwqeTI+ArB6OFPDd8Ivn2pf46o+3+SZ53YrUQyBxulQ0Dygc
e7P2G1UESmHFX5FZC9a/McB8JKxOJRMf7wcJIY5oIew+dFLu8EXG6JdlU4Ti
avAGGaw8ztUNFnPMSt6BAiFNqk9iNjoGV+oOvdlsg6LKB/TAKVAsz3+YbWlm
mdBJrrPa++HQ967KbNiZJkm74ic4peXiZ7rMnsa0pZP8N80h6O/9dzdscKfO
vm8KZKpYq/Lua1N5uCS6ITU50feRW59peynQlfykEOtGYBDS+ggkR4kAuqAk
PyaTBprNGrt3/b72dz45tFDQFlU6U6iizeyoG+I+cgIDz8b3iYnLABMgGqlK
THnmj5S9HdDtm4BdP9K8rXydVZvw3U3Cd/wsGRG4IisU77A81I1T8OX/63UX
fFGGf8ETb50LS5i0RVntNi/BVRJqyhmGGLH9N0YQxu+VgJNIBYfrQoBI5kv5
a/bdYxLL0R81Wrxpgm+WU4Brusz4XsdvS/uGHseLt5GY2zW3P+GWPlCrPM0M
vKp6J/CkAfJ20/3/IijdLzdiGa4LTeemsja4fCgYdiT1tCU+y3+0vXYlWJzS
uO/YvdC6wv53c6+8riwNiu4VXFbcgEo85IEpEwL9xZfhe+rpHS5Qnp/qxWyU
qYotPHu4hUQrWJmQqTTd/E9FAKvHrxNu9fpYGu27zPWXQq+rGE7PMKGQhAnI
9w8z41Y9Hhs18qnrcjcLXWkoluLhpCBZgayghPwrMs9GRyyzoIEbhZL1HN16
6XdiDpF1qaOBUk0czZYveWB5oyvEQi0ZNHniR2oJjq7IYb7r0ZfRZcno+Ubm
VzWxmv/qnWv38HGVKUCzsZdNURVfQW02ew+mJwpMZU0OOaWCOSQyPopoeR2R
zIWo2q7nZ7FF++/vb+hAzHvX7YM46IKqllyofIIfp8vEarXLv242aLO74sGo
rNs+J98+33pH/t/Z9xZ5PCAz/1qCMVTpz8JSTw4ycXbiwHJXpwNldKXH52LD
zR29yohSRqSZxfloFn/++F5hcEa5WQwxKYymBpHwYEytnoUo5y2oEnz+ow8S
su1mMFMl+VJocWNqpQ8iHbLSnbZJiRA7+d2p99xnVnYdIluRstwSSXtX90yS
uFvhruw+eJJrp/Yx9wjCKNNMwzhivYTtgSwmQ8aUiNIvkieaGf/qj7rD4Fs/
fdrnuU3bVmA4m+xfedDrVqmqsdpdj7xEY8NFmlPTkRMktVPXwukbX4pu5V0p
7PvlJY1R23U8qUBF9Gcx2gZpqSyTUjAlkPKQQknLsemL1n2Zu31NDOZ3NGG1
X/3euN6x9kX3H4++1M4JIaXrSG18LKGxB3nY9LQaRkc2ia2TyK1p74I6xvN6
C5lpiHFVVsGkbBhdbToLtBVQnjcNFuXuvh/eeP+oOomvC1We3ftGSyX7P996
3DOeg38JVno/4wrhBBnwuEJ9eRGF/1t2du0TORbN3ln11/ijoy56oSdHmiY2
Dd14O3b0sU9Fn33vD5qpt1pyVRziWtkEd92lsebHhgLANq/bTfaV7bbib++P
BbItPA4B8fOIVQslTJw2KQCkqZAZUseO2xyrTZ6Szwlbx8hqdAgmC8MgTqU1
VVQEPBWPoOoVsBOz68AJuhG13uGKxPKI4BSheZRvt6oGsCQIz4QEq5YWl1E2
DK0K/qOFXVZpYDMDtAA55fHnj73S9mCm34laGnarGMrc8svdYa+feOuccnD8
Kf4Ytc95ZMc8ep3JfjRZt6oR8kT5mVLo7UX5sYJnJbINStqT7BoJYvh/rQRe
bsBNwgKCKZRtbGeqEO2Ykukwa47aAY+6tdsPtZvX06toU+jBZ71CbxPbfsQH
ts1XfGhLX/kTe3GIHSwF5eO2msmQP8VXVzwuF4yNzUjhtpbbgyA2l1YDKaqk
eisJm09EB9CDm6j52ZT72W+jDC5vQ5HwXhQWcmEvTGYzqaVGKe9I30MpiHT4
7A4AaDIBhszbT/76iTRjyu2mP2nZlk4yydxF/PY9c+1/v/KjrV4afAR5zYo9
KBRxcVeiMa1lvyzNjqwjbQJLJDhV71TAFquLSeIK5QeyFgZxfna3Orv+rz6N
0UQkQ+vah4F7SLTryXQbxPa8qTdrtakh3yRWfw41g9l7/VU//ophWiZ+LebY
qoKHGPDIf2UD5s1cYnty91jYHBSDPbQ5tL2A0hC5g6KtZ4X7ljrQZW6g3sUm
p7lw/4oX73N3zYpGehC+4GhzYKzeGBbkPJWOUKgZ+JjMZ1KkJJskaEyowwtn
3Ypbd7T/91d/vG0EnWqWeykWg4RbBtS6Vrbf4kMTgqtRL3dBMfwIoaYyQBFz
x1ppGkwtS2FvUDU4aqLm4YPNTUyfviQ6Y6tIISZJQunChxxSnN0LuyFtlCy6
piR5HmXFZMM9IG1rvKdEhr2p24K7O1LVpeWMJ3uy81FAn0Qjw0EW2Y87ddUO
ofVMZieAJ6jV1lhjJmyt3JE1fPe47HLI5a5HXgp/z/tqm/C2zaI8yOQDEFRP
9eGy8EgJn/WiKqVBzmQqnhU71qmmwewTkFsFX6vx5Zs3U+4PwOpoJUnnWbOt
ELgtcgHZyeVeOHCSEgSQZ2GrhWh+EYJlGPdXgaPJeWsirPDxL9bt7WZqOjPG
ctNEDYixRANiIerrQbdwVp5F7X+HiOMV6NQcOJdUOPJLTOW3Yp0VdLiqlAcH
gLa0TzmJuzwqyNVSD5kx9muwzbsY2zaumENRRZgzm2iJHVuBtysaqfkDanJN
VQpIU/kmS5vW6o4F7i6XOy7peTXP2oLxaILBrf7P00uosRCv4fMVv16A3ask
frpPL39n1TMBYSYXRKo802qR2IpwAoPyZA2q3hsbzjbInKEU4A0mcyq5iCpb
OQk3QcspfT62WbawXjGUVCbCX88Hb1TU+6OHdsWTqh772poSYslQVfRCN2gl
6OCQ8Lesg1ekTFAXKDN/+MfI6xVuYDYoRsFr/VEqRT6TuCl1p1Hna4RkLhG7
VAMQPgZGXEm6RFroaeVWmjG9/KxHfi3uAnjPK4uEqjB4swtzZFXLnpG00yNf
ERnTQoO5ziqgAswYYE1BHXxwjCLJ/INRV+Svr+16Qq/esC9+KyVls7+Gza9t
hjMc13In4fRtVTjpCGtvmkago/wgD0/z00eTLnJm1/A0Vv9C363HZ8EuXrpU
FUilJjTJsI33t0DdLOV4zBstsCRs0C2klDwj7gERy+YUI5PBsZ+CEYWe6iw8
AJQDSwvmTSsaN71vRUiMCOm8FK0p7sAsM0z8VFabFWTck96o6omn9IwG4tYS
o+CeTY16cyWokjpN2MTKRWqbZBXLh5HXOM/z0gtBnTX6XRUeOZPZRMF7pgOA
hlT21fUgK5k96OKlC20SzAz1P6aN5fGSvtgjzMzD6Ytb0HSl8V0UZGs276DX
eXm7IPhQlGDwQKYZxxHeJYz2uWlq86DsOz9/xrMmO382l/eQExpN3mQwl3LD
2ptkNtOLQYCctRFpumtTFzSvD20+wLcFmSdZRNk/CjUNtmyskgyc7udT976U
c3ai3R0VWJsrRKzNNKGW9Nyqp/IXZ+BodmMAjat+LI8jivwIgcYQXs+rFdDJ
DtHXXI0gkYEel7GTmh5ivirdkDMTQ9V7ygFlLhJwAEcsQh3Pe2AtEiTHm5YR
y63IPT1yvMf7l5XUo+TxR7nHFm6/Ztsh8dlk7Ny29VCoa/db5xNsp4km0FYj
B5NeP5V9BXYtGeYIKSprE8G/WAjJzM07YfkXCo4LslrvnlsK+T9f3Xn+Dx+O
aDB2sueLgsrI+1aiQblLou+rc6C4f0xV/iiG4PllFPZ58gCbBaUG3SQpqKAB
1R9IjXEDHhwmqy5L37jMgTcSD2yKJ0sumlWvYlthb/ODDdtbs45oSmpCYgsY
dQSTM/LoaR6yVuROxrMQwDgJUQgcyq+UQ+CK3qdgqA1bblKmLC27zI0zaioW
q6YsFR+96UBzfISBIioBGSbuy9Bz8xXGvWLhH4RI4D9YvP3LbQeVVa/EDeTh
6uGHqoqV5yVsWoGwTDpQNJ0hzyAxrHWPomXnZS+pZbonn3nUolL/vRT59V8f
Ifxqa6pzatW/5N1f8zTF2m3UrGY221gSi0Fz0FPVwGZUbG5upCK+N86Zet12
CEHbeMJZktMtRlFLysRoM1ubWnF/1NzHLJ+aoshxbmHFEM5oxYAtFOJLSb0p
CV25Lq/TKaYdysSccOwGMDWsdtd14LFs8EnOpCI01T1HzrnYuvNYO2abmb4s
86h5v8qwTHAbbqr17Jo3B2Nubd1SMp3DfqPAHfK3vatXE//kNx/TFncV91fB
36wwJb1RYxh08CDfWR4lqACn/I9s6JZauNRsKXaXbOtbv19svVz/8d9ev6F5
oRPxXYt7Yv/RM72zsdBK9sjsAY3gpudeo4+3pcbEaoqinfpxpMZB47XTyTDU
uz6Z+jY9mvSIOOeaAcPtT7R1ebUcD2dNHXusW90VCkTcB/SBEAdzfSuLK2xb
q7kFTGKRC0Q3g/THmVr52C8cOAkzvyQCM4Dvo1SComV4pFeNoDsz525EprTZ
ZuWI4jgteuZyKMo9Wkc3P/aaOyshPlBdr0J8Vke4e9ftTTbctl3HoGliMQB0
9tHVp1CEEYCDzTRm2HfXCkqLWno4AeUZX5QPZeJbeeYdU+eEy04MAu/Krrhl
O7PIs/yS4V09bMEpEPKWXIZaDnPiNyldBkZDOlZ2w+U/nDntS8nopYBXxj2e
I7FbTViqwYDNZoEFfG8R3MmYxrKzNTk+gfkYQPdEJm7VD+QAxU9AmBAhkNVv
UXE5kn6Ltl2Gyz7115pB7Owy9tfAI9PcIW0B/+t1c7EH1KNPHA77tCCNovhd
w3rfoJwhf5VeI4lWxNoIkNIKg/VuFCUKYJT6l5TMs1j0YdGxpu1GBhaLTnXj
ckXmB/l4WfKo+AHEFaKq7XPV8D+0+UCAQXpysHSy8DrFZr2gXE1T8nQ/Jf1B
obt52Nrzp2JugC/GvPHe55iZxWA+yl2xrTxSLk9LfS4CVBBMKHNLWtE48Jlo
Ad2/8UC43DYBc/ExV4Da8eLbTBP0gFJy2frPv6/3jYrfSyF1Fv1x919kdMNX
0RlUpf6dKRiZRID5jCg/olisxJrPIkQj287ywQTr0OxxkBsr3jGCaaBVwYF8
shiXShH1Ms0ONgLT4KF9hmd9kKpMNbz5aUHDti4WISPGsJm+mcrsp5dHYIeh
zJk8sIlkSMapoAxYtQHCH+Oe1h/encIPE/pRrHWZTshHGRGt49TPoHMtRem7
xcr5/EzFMfj4DwSLNOZ1DsLv127veVaTBGUnixYtRPrZRPKKM+7q27qU3edv
2tzqUsv8R38Z3cdPqwCfSJNgNuuroDPRHZI9PmciEQOaUDWOXU2UnxNyBpAJ
lcDCooqjo1dtG2yK1llNVXPEVRR8W/xAx3wdgeUps8wNN+vAUaw/Ee4yktJj
2O4RPNY62D/KazgrnC9MwAjY3ITMjMjFAFHJicyc9Ien1o45STWnMJjSD9Hs
cYEPE6rk5Ea22/pTrekCad72u6ZMb0oA8VIJn2B+H0rtkvonihq0x0cMHxuJ
GOfRRbg36lpDh35wfyfcnsOnkq/62XswNg5ElXnp3VPbwSQS//EHW9ypt99n
A1hfUsYNvqAhlhV9i42m2DFjxiWI9ExjlJ7yy7IUjIX4tOKQ2gzn53PEu1Em
oYCmYr5Iigpl5PYh+LGFrvMnR8xHAfkoubHe/P5F+5+p8Pzef+ZIZ/LaSD9J
V3PhNombYWFlxChCYohyhMiT069cH9tIaC454kFlcBF/LHa3y7eYpSeZ3QWx
Axn3FXk1yKyHyo6uHINriD/zyutyHmWCizv3+HQ4Q+nB765+3r3EBpV3VtBa
iFrHqTbviMzb+GgIZld6inLU1i+PbGmIwi86XI40g0HFbF558dTZ8/BpFmIT
Kf6xko8w13E2/VUVquMoNICpFwIpZG0D4uHk/uZ4QkDpNQ9MC2oGhlZcPKFV
XZb1YFCtgeUNKA5iZi17ncK/6GeRhrWxltkQRFdyonUlwZGqJUEjMlaFLSqZ
OuJioQOWzhaKDTV5M02kg/5GiHSg6qI6fFLhLlVlB/YfPcMJOthCTsl92V7x
5bae57i79Ve76TXnXn4jmau9bTfP12gTCmmi1LGdSvypT3+7q3XztQUH2pAe
+r9TYh/mqEIVyQVZpaAFNsp1JjJ4UjiJ3Q2WZUaDb3pV0wmL2vg//cJNXUXb
l2/e3MqfKdxTs0WiVWlfbHqt4UYDWwFzzWF0VsKFXEd+5UlAFE4uqSrmXGRY
WsyDvGos0S6bAs+WEkTUQa1IbvSt6mqMpcQ40gACx4uIKsTzBBi61rmaOMyd
zuynPIZjOyaLx5ZKSMqdR1vqgU0h95NjyNgngr12qxpaMQe8axqe8oK7xZFz
eWkuPOAtC+H5ySWUaPWSpKkECfPD8MXvbW7/5ut3POme3/emdXwQc0cuYWmk
0jLt89bm5/HxkXIJQcmpRfgdX8dzjUvuO9X5a91073Os45VdOiVih7J+87Ki
iikUysiaLqKX0diz9ssrx3tZLkrvxmdhv4PkFigFLkUQuKlo3G1ECzQ7aNYK
OCTWc1BgXjaeE0iwL4KVaS5IS3hpUzvDxlrys9mTsibsyWVSp31CmhH5wixE
YBFsfPpp5YX75W+pCVoMBt6CMPjaU9nxyzdcyKeMc32FMAZmz4yCGPmUO/P7
86Gw6vONo0VNcQytVktPGbhziwl7KhZb8a4n2rYzQbQxXl8XTworMLU6saWH
8MVLl9x9G/aFFeaFyC9cvMQWqoK2DDVvVmtq9RiRR6sGRg4toDKtq7qWuIut
HTowlVVb1N3xa5UqMdojI1TNTbvY9t3SFy+wjZGfa0h2cxU4MSBKGxwlWWm1
H0ifyiNoGqBi9rEtbLKJDOXyAWEACtMZpD5l/EybBXchIxgOjvE2zvWaWqwy
ZISH8sxp1ruhpbE6DQvl44DWO9+GnItGc6yACVQX4nvpXb/q2fYrn7z2sbY8
4yAWRda4+4tLUEKc7weeNi0bzUk4n/1tMr+bb3r+vebwRPBNBlx0E+eBCv8t
D3Q2B0jQl1cMJCdckaaaTA7xvqhpsR4WJ1COArlxEeXUthOp6VLyyCwisphm
fEFoPalpmBVRaF3scJQn1YIXdOea2AiC2JMVsgu48w7+nWEIucwhji10GXii
8KFsmIIaKR5xZaG4/0hiAwA0RiEGcuKNCIX8TuLz/XJb5APTqKI8IlUuPrz1
kN5pGavl+bnXliOPW4UX+bF+Av0u5094w6rnwmU8QZ22swZaRYxFp4HSqr9/
Y8AyfL/5VC473Xes1kVkDsfCw0n4UglLC90dxtwXe2EtjzHML5yllqYyeZ70
H2ay6wqQQkA6srLUUJacQaG7RQA6Qi0sy4OQHhadM8pEsCL7RElZf5sOQ5lM
Hpg/RfRkyx0C1lBh3kQmVuMvF6odR5uHkG1+sR0D+JuGHRdNWOpZ7G+r6o63
zoqnsyl0mCXMF0rPaxXHrujBpjG/NKRZcWem8INYbWN9mz/xPtwok2RAzJam
QqMcwhTxKiKj3PrLF+l1WC/rcGU698w6iXTkkIfyN9c9LoGA6AZMJQZGFVgf
k2gtv3nvRY9QARpM0eXa4tyi5OVu09nA8l3oZWU5pQTecqx1Xv1l//3up9zZ
dxdRYlCYWnYR1L40Hby0bMqiwPTgGPNTY8MTGgNWPVPMB6Q7BeGDaZkRuZ7N
CUtj89DmpFhnOd5D1sFnmUB+mWayIgEscseoPjzMAG60Gzg5umqClh3UomKl
BbILnhoG60xeS1b9VMHNqWGUZdhW99WNzKHbZoLCdcGCC667Wr0NwBlOLstr
c9LsL929YME0iMzfPTRcjfLW3JLJ8g0+fyCyd464WlXEdr9l/+mHW8NIe/q8
P4TqoHa1KRnzzG2Og9qWxitvDbEbvr4HkaGZeLhvjHL/xv2+unREKZRDyzt4
W1YjCZs0HD2ypMQHhQDS/PCCE9aezGC11QvnMRslkXHvDN+3YZ9MU7pgZyy2
0UwGQRF107ukrN4BlQQe6RovwslUAvqlKGCYNt2I6LgRSXcGwrSbKDnMQDek
Ddm4PrRqrMrbHPnT011pMHImjJCggKPDjbbtn+Nlb52HZagEW8TM2yq3gunB
SxarxnBQ2Zk0BkITA0UV6SGRFrd5xbofP/SCNxG8FFVavWVglW1tAhyBfRUK
i+RDcbksEmC3wsJoEqZaaN3/rc91bHzuNfeZlR2L8e9u2OAb2FN608qbs/oJ
wRO3TnXTUtYiHXFVedfXj2ITqgSr6WspABNJqdjTi0FHW6eMejUoiA9KHvh/
vshZ6ltFn7dONJlzUEQjkARrqW3RwbqanT67mEjb8ePCKwP3ExzoKdKOKBUE
RaHpgk2czvx0f2GfMvDWn6aiIEpbwy2WqgOaF6j1XYs07frGg2aUOqwNgWR6
sMSJ5X1ppDVUncqNpzhByHXxVeGyYh6RxvrT3KAczLoXDp5sjQ/9/TfufLI5
+c+gjTwie6v1j6W7tMMa5qAyLwm2vHnmnLv2p0+HLbhl17HweMiioFSv0WQw
zu+0ScmhI103n0XWgWz74RzlvmNqUxGWTYwWZyvoqL+pof/gpliK0CxDmAoi
+yl6JxQg77xa2qC06OdOmoEKLUm7TUPAD5U/rBGpxnzpIRi2WltaxuacoMdg
HH5uKPSFmv478WHGM1lULbOgMGcVaWGLKIGuzrBiPnl/1d9DJ0OoMrcvHIhw
zKHjb3HSrCyqVpxTzrKTooAWJuGl4EiC0//79LfXVQdqtFcRRCCdL5MjMJNd
or9t+2f7m/PVczM+dd06PTWfxiAIEVNYbhYVyNQNU66UIgkoVY8rgkNlFDg9
0aRrk6KLPNd3l0KZfu6Dx0bssfmlbQXL+RnmD/NHH+9NmkBJEwiSDLPOvbps
c2djFPq6FYLx3KtPw5FRPviqX2A5ZNKfEDtMG2wlJjGDpAysViIThGFftiix
UkaXLln0IMLJkR6pUq4yoBCD1uuvm1nt+0cxX/ZE+0ccHMiFTGbl3c1U56gy
y1oEMdHfAy1Szz9ctW5v89xdZsYjjdevejacdz4zzr4ja2mBDuUI7xWBqBAy
H8+mms80oZRo9k2xsK67rndG7n6UmvNOuB0vdrtQOJBmknoi0ytPjPCA5sxT
4gYLSZc0IUyk7Vz4trjGHzyMZsKUq0/2T78YGZEJ9CHC9wxpsJRI46NMDAzj
bXNQ1WqRUp20i4j7QWPCNRG3NouITRTyaBnYhGBltL6UduUDu8Bzd5I/UBMH
0uPzRgthReRNXJBiMH+I56jCZcxtfv5o6TW60UidhifTsi7tLCoUAf1nnoa4
LD3c6lN9q1VvFu9cu6dZJIeYSY/whEbcjXKUaaa+WVzcegurY0StKWHhDx/6
LtUn3Ndu2U5faRz2NlnDl4Vo9rqMXUkWTJmepQkiHUyqOSzpVjVnJTzgAimd
D9qWnceYlc9ll7V3UKKnQhLNapgkQtK/7B+W4+30FSUGUpyoPjmO2pGGaEEZ
q6p6IrKHEoXhdnAbU55jXiAE3fMaz6TTU6rZFjQ6i90BuJFCkZPOG+EvS4tV
V2awWyHfvmZPeK1Vj++lj2EeK+VHmElBW31PXB2Byz6g0HqsVq2FqeQunobp
zV7fnc/zdswzBVmCFH5i6wAmyuJqm+DEu7z8Y9RdalzW5/e96Ysvw2U+f9PG
tnTmg5Agx8fxgLI+zU4vBGkn0e33yXnCospAEnJnq7ocIjdLRzkK1BUFe8jb
+C0FvRSliFrJy9aVpvwRjk+FTe89SRpjd/6gu+lrN7mD56OSa/5ZY4svvuf2
P/oTd+1VX3Jfuupa95NH97v3LjqO+Xgz7EcoiKiMJbGC6eZhMyNxLS79ymXk
WYSitJ5HhyWtXkt81s98P/5hJ1AzEXCy21GPsr5SPVFFdQI51USwIANz34b9
bEgWehB6wT246QDcZ4jrTktcie2RRwAm1saH0kIDq429Gb8sh1KKr735TluW
/YlvxgjeSxrvPniyje6VsJq0FDlLznAGuc32bQU9JXnDs0fhMNNL+zX02NOv
+pZOYRX7NiPZSTmVuUlQgxfo14eOGzbxUFuSwlNShSmGmvLcx+6DAut8rlyV
KOrh51YtXvK7U+dkmVp8mlrV+4oiFOu5rLB9MTKm+GuyxgfC/eSGVepMKQFn
71vrZ0PzBx++7XY9ucu9/SE99QX31o4b3VXXPez2nHjXvfvGHvfwdVe5m3a8
1fzG8XGi82EBNyxUcmHdkKaQsjduXHA369dcbPymZZvJ+/+I2EWO7WNE8stx
9HFZG5fdEyOvaJWMBbhOHGc6QwG/6hYWuHiCUhMRh8S6V9lIdXnT1+dFYj1X
W/PKZOWXALNQUWbW+sBWmkT1i8rRDx1gTxH71HWU05tqmfjU+knsuqgAOut+
9tjL7kHWj5lnf/hLegYAEXW4vDO/7PzC2Zb09f0HdvoKThryq368jaSvw8Eu
e9XRuG5kki75yZT3uOOsklse3h0qfjufsLJptA1pwEpu05eVV+JHhlQfZ87R
fKZHUX8qUcDMoeK5l1+3do4lYGCB1IquYSmzPxDAjR7MpNa+haVKxhIiq+Ky
GnECcRHdhTNu63VXuzsPnW9pi6753/OH7nRXX7fVnbngKBnol4S3/cROQMkS
ngx8MvTls4s6czIk9wPBeZkMHkZYmDQcUvNnm4FKsjhfldiJjSnleP5APwrx
fxBXD3gG65+JeHSo8ajlkag6pmxGzG2lx+1lBWkKftGMMyZZfgbkhffnzn/Q
qt7//Y0bA2rhAZG7f/1SGwX4S8dOoFi1ku0xWgdRsn8idF/x/w41t/dUkS9+
dxMhtTffv7O9k4dmggh03uiZh7j0uwj85H8fHxpNX9FYIMgQcr+U8E6Bve3M
Jj3v2qwne53qm1PM9a+fOCzfKzLppzKfjtsb5jLzP2N6PzUdtmI2qwpWTsHA
sdZUkMYAO9X6kF6c/rH+WG4Xw2Mnf80tvupuv3qlmzt7MSA8F88+7VZefbt7
dTFFFpiLDvPSvYkswcWSgqrJ92s5OxYhiKE1Jc702saNzPHxYG7qOCj9OScD
GmuhdPxJ1m4/jOyd1uV0IRCAM+IGOv9ZWfsMuyJzq5gfkG4Ly1rnGeoq6beZ
/uu5se9OVslJFPaCfjoT+Vpb2dxY0PD03iH/5x9udVff9kTAZkwKWNzznru3
bu5VD3s1Y3bE3b7mRfdPP9hKx+pdv97T+pNxEqeT0UfORNwLk9Qngs8Wxdhh
AFi9S/vjB6OJl8j9EriV1qMzcUgwi1rfUeOURwi/NzpX8neTdQ3IAMr+Lfcw
7m8q1JRGBHsOnyRW2ny0dGIzIO5X+sShm0we4sgBkH65pt7L/Xk9cE/TQsAv
Qpax6En7zw65m1fc6F45dynY6EvnXnE3rrjZNc71IBttPImmit9PmYYqpMmo
FMTr/wblcJUCAPQQWTczlJ5Mw5awameyw17R8EF7Ji13rMrIL5GsOFYaFGGD
ktxWuLJkVHMIqAsVBLdphCrPffTld8Ida/f0nY1m3Ge/s6FVhvrMynWt1OCX
vrfZ/eut293nb9zovvi9Te6bdz/l/vb69RP95f/mW4+HSz/+9Kvs1rlKSihu
AcpnnMwkmTX9nBa00mlbRdJIWWiE5pGLKWnb21+LG/xtu3Bjseb+dPIIaJVe
VONRNgYEOurKcpLlopYGPkdI+Gpgynwmg03BfKsbCsnGsvwnIgzDDWDvpD6d
Oal3MCd1NNA9vCh1S4NrZpwf1HKFkgdq1RSifAUf2qdr9LuUjK+a8hPIjNQa
SrbEcGBLzPF/Y8/C9i66giKyQKXicl9pdWpIxN//8wrR//D9LY0/tsXjr7P9
/vJ6yr6HlAc+PYfp9dPveZU/i6esSAqhTltkACp7NGiDO43vSIpUwNAFs5L2
0Qm8giPCB5oPNYw16ePTlomBB4sqQSRQyivxRRRug8lmwyhPH7aSw3Hxvf3u
t/f9wv3inp+4r/4zAhlXuNsOvB9Axvf33+ZWdCAjGZVcOyq2/I6ZCrzZZT8P
ZV34P/4zPDJV3a5rk4iKQfkf+OM/wR9/tP9YhGHUJ8f/9eNzESxsHrhfOrNt
IOk7ofnsgK9Ev3f9vpYVfN+Gfb6paHtGnjhzzv3hA8wbVYzfEgnlgAq546za
vlrhmO9J8RWkEpfmxxRUGB+4s+LBRIZJMUWKRIOyi/5nuiUufXjWHdnzlPvN
3d9wX/gHsSXcBXdm+w3uK/+2ys0dOeFOzM+5Vd/4irtx+xmfc0Vb4uP4pohM
WxjxP8NX+hj++HP440/jj/8Sf/y/uqEJ/sMHr7u1K3/QDgmFzu7CO25vQk96
xb1zwdGxz4ei/d/7ukuiMs7///v/x34ff/2fdNX2/36i+79H/sv/BVjuIsM=
\
\>"]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Problem", " ", "5"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"montecarlo", "[", 
   RowBox[{"10000", ",", 
    RowBox[{
     RowBox[{"1", "/", 
      RowBox[{"(", 
       RowBox[{"#", "+", "1"}], ")"}]}], "&"}], ",", "0", ",", "1", ",", 
    "1"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.619118964440238*^9, 3.6191190188898582`*^9}}],

Cell[BoxData["0.693`"], "Print",
 CellChangeTimes->{{3.619118992239072*^9, 3.619119015547339*^9}, 
   3.61911978022998*^9}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1:eJwtlH841Accxw8p3LnHyo+dbsRujKYfoqdfvNXkaqXVUdTUKipNpUnbyLMe
P9PIHJ5+oKGjpuRIi8qhTmgyctxZE987d+fcOd8y1Pzcd8+zPz7P53k977/e
f7xfDocjeUcMaTSaP3X//S+OaF42DO32zrenj8/NkRgs33O4n+WB7lP8ibgZ
Etb07owqli8sNXMhk5Mklq21LLnOCoRR2OrgiXES6zpWVWSxwjA/Ksr4bx2J
hjyx5yVWNOzvpTjNyUgkxqf98BMrCcYGBf2HKkiERZOsi6wclLM5LtsPkzDJ
2Vr05m0xVuVszmXUjaC6w53LtRPiTMGn399wHUFwYu8rcdp9SHwjuAcL9Iis
PON2dewhrtI4oQpzPUYzpS0GBvU4zRRXM9KG0fKkqb59w1PUZHhHhhgO43jM
VvO9w42IdnYbYsTr8MTUfa7sZDNW3nKozWTocFPQOGv7ye9wLWcEp2Zp4WMt
uhFQ/gJ5ohfRJzlauDX31jS5tqPGZ/+o8vEQunwCRkpHOiBLKY1dvGMIJ8wi
OrtXdEKfZXNZq9WgtSdIxMyQYIy+I+NZggYBfsFypbILx1pnE57ba7C6MC2o
kCPFhRCpO5oGQcxmd4Wfl4G5ZU+gcfggVFvbBdbiHvAC98tvLxxExbX+mJcO
r7CgMiRYUaNGSarRRZfYvxDlvNJyX6ga46H7tEcf90I85lrRaqUG3TeFV2nT
h1juWC29UYU4CxVDHtKP4kqlrSRGBUbdUprMn4DYBIIxdxW8vvtyRjxJwG/l
sjC2Ron84nTBx/lyxE7JmmyLlTiw26PNdJsCi6WVbbwQJX7rPpJdN6GA8wM9
/6GNEmtfVBiqLw/A667ZN3v/HMCSzUfHs32VaM4pE4VdGYCnhyf/vlqJ0tnJ
8b1fDaB/9NJzQbIKh5JU7/scBjC8alcyy12NqvfOdjNKBZx0bloDiRrKgsi7
qXcVaOSc7TwdP4iZZy720igFfu7qDuVxNJCas013eilABjTwDRs12CCUPqaZ
KXBvt9Xna78dQh07/lSeRA5BW+J1xUItnH5kXZ0qkuNdc8i5hU+1qAqnux0/
KQfBrx+3OKXDucQk/j/r5Jh4uZ6VwBxGvBOR95Yhx+kcx4aY2mGYbBAyF/cS
sGlztFAe0EMk8xTECQkEdJdNs2f1WJSaXl2URGD066ITvbdHcAdcZ1YQgfqD
wmTmdhLzux5tjHMj8Kj9xLa+HSTOtwgDGj8j8MDb9YPyXSSqgybPMiguY5fk
+wdRu8i+oMt3JZDbk1uVTu3E/s7m3DpnAmd3psjNYqjcMmKesSOBpT77vRbc
pPIY3+nr1gSchLZGsl9JXHEUWWqsCDja9bTcvEOiMMXPy53iD6d5gX6VJFqn
EuqaFhGYX7MlIrmWxPaPjsW/sSAgX+5xzUhCou2SwQIunUDvL28PSLqpXQdf
sM8yI9BjLuQIekj4zE1xX5sS+EPnUrGpj4R7dGnLGRMCtbfsm+OHSPCdX6UW
GROosX6dvmuYBHMib4l+HoGq5FyeA0mC27W+ZQ3Ft0Ot+hrGqD6HzLkdhgRK
OjsFme9ImMnX2bEpLtyYefwg5Z2Hi7yNww0I5Ff4L19BealWYTldRSNw5X9v
2a4RUToj8C8+l3Fj
      "]]}}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.005555555555555556], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJwUmXc81d8fx4UyymhoKaNERklFonpJu6yiJEQilYiEilBGqJSQTYlIaNiS
vfe8Nve6w13uRYPW1+/+/rqP+8fn3sc5531er+fzXnm7m2cc+Pn4+CSV+Pj+
/7rRgbD0SSAD5377nDmaMwjr/umNQqlsmBAjvRf4OfAPSC3c71eNYeubE4fW
DYIbUZ+7pmQQk3uuEmalqTAw7WU9dWDg51vN1OlXHLwZNpYvFSDB40fNT4md
ZLiLCzuTI6fAvGnI/+YyC+FXT65PcKiHx85l8mNMKrZdt3FQ54QjB2Gk4To2
LndMNal/L8bYpx397e79eCkzJfItswu/TkusIIfSoe/fT/JdxEbz84dUc/U+
WJnpzQ6ljCHp3esuvyv9oGbSarxsuFDpvMA5rzyIxBXc1fts+0DaEjeXpMgF
xyaAzXo4ge076l6V3JkEv9Yb2ecnSbg6ejM7q+A50g9r5234lgEaUzDz7foq
hCslfM4uJGPxvvMGyiG1UGK+EmyhshAmyVweUzQC2rvFP77pkJGZvIZsVdwJ
nR2Xlx5poCP3HpUpJ1EATU0Z4vfWXhT8ni9/mTaOXx8eK9fz1jlzJUFFW5SO
G9Ocn09Ws6CRmju0zacSq4TSHYyuTKHo3/CVNSwCZB29WC5XiMgRPfm3gFQD
A6NDs7X1fchtz1zR/ZeMjRq9LWPSXPBJlL3la6lC8ZERy0uN3aArGXeZ3BjH
xpW3dto3E1DxPZZQYMLFdbf4My1/hzBbuvVPW3o63tnsUjigQofTFjGHR99p
8BZmJskVUWAxcrb6TjEHG8OOX330aBgHX+mvng5pxcPzF29fmJnEmz7GRf6S
ZqSaaX7VypmA/F8lr8B1xXA5XSK+7DETTz0NKPnaLEjf4D49oPUZgz7dEjWi
HESYqauaGo/DNyX86GNuK3aTDdWPm5dg3d3NNP5YBj5vfJtMFmsCe+Xfq6VB
kxj4/JFdWDeJC4FhEobHmCg2sjqwso6O/SEnQq1VaVA3vd94J4GLO3NM020v
S/FtbdOD5j2VIL//Vk+5NQl5cYtVBf0kjBey00J3sOE5rHR+x94B3NPaq55W
S4RfyWZzXxUuLIuEVltsY8Ag8cLGJxEkTFWwT3IfU/GnxSGokMzGQx3NJS83
saAvp+6zNTkX0jtezK59NYJoCR+/tmIGIldvWLTzXSZir697de0tC5sEDSXP
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
OLng55vqOY79A7uJo2lEnNK7eddKuRPhUpdkqQU0KOwq6J2SIUGIz1XuV0gP
Lpj50dLKBjG5NHj+Rd1HbLyvRKmu64aZuLg8b98Erq06G5+zshCP+Mak1FeN
wbku6IYuZ46MofxRWoiFNTbLcig5PVjoVi3VFCVBr8P47GwrEydMNZnbS0ch
PnZu4WPnOOYq08NG1MqxITFN3t2Yiu9Ncsce/mHAa7j2WcqZCfg+b6goUhjG
Eb2jtt75+ZAgL2vQe9+FVJddnxkOw9i3e9U3t+FxqHCPppVYjOLx7dqTqQJs
TFY5qUt2vYWxXcgLpjYJmiImT9jylSg+nRcY1FKHRTmaQ9orDnetPhsbXZKF
WM8mT1XOORTKTk1xGbVhxv3muq8aRHzcSLabPD4C04/3d+lUEvHNtp/79rEJ
9EWulRCyYeJz3urtXund0F7Z+rv+ziQWYtIL6Scm4UzbLf/6QhU2rE3cR9Bi
wP1KstHvqAkOX6WZHFsgYJVvvpKjBQVR8deISQHNKCpymFLpase4Bok3njmG
sWmicUsQGa+8hSieW8ahdjPwvI9HGexa7RsWnHtBqVoY3zbD6UuJa3frJsag
KLVe3CaEhPLXLGtSdDFa9+rr5AzXIOrBI+qrrfm4Gn37QOnyKGh31HVLvumB
qs0/u+9xbdikTEtbx6LCLl9x0PFyNXY2qWZu4ybgV3PKmfbaAvBuO+ah9GWS
42GGxpUe/SiWDrs4tJKNWzN/6Otz+rFFI4O70WgcssH3Hyu+LUVW49kUD6UB
dD+OTiw+TUVL9ZW2sBQ33IsUik7OZYOj6lTe5clgVSSUvLnMRtART2OhJ0MI
+THF7W3cB4M9+dxVTUwsugkz9yTTkLjtbd9Nrl508xVKKVb0YE9F++s8XyJG
K56pNpmOIXfo2uHNL0jQNtex+iFTh02ZrUrP/uTg8Is88Q8aQ8gokKylE6nI
eGzHvmhIg0biDcv0kiIk/arydtL9gNs/nff8TS2Graln6br7ZDiyrNTcL1Ow
55kffR21E2v4bp8M0CrCdKnDtttVnH6ZYtWrLo3j5CotR9KebmhtDuc6sY0M
sxC6roVKJ7ir1eqc91GRHvasoZpNwIB44C45vU4cPvyf6EZ1FkwFYqrnSyvQ
3PDvxcIbNgr2jXb8EqHAKe2xx8V9Ewi/YWNq5ZeFz9xJATs9xyBwr0JAUIGF
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
QnfCr5NkjMaGhvXc/IbeGjs/0rJvYJIyPp03HsI1As+zVxbR+M33I3Cyexjt
At/+vM8k4Mg7o+P7q3rg1LaP7niVBbptXovFhx5oBZnlROdwIOElN0J2Z+D1
CZmjGfu4ua3fW8Yvz0TZg6C4ujRufthsM5g4yUGnWphxjEwaRkce8isWcM/T
r3CJQ8AQcvaZjiVzeV/pVEBfct4IsBD06KXLAL5810wdvUWGv7anlGo6HfbH
p6vHghmIvfL2wu7gVpj/017X3DCMvekmoRt5BmGnuiysKZwOpcDk1aEHJ2H2
0ExIJ5eFjrsCuj5zmdy+aEq7CBZss6JPNfUPYyNh0SRjCRueEnf2qt1vRP6L
xGwf6W/Y9Wp23OgECRqJ+b5NSdy9tugdfWfYAvcJj33HU4twLsFzUOkNCSHe
VkonPJswOr/Cu+08E06O8nPZVynIjPv5MvtQHZ7bSZhmO5PBPDGXkD+bhJXq
avu6aibgESTRQtjJxqGGrssqxt+gdq1DWjCagmCe/6JXKbJxdUUpn1xZNYoW
L4r98mlBSVvbzw/PSUh616VY/j4KH+WjpSkvqUjEzo7I6k7kBjF0Ntf3YY9L
qYfIOAMdb96T5P9WIGxmxGRpIQU+VUsqkw9UYctYk5RvxgTk56Wvm2QRQd21
6hMpdQjelva66i/a8f79m9dm+pWY/VLtNPatDz+3Wv8ov0pHz8Lk73/ujdA0
He7lk+7D1IsAgpTdEOJVHD78OD4OTdnJj1M8JIibPA37WzOIE8+zjV8HdcDm
RmUavWoIHnoSyZdecjAim5L3lsnNwQ0H15prkeB7ak9R1L9KKPhsXXryIxkQ
lejdG0jAZpp8WtraYYSoDsue8R+DcFbtp9zNo9isfr4wkUiD5ROHp06GTDw9
n/jvkEgGhN99/jKv0QTH9qSQdj8yGJ9ESlbbE+DvzqPeZdSKNwl6M3mbn+C2
OztReaYN7zYYG44O5QG7+VVe6pGweSV/ROSVYbQ+XLzWGkHHxa0/Pqj/mMSW
30l39n6rhJh5/8kf+iMor9JfKXh6GKoqBHXDjFbE3x29e2uKA7OE+i25/AzI
NAsp6b9joTxsa8G/T5Mwvmh7tWInAZlRjVE5M31YeUWwK6m2Fpdl0o94nGdh
ZTi/moTdMC4kfg+2zv4G7xqJsYFtJPT/VV01nT2AZ+miqqbejVgnoj5+b7Ya
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
LYSGEPuOZuF2NiRczBvf1DLx9EdH+N8HRfCY41bMRfXikOCaeBHPUWxOXN3r
LshE+l1IFlD+/3/4T70v4aAytLni2LqvcDh+b6dG8wMcMPMo+2LPg3IFPfjA
NTtMfHRHqDQJh+J3Tp+NI8DY25awTqYMrNSfgYpKZLQFrTnQLz8Ew4NSN81u
0RFd0cCdud+PIVXZRaqHq3F48fd2K3YdWgjBf8LdaRj5CYrAiidQuTy8ymD1
INbU5TbIWnSg9NYOJWoaG38etHSl8XPq/Qm/6OntmTByqGoU0aahq2ji7utt
OVBdu295aUgtWIkqe4kryqD66OqtkhYyrtw8lDBono0tvc7Lpvh93Ry397pw
dikuKiSZXrj5AVt3rowf/EJEdulm20JGDuxk1W13vByBSTJ3Zd0WEki/ZrZE
7GUgKzfJssCXAq7IRuskfp97F90pcbLuw/4VDlIryzKhlHfLeDs/P0ZNN236
zJ/DkCaFBgWxfFi7L9riEvEDOzTfeob207D4hZLXIzf+/moanNJN7EHXljV1
OzlfwVBe/TUun4jI30NbpZ2p2BeqvXt4jopKxRl2TI4PSml/zuXQu3BzX7dP
z81RLHmnK5h2mIIT9yLXbhAcQnseq+6QWyu2hv91ZarlYFDN1ndy+RcYttRf
WmhIwZ4tJ1c4F43C5KOGgtsVOu5uXSqxzYsCjRKrnQu8SZB0G/2xu58DF3tx
wRIdNlo+vnv2wGMU3w4q2jamD8Jv8s/u8rkaHFR0KemNyUS4tWza+xf1QCGB
EvCpBxMrlV5IHSYjK3FFrUpJNw6tS7sgZTaCN02qCWmHe6C+70y3z9t2OEZp
Mfey6PzeSPh04TwTmW9Ny4zkORg64H8hriAFG+1vvrxrRMVZB9PS+wZ0pJxa
eUnMpwW0veWMsyWDaM866CM5yMFEs5xv055c6Eprbj5wiQyi5lzWxH0C7BWN
Lhw2yoBERKJ0hzkBvn03CdeMaiFMDayMEO3CwkcnmIoDPJzhbLNvt+4A4lWD
ZfYwITYSV61uQIVKueGDFf5khDPK/YcWMtHnqHr9EX/f2Le7c0ndfajWknzZ
8YgF93tbm31e81AeUe218BYRj8YvZXzm51qCjd/ccbUqHLt/Xq8zugnZLkH6
Ads60DlgQUi7zoHVc5e1C4ub0PLSNMD1RgU2Ja2Y9ufzN9U6/bxjD99rT7zY
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
le89aalubBS2u3isnQjuC/OW8+z1XfPklsaczBRk8vRyFHPJSLO87B9No8I6
sdvTy74XOdSeedW9M+htkHGt3zAEy4EzvUslJChIkqcD0rIheu2EWW4RGX6K
EgElp5Xw69rE6/U/xtAo8qlMxL8Lv44dXtEg1A80xF1x65xAhEmd+Y49QeBS
e2nmv7YGqxTm90SUlMPv9a3HvL968UTH15LImY1vGSc3yeQxIf5drM6oiV1n
s6V7agVJUM02HTRl62FfQexVC/Z4djHucLVrdqJa6kSy971ehJzh0av0ZXOD
tpLVc+dsVIpWi1381gXn9ICw0UwmzD7Qa3dcLoNC7af9Hr9noHkgZp9T2QQ6
14jHGKQzceBky5ev+pM4e+TSubkcMnaf5ss92daCHV5zgdl5vTgjkP/WsY2E
MymKLvpZROhe232cRShCq4smT/fYDP6cnrIeCCDi6iLTYs8SCYfNE7g31Nei
LvvySlMHFiaMjX751X9E+aOHQ2PtzXCNm3M3aWNg8mNepkQpCYZvfnnf29uN
SYMRGbE3VRAVEphVvEzC3YVdW9TWk8Fh8md78956bFc7ZL01swqu4cfuFf4M
QRRj3SO6GZs7QuaED7kR8Wj/g1DZmWGsvXgvTO4mW2cNd1pI8w7Dx+uYdwV7
nvb3fTpPaTJgdvpTG99uMp5Yvj/nrjcMQYdMxQ7VAeynyQ8fedOBLnmOVp18
AmY56GcqrMbw7nS84DhnH1xtou6fMU+E4av1eiwKCW/G4FzlTMfCh0s+z5qT
cL/yBFMii4EuSmCM7eEQRCaYPuZJrUWMd5hH7Uc6LO0OXQxj+6RtyMsPy+w6
CP0WbtknOISY8dPtkro9uJizuHGleA+eLT/gPXmlCR7nHuU+ezqDtyNtTTHf
B3C/Z+b+w9fDWPHLXqnqLgHqEvtenRohQufAes7vRb7w7vHa4/ajFvsb7a2c
C2agRi5V2KuRhx9Bx0+4GE6B9ChclxpVgYxHTYobY/rR/musxL+qBVcOT/8u
//+5TI6v3z8YbMV+/06XCLc+NJ5bXl5jno6C3Auui9pUaPePJPoTx3DVsvRU
7PM+eA90f3pROon2F9d29miOgH66Zqegfy0OtK/2WCqowiq/qwucbL7ruu3U
E/chFdW7HgXzRFDQ/EePfkxtEkKXbbX/TBWjXMJeUIaegPjsLfU2EhOIVBx5
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
NhhY1eHbcMXmPGs6dqQW6D4rmYKkZ1Kli1kqTFzj7u6Pp2PnEkLiST02jn1i
PJKbKoDNznXKXREsBFNaP1isJyPNW1R+8QgLcRULS+75k3B/7q6WRSMbgdus
k9W5+as1vqvrVBMdvq/b+aUOTGJbjGuvQyr3fCUXZu9tnoK0VLbiJG8PzLof
ukt/oGNp36mHryVYUHHTcjx8k+vTjufe7HxYDb2K5IcLtXSkGEZh2X95iBS+
UjZR1g+Nefk1GSv6sVGCA09+Dux0JXx2Z8fBd334hAYmQPtztYb//hDEEtzX
Ku5m4mXrmjYN1RJwlOsPEGXZiODVc1vzfRxTVZMbbI070Rog8kPTqwoqPhYf
9QS+YtHGxEGFO8e/jBJ5Iq6RsFko3aSL3ot7qRK6p5d1YzyVE/PAYgBJdzaH
3uJen7T98uNphcNYQ24/QOGn4QnjSczQnlZcKvJee2eRe42m0iU7c/vwoEDt
C918AEf+BcUT6hm4vNNzJjr+HU60XiOpFvagRofv9wEmHQmLGXcLhEZR/tdp
ydlN1ehR6R5v621GjyDKztUxwOe7j683mI2SjR9yZLYwsdb8Qa9s5WdcX+ze
mSNDg6Bak87h8g74v19hvfFKJz5vHQ7VtKPivHnI2rVHRxGl79J9SYUJ7ay6
/XvGRqFPzBlqFejG1vo5o/dRFBQ0NyukU8m4p9kpoTU+Cnp9Y8ip3WzU9BdO
WAz1wL0Nzxs30fHrV9Ed5R/D0LURfbe/kwRpefPbM34E6MR2vRnZ04voP09+
+zt0IXrnwZan3BxpKLWuOLKYDNXEKyHKwgPYVr4/4uC2IfzXPWKuvaIXI1KH
X1HCmXib56v29ehXaGhe8jzkWYlB/bAou80kWBF/ipSRh8EpDzS26mtF9pd9
S3+7TOJahqf5b+VuBKU9Kv16jgr9pIgU5osJVDjt7Xb+3Yg3G4hqZgN9OO1z
ImLrIDcv95pLbrtOh+dGzpfKRzSs2X3e91sMFUGinV1xztz8JTgcdYWbf04e
srj59/0Y7in57jl/rxe8RKrt5po2NGbUyo64FSB3+UO/+T85WB2zjpZf74um
QpbgYbU+8C3SRrfJctCg9OuUyQQLBR13Us6qDeGL87xv1U4W+EP8+V9kU6E8
65+YQevA9ldih+4IlCJ75TivqFY9hD+Whzzwr0Hwspvt+Rez0c8TuuaJOA0P
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
Uu+92ApEyrzavpTH1wLHhdjXzozhf/x8dD0=
      "]]}, {}}},
  AspectRatio->1,
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0.48},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{0, 1}, {0.5000000051020408, 0.9999999795918373}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6191189923345003`*^9, 3.61911901563124*^9}, 
   3.6191197806512203`*^9},ImageCache->GraphicsData["CompressedBitmap", "\<\
eJy0vWm0HcWVLngL3UkSYEaDARtsl6vqdb963f36Vf166w3dvV7/6n/9uzyW
wa4y4AHLYAE2shgMNgaDGVRgAzY2gw0GgxBIaEAgkBBCSCDdq1mXQfMsXV1J
90afyMyduWPn/nZEHNFaS7I5J09mZMSeh2//P1/+3mX//K0vf+8bX/3yJf/3
d7585WXf+Op3L/kfV3yn89Gkv+rp+atFnb8LL+nx/9/19NA/xZ9X/D/Vf0T+
/1eK/znNufGDbs2zd7sZ065wV0yb4e5+do07OF7ezh0ZcrddfZsbOlL+57EP
n3bX/svXe3rd17/+9Z5J7utX1t/1/Nfi3ymp9+srLp/EP+r573m3OKW4vL9z
+QH33jN3FZdfftX17vbHl7rtYxNd3a2vc7PV7uk7rnPfvfy77ro7nnarD4z3
/F/KYk+Bn/WjR5Zf93y5+J9PdP454XYvutVNm/mkW7ntgDvw4Ur35Mxp7rZF
uzvfdP4c3+OWL17u9hwv1zpxeMjdP22au3fJcOe5mzdv9v9u3eZGy5fp+S/F
v1Nz7tujHcN/Kz47J3t9/vpd83/qrr7taffWlh1u58g77i93THPXP7HJjU64
kkDOzr/txEH3zr3XuOt/v9yN7Njqlj16nbv63nfcwQnX83/CQzhVXZ7x3L/i
hzPYuXiXmz9zups1fMRNlMtwR4Znuekz57tdJ1xvRS2dp7hdi+5x11w/y728
6bDrHEXP/5Fzi0lu4sBb7ubLv04sVf37LTfz1T3F7f5L3u3c8Z1u7k03ujnb
j9c0emLnPPeT6Q+6TUeJTxNvN+Dc6AZ3zw9vckv2llQ2vneJu+mH97oNo/ru
96fdPtjtzh1GN7r7phdPqRc9vvc1d9P0+9zGUSLTzr8Tx93uVc+5X11/tbvl
oblu7b7jldSI36OXVjY24p6acbW7e/EHbv/Bg+7gzrfdLT+4xb2985A7fGzi
v2bdblKxQff+8Eb36p7wuhuvudutH6X9Tr0f2vB7Ihsev7/c8SPD7vZrbnWr
D03Ul08cWu1uveZ21zkyv5Bixyc6XLTmpX9z13//VvfMhuIsm1eK3KM8tf6O
2pjjbv3hnW7RzuN86f8t8Tb1wfnrvv1NN23WArdh9xF3dP9W99pD090P7nnb
HRh3qauqN7qjNt666wfuukeXuS3bt7ilv7vO/eCuFf5W9kZH7g9I+7XWudwf
kuX4Ubd7+0534HjJLp0P3KF3H3LXznjObTvevF3kdrTnXtrtWfIr98Obn3Mj
e9e29jxpVQPFdfdPv8E99ef73A3f/aa77LIr3PQ7nym0Yva9OsQzuukJN/1f
LvVizl36L9PdE5tGC5JKoWx0f1VyX+PuXXu4ljyH19zrrhFy0vPZ97/v7l8/
2tx131J38zV3Mb6N3q6fJFNH5a966Fr3owefcTf8gCvSxBV5CtjtFt10nfv1
ug6bTYy7Yycm3PiRrW5o3S53jPRn4t06uz221T163bXu0bc6Yu7IfvfBW4+6
a6/9nds6RoZWx9Y5uMY99/vfut/+5m73/e9pAhw+Rm661/0Lf+qu+tEjbsmG
bW7b+iXukeuvcrcu3OWVa/2KHV2+6t6r3JU3POpe37Dd7dk27Bb+usPCd7/p
9o83r2jfrZRNvW6iQxh/+tG33KVXMtpOX0uHwfYtu9td/aOH3OLhD932zSvd
nLt/4K79/VZ31KWupdnuEffotde4BxatcR9s/8CtXfSAu+baR90I2+6J43vd
hpWvur88cL371rfFdtuPqbb7K8TdJ/a7dwMDc7XbT8TY78YPb3Bzf3O7m3H1
le5fr5zmfnL/bLfm4Ph/t389ueKCYx+95G69+ufMJI8+0E0cdR8sfsT9/Prv
ucuvmOZmPjDXbR6diPy6jwmGw+tfcLN+Ms1d8S9XuGkz7ncvrC+NqVowHPvA
PX3THcWiBuzbVmZ2QbOK4/PJinpGx064TR/uK0TR2PET5xYfT64/9n87Hxf/
vXbLHvfqO++74a17/GeVROuV1xJdDnUu/6cfP1f8Hdl+oL/6eO7SLfXHb675
CNxkkn6TKcrHG97fe4r/WWd7/Er9n87XHWnW+bLzWedXrvpTSzh62IK3RtTr
aGv5Y15f/SEtjhwcuUnVo7U7nmPf8XMVbyjb3lO+XK97d+MuvhWTqp/IO/qT
+YS+e6coP/GLtLerdTaTq9uIk3Sr1u+sb7Pxg331bfqrPfW36ex48Gj/p3nJ
5gT9Ly6ufseXm/I78PZEUiql9WlP6RnQf9KrP2DQpllxE3NzK/ZsVuXZk073
LEHFC9/aWu17X3GNIJTKGGqtK8Kn+w6OFdzu/x4aHQPvDDZV49PO1eAmZIyw
jw22nFQLoyfnD1fX9XopUAuoecu2yJ9zEq/2kfFlXCL8bfFvIxeHtux2wyN7
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
E6YHojjCnLJK50Mlcr4lOosc2rwshNT15ijCLFVBBqS0HT5IfazftA9lyhMa
V596FiQ0MCEfMFBV931xWdPUu+LRnYx3dkpQ96tLETJui/I4T1ngyLPq8fWa
DO0L2QBr9GoirEDYLolPFwDh8cuHYgoyyQMNdUeRIwlT0EYR79Ia+uA1lSIy
MIvQIntVUlvjhDdA3Py8gMwqdxgHN02MIoTngrJIhQtwEFngVhs0q+/czFG3
5c4r3eUXnu/Ov/Byd+WdW9zRmfbZjk+6ZRctc5PHe7s4c2ybu/uqf3Jf+/KX
3Ne+8T1348ODK886/7QyehnENuSMkBI3KwnXbOW4u+y6Rwaq55CUuDw2mywF
52Fy5OAN4aFyVTJakwgm9rXbwFHdrWaGM6dBy0PmbxtwZtjYWUUoUm9ZOq2Y
8ig9ODgxzYqEMgvAXxEdbZIsjQUB2o6Aq7C0eTlX0k3Y31KauEOGGI2y2TfW
TOwmVB2pZeiUO7Ruqbtw8XL3zP7X3esvPuOWL77QLVt3yNWrcfJVt/Ghje7V
k92Kue3XL3QLr1vrnp864F7c9qD72aUL3VVPHnEDVeQL+DOIC4h3St4GcdVU
vJ4vHjiagu5K61g+kFy4/gxX0ckDT+2tJQogQM71yZQY7cEFJFBPjOmzTnMy
czNvR/Q6AltrEKMJmAgWfhp4SK+LrfppcqLx5KQDfpNVAFxqOEiYb9KlW6en
74RVfnYBaVpZ1FJGYII7O7wKGJyXUwfdmsWL3LXbjrvZ+g9n3fFt17pFi9e4
g6dakR58bfaUe+PgAXfk5Gx7/Vl3bPI6d/G3HnavzpiST/JaUMSp5B86Mt2x
Cv3s7s1+0UvGJCBfkmkB7SW1CPB8Y0mlj6xPuvSX8Kyr0ItHQ0/M8Dli/OI6
Bs2gCL/3cXyns9ujgCB5/9WVG3ajO38IPCQJNYi9MJP0b5MWpyCwE44OEVqE
3TH7NPC0qGvSjxUalXw7Gq3zZo5xv7ID3uYyqoM+vdNdvWiJW394ZsSrlpnD
j7gli652O6e9OE0M4ontbuV133QXfeVL7qsXf9fdvPJud/mia92uN/2m5c9/
LAgOT9BMuKYllT70Fbc8js4hqzRHqiGV3pIFOh04g18z88HbuyLhRzpNJ/tk
DLD68d0F7VKJeVox5f686EFQ4PG7+PUX4I9lrkPp1upuSFERC0OSKWYpMnFQ
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
9WEnOBI6FVEKO927qa2e2ltU/U9KWBIdLnmGA+lBcj+T8KF0BjWxYLkTEnKr
i300oVa5gPJ5CpePTTU1ajAaKss5E+CZiOWHwJMT/AwYFLYnrGCmOqiGDHbH
PiRYq35+fvfm+goVrBNaEW5cNSpSVpDi2eeQHpG8Lys37A5sVNfzihjK4qyl
/++2MYUf0bguuF0ySOYfxIJRRyNpqPiQeC0cAWLRg4nhOd3K9d3NWRW9zVWL
2g/Pah88SG8+M1XvlTmzKp9EAVWMqUS1/GGXSbSqZaT+eKw4xFSPbEENQRi/
w/sOHK3TJZ+97G5jh7m3b6ea7f4TMuyPTNIi5WUJhmD1caIYiZtlepg1RDzZ
TSSKGeX8wvVYefjmH1K3UqX55rwc7IqjxIv/HbFtXnjNoCB8bunUV8/M1AXx
IEm8SyAcEtqRxSEMOqb8kQekQ0YyxGzZTRvqe3z35g0lPowZ2ye2aFRzoZsF
zkU6R4L2OVbGnAiTYxVDUJUhEDFghUj30gQr6QH0WZ0So+1jsmwaS8vmVAbk
oSDvGuIJXOeu9tGorqaSyWMZuH0UL4QpyOUdEHLpCW9WgiktA/wyZFq7h1X5
3f5Xj6GF9JxZCq7wr0SqCgr4awD6bYPn+ZiHKbRJ307Kq9lojK80WDCdYqm+
zOjhbenO4j/JyhPymVo6UjHzJEUQNo+RxiPwvPpvUjj5kfxD1eGneQs9KTK+
qj+HGOVz2o+VWCA/n9RDGOLpZf/UzGxdmV5d5fYHXiCP8h5j26cpOWVZsxlx
NkxG/9zSSkQXQwqt07MVkBLJIo0eYnKy2QeGa7AJQk8UFZKb0fbfKoIpqLgh
DTRni8dOuQzTnF2PHIlz8MdlRe+oN1l5iMGE1lqqfGyx+okGLatYqXTFsHoq
QrJRxkJvShK2p9M2bzgJxMk2l/lZCEcnTUek9YBsPMEw0Q6TPLgVHJKXNOWp
P+LeKWSDKBP7QXaY9KSYrSq5mjUhRnkXyR14croQpRE0Cr26xEn3pWUrhUXP
ajSUc4WkrmGOHAKITww1uiGRBiubjI2EhuQZSEMKkUbiRxWQ/xADSnR/WW0m
OfcmoWL6tJ2D/1zbZQUoEVeDvFCZnJhdcKZY/GrV1vrb//D91aZYqMcjKdBP
lh9zk5qpwD9HLmu6ITwz50FKYhkozqJC0pU4NBN2FAIQg2d22eaaRz4RKWsC
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\
\>"]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"Log", "[", 
    RowBox[{"1", "/", "2"}], "]"}], ")"}], "/", 
  RowBox[{"(", "0.01", ")"}]}]], "Input",
 CellChangeTimes->{{3.619148903027884*^9, 3.619148937976324*^9}}],

Cell[BoxData[
 RowBox[{"-", "69.31471805599453`"}]], "Output",
 CellChangeTimes->{{3.6191489341285257`*^9, 3.619148938496986*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"1", "-", 
  RowBox[{"Exp", "[", 
   RowBox[{
    RowBox[{"-", "0.01"}], 
    RowBox[{"(", "69.3147", ")"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.619149080889895*^9, 3.619149099152096*^9}}],

Cell[BoxData["0.4999999097200192`"], "Output",
 CellChangeTimes->{3.619149099951138*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Solve (1/2) == 1 - e^(-0.01*t) for t", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {"Result", "Results", 2, 2, "Content"}, 
      "ExtrusionOpen" -> True, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}, 
    PodStates -> {"Result__Step-by-step solution"}}, Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Solve[1/2 == 1 - E^(-0.01 t), t]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"solve\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox[
                    RowBox[{
                    FractionBox["1", "2"], "\[LongEqual]", 
                    TagBox[
                    RowBox[{"1", "-", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "0.01`"}], " ", "t"}]]}], Identity]}], 
                    HoldForm], 
                    StyleBox[
                    "\" for \"", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, 
                    GrayLevel[0.6], StripOnInput -> False], "t"}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None, None, None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Results", "scanner" -> "Solve", "id" -> "Result", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "2", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Reduce[1/2 == 1 - E^(-0.01 t), t]"}], 
       XMLElement[
       "moutput", {}, {
        "Element[C[1], Integers] && t == Row[{(100 I) (2 Pi C[1] - I Log[2]), \
\" \[TildeTilde] \", Chop[N[(100 I) (2 Pi C[1] - I Log[2]), 5], 2/10^5]}]"}], 
       
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              StyleBox[
              "\" and \"", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0, 
               GrayLevel[0.6], StripOnInput -> False], 
              RowBox[{"t", "\[LongEqual]", 
                TemplateBox[{
                  RowBox[{"100", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "(", "2", ")"}], "+", 
                    
                    RowBox[{
                    "2", " ", "\[ImaginaryI]", " ", "\[Pi]", " ", "n"}]}], 
                    ")"}]}], "\" \[TildeTilde] \"", 
                  RowBox[{"100.`5.", " ", 
                    RowBox[{"(", 
                    
                    RowBox[{
                    "0.69314718055994530937448036556070007919`5.", "+", 
                    
                    RowBox[{
                    "6.28318530717958647692528676655900839987`5.", " ", 
                    "\[ImaginaryI]", " ", "n"}]}], ")"}]}]}, "RowDefault"]}], 
              
              RowBox[{"n", "\[Element]", 
                TagBox["\[DoubleStruckCapitalZ]", 
                 Function[{}, Integers]]}]}, "RowWithSeparator"], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             
             RowBox[{"\"(\"", "\[NoBreak]", 
               "\"step-by-step solution unavailable\"", "\[NoBreak]", 
               "\")\""}], {
              GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
              LineIndent -> 0}, StripOnInput -> False], TraditionalForm]], 
          "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "More digits", "input" -> "Result__More digits"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Result__Hide steps"}, {}]}], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/mathematica/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox["\"log(x) is the natural logarithm\"", TraditionalForm]],
             "Output", {}]}]}], 
       XMLElement[
       "info", {"text" -> "\[DoubleStruckCapitalZ] is the set of integers"}, {
        
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/mathematica/ref/Integers.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Z.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
             "\"\[DoubleStruckCapitalZ] is the set of integers\"", 
              TraditionalForm]], "Output", {}]}]}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Plot", "scanner" -> "Solve", "id" -> "RootPlot", 
     "position" -> "300", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Plot[{1/2, 1 - E^(-0.01 t)}, {t, -300., 300.}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{{{}, {}, {
                  Hue[0.67, 0.6, 0.6], 
                  Directive[
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   AbsoluteThickness[1]], 
                  LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQzcqp+fn//qIDDGDwwN4rd5XbiUQEf8JF7VkTmBH8
Le+U5rubF8L5E6t+unZUFMD5FnqHZvFW58P5jQJVqeFPc+F86wsfirdk5cD5
6pYBdnEXsuD8gsMXTzbbZsL5WtpCM/ccTYfzxWysVZz00uD8Ei3lz7c2psD5
ela6ze9tkuF8qc/y5wNWJML55Z0X447qJcD5fJOuh/Bqx8L5z4ID8trZo+D8
BRfc+DWkwuH8/fP5NJLeBsP5BzVDThz6FgDn+/NcO1DZ6A3n93r1fI0xdoXz
Ff5WF0kttoPzd61TufngoSGcX6YvWM76VBzhPwOdIIZzYg4wfrPU1OW3Y43g
/ATbFTJz9e3g/FBu68iaelc4v7Noprz1SW84/49hXXbY5QA43z8i7nwpYwic
f+DwgdV5P8Pg/Io391gLHkXC+acPab+4zhUL51vf++Uk+Tcezl8c/GdSwvRE
OH9H1B4HRdFkOL/QIUo3rTsFzv9ewx8Xp5gG5/PcYfV2npMO57+bKFxz2ywT
zi9R+//6+8kshP/uakswOuXA+Tmv8zv23syF8+9Kf92SFpYP51eK6gicSi2A
87M8XqZbGRQi3M9zXFbxLYJ/hauiY0JYEZwPzS9wPgAjCvrj
                   "]]}, {
                  Hue[0.9060679774997897, 0.6, 0.6], 
                  Directive[
                   RGBColor[0.6, 0.24, 0.4428931686004542], 
                   AbsoluteThickness[1]], 
                  LineBox[CompressedData["
1:eJwB8QMO/CFib1JlAgAAAD4AAAACAAAAAJrOvp/KZsD2x9ZLSNEUwBY8OyRC
LmbAypPStJmWE8B0KiPz2rFkwMJH5hPI8RDALjotg+88Y8Bm3lPd70cNwBrz
H89QqGHAzKIvAljaCMB3idFexS5gwHGY1ldeMgXADpLXVA0rXcAeRYsAFLEB
wOZTUG6HB1rAgHBWHB1S/b+g0EYPKBpXwOyAkzElUPi/v58OKGLtU8BcsvZ0
VoHzv8EpVMjC9lDABHa5Eq4S779PDNbAeYFLwNBFihdyeOe/jUqM9VwzRcBq
fD1ECubgvyD9e3Iaoz7A8Bfha3Hx1r+6riTZ4OExwNCYTjxJEMm/di8RdwXl
F8BgZwxpYISvv3QwLFIAzhZAcNnlWJ5frD+DGpWn210yQIgTw6cHesU/YD2o
HJ0vPkBwOPfy/KzQP1ULO1l8f0VATIzfeqFd1j+JcpkfO8lLQNZXxj4uSds/
/DF+a1bTUEDSpJ3MdVnfP09YXs91AVRATiRO1e+f4T/Aw8CrbvlWQE7ZBOf6
O+M/eOzeBXDiWUAGArX3F6PkP8vCK+jXCl1AOv6mwET85T873vpCGf1fQJqC
vCBJGec/o1P8kmCXYUDCZ6bolCroP7havEAhFWNAIbv8mhoM6T9xQFotZotk
QEoqOeyQ0Ok/93wPXl4hZkDY3eWTOo3qPwzcBUtDnGdAmFrAPPko6z/ukRN8
2zZpQBVz8lotvus/dCb/6/fJakAIhyhYKz/sP4ndKxgBQmxAVPkmMrKp7D9s
62+IvdltQK9KCV3mD+0/3Rv1tGZWb0CEzXomQGTtP3kVLBDKZXBA+2G7xcCt
7T9qSOlnOjBxQF0xbKxg9O0/owzHHSHtcUB2J6I0sC7uP5SUHJls8HFAAQUh
QaUv7j+GHHIUuPNxQAzXksyZMO4/aiwdC0/6cUCDDl9hgTLuPzBMc/h8B3JA
AfT/iUo27j+8ix/T2CFyQF9zIBLFPe4/1Ap4iJBWckDFxZPMXEzuP8aSzQPc
WXJA/mdzOEJN7j+3GiN/J11yQHXbgCsnTu4/mirOdb5jckAbmCOo70/uP2BK
JGPscHJAlsV1AntT7j/sidA9SItyQJLaSnJ7Wu4/3hEmuZOOckChKZJuWVvu
P8+ZezTfkXJAOcnx9TZc7j+yqSYrdphyQE8d8KbwXe4/eMl8GKSlckAb/JyY
XmHuP2pR0pPvqHJAZpZb9Dhi7j9b2ScPO6xyQIiAG90SY+4/PunSBdKyckAL
YpFWxWTuPzBxKIEdtnJAnhjA551l7j8i+X38aLlyQI+d4QZ2Zu4/FIHTd7S8
ckAWATK0TWfuPwUJKfP/v3JAyzPt7yRo7j+8v91E
                   "]]}}}, {
               GridLines -> Dynamic[
                  Map[{{#, 
                    GrayLevel[0.7]}}& , 
                   MousePosition[{"Graphics", Graphics}, None]]], 
                Method -> {"GridLinesInFront" -> True}, Epilog -> {{
                   AbsolutePointSize[5], 
                   Hue[0], {
                    TagBox[
                    TooltipBox[
                    PointBox[
                    NCache[{69.31471805599452, 
                    Rational[1, 2]}, {69.31471805599452, 0.5}]], 
                    TemplateBox[{"\"(\"", "69.31471805599452`", "\",\"", 
                    FractionBox["1", "2"], "\")\""}, "RowDefault"]], 
                    Annotation[#, 
                    Row[{"(", 69.31471805599452, ",", 
                    Rational[1, 2], ")"}], "Tooltip"]& ]}}, 
                  DynamicBox[
                   Typeset`ToBoxes[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = (
                    NearestFunction[1, {114, 2}, 3, CompressedData["
1:eJzt0VtM03ccBfAK0qKoVOQiyEUIKig6QFdE1O9gQwFBBtOBgnZohAkCUrnU
MG9YWW1gONGMwGRs3NV2awc22NJf2x/YGpRbAbn2D3QgBRtgMBiKY12yxPc9
7cGHk8/LeTrH8VRy+BkDEon0Txj6fACW40tLBAr/+vmDnXQCMVtYiXESNero
MBmXxQwge2myuZdtP6pNaDAyHehFMTkeUz1ZPWjhdiYbQTcqXaO2LhjqQveC
PBiqm52IdS6G6RrYgS4Z3s9g6NrR6astzl1VbaigfqTg+/hWJCVcVj10akYu
1I/8jhQ3IeFWdvywRok0jfyNNNoTNOZ21xM9wsj8cjVtxzIZ8qRNupXPiBH7
E11rHVOIrI/wbh2zEqC6uUZTpfN9JOgbydWyilF6mG1N32kW+nFlZqc87Tq4
DC+zvxb5A9hOiRb2yKvBv7Tn+eFIAfiFmBn+USuEHPqLq+5CMTQetlv9qZkM
XjlaXG4vxJCaui0mz/IJvOinhscqlUC/uPclJbgJZNu8ONioGTavEI+VBbSC
rTjB34jdBksLBtWM4XaYC6s/2bipA3p20TdsYnVCUgR1rVN/F1je+S1yuV03
PIgqqZxh9sBn+64EKOt7gXsy0WnPYh/MrPzYsO7oAIS0+dDsCtSw39j11ppg
Av79BXDaKuoQQ/V+z/+453IfE5n4nhrEZb2HokvVsJ15MaaIpwYTB2GOdaMa
FOc8NRa/v9t9LuVPG14YAdw+RXlIBAG2P8eKck4R8Ppo2ejKiwTUljrso1QQ
kLR6UlHxgADnDEn4AT4B+UEnvrwhJiBlujDfUEXA1qh4+9JuAgYbvKv91ASE
FnRLrmkJoBhUBTpOEiBNyOiQzhLA7DxA/+L1u7+ty2cXtzyree//1ODN7WiP
6QQy6Ppmv0e6Fl2PW++aTB5FunWFNo0UDfJNWiSRtwyiK7l5Nom5fYjhv2Le
cqkLceacQ0+tUaG87boNZwtbUFON62Du8aeIub61dtyjAeXOS2aNsyToTZqF
udt8LZpV0Vi57VwUWMMZNw8qQa+OSzgtmSy0dLDnreJ8FghUhzbmjxfBqymb
dENuOayLCOAkmHHhebwuu03EB+0vgg0T9BoYifvLuGXsEaRo1zJiSXWg9KK8
cVc9hsgVo6ED+WLwf2TPjiBL4EqS74W7ZxGY7PW2OnFQCtlWT1JWKaSQvm7I
4b6vDGh3Lk0MV8ig6XPqmT6KHKZu8634UXK4IRGTdCVy+I6qqjymkQMjIXti
mw2G/mfE/ulADDN2PPmLDAxDqwWZ9fcwJHhrJNHFGCK0u3hv9F5NHP92dwkG
H4tEBu8nDOSqt/WcSgzRJeSHZD6GJOVGRZHeGGlNvrsAg3XqpO+xXzEsprvP
V9RiwBeKx3Y+xkASsHc06P3qENPliAhDEZvifUGMgRnt28aVYHjpLRD5IAyj
vrFRT/Wq3D4UaaT63s3izPMyDKLlY9OLejmVu+1vyjE0xwpJFhjD39fdxzU=

                    "], CompressedData["
1:eJxF02lQU1cUwPEImgjIorIIAqKDCooW1AYB5RZaFHCrVAsKSsERKghq2MJQ
BTHakIFqRacMVEqLbGrSkrIMJuQluSxxEFnCaiBPSEEWGaBQqIKl6Uzf8cOd
O78vd87M/Z+N4ZcCzuvQaDSW9vx3f4TMx5aWSMKyaHZx6/MKFPBt8+PdoR/M
buHERErU4I4OgzFZWD/YVnrJ1NW6D1wZXbfCuP8lOCzTZao3vRf89m4Kl0A9
4EIjtWXOQBf4gb8LS5nRCeZcDGM7+nWAr+o+SmJNtIPPpbXYd5W2gXNqh3J+
jGoFS0mHVU82vQA7mHzifSK/CVy9jRs1qFGANfXldkxmA3jE6f4uogqDTa+V
MXcuk4F3MSedimbEYO5nE6017Gqw5QnBnVMWQnDNXL2xwv4RWKgayhrl5IMT
j1tXqM5xwD/rp3TKE24gmH9wme31oJ/A1lOit+7yMrBPYW/z0SAh2PvIGt2/
KqvBmaHdac7VYnD9URvDz9fIwG82ml1rz8Xg+PjtYbfNG8DdfSYBEQoFODR5
32vG4SawbLsrD694Ad6iJx556Nv6YV5xtM8Kbht46a1OGWuwHTx3vPZs/eYO
cO+e0PWbOZ3g2ECT1Zv6usDm9/4IWm7TA34cXFAyw+4Ff7E/1VdR+xLMPxuz
yX1RBZ7R/1S35mQ/+EibB9MmRw32XOl4x+gwCf5/X8A4YZXJAEtJHN7STrgb
jxNUnzpd33m6JI4SVJ83Itc5XqIPE1SfE2tzreoZGoLq0yt2kUbf+oqg+kzN
um0Vk6UiqD5ZPnrz5ktdBNUnb87+WLiRkqD6vL1jYv2F3BaC6rOpwvFV1uln
BNUne11r5ZhLHUH1mTUvmV2ZLiGoPhcSzEyd5isJqs9ZJZOT1c4nqD79Knhj
pv4FBNXnm9MSXksKh6D6XDrY+77xcjr0KVQesssey4M+30xZJeryi6DPtYG+
vOg1fOizOWriVpuoHPoc/U24fjz0Q59Dkf+sbBmpgj6vjK5mRdBqoE+FK2PB
WfkU+gzSGz7Wny2GPn2qbLmBdAn0mRrrFXf/AgF9GuxzszhzUAp93rJouLKq
UQp9Jq4d2PDISwZ9Mu9dHR8slkGfTV+anFcx5NDn1N1yi/JgOfR5UyKmTRTI
oc8fTJQlpzRy6JMVfWt8uxWGPvuek57Tfhj6nLERyLuTMPQ5YChMqX2A0XIP
A5n4gRpFu2kkIfkYiR++PBRSqEaBo3sEC1rvYCeH5QnUKC1m7Pu9BRgZbKjO
tKxXIw+zGJbgF4waL+7SmP2pRvTS97W8Egy9hxTQn9DLMZq78reV4DiJYhV2
jXla81WNRUcCSRQmrch2FmJk/WuEKDNcuw/xk16nfsfo3cmHw/rJJFpMdJ4v
rsSosnDDfkYxiXBc/sjupxjFGk42Fj8mEU3I3VmntX2SJOBAOYm+OcR2OCHC
KNv/zNc3xSTK4zLc4sTaf57OzdZVkogd4tXGl2C0LTjKtrCHRK/dhCIPAqNX
dW5l3moSDXtFBD/T+lhOj+T6KImUTh+LNFKMGDqlfhsnte9l5KdclmEkjU7q
kM6SSLR8ZHpRa3bngdCv3pGIV7LXNkOOYb9fRFTTzDBG/wKrncc1
                    
                    "], CompressedData["
1:eJxF031Q03UcwPENnY8oCAjIQzAlniaPegQM+P0iURwKC2g8yMZ42hRRth+C
CCtZeAmhBYxscCIpilikya3SJPcLbsoUdUBNEQGpAIntNxQEsalR1+/D9+57
33v9873v5+79pafnxmaZUCgUbH7/e9KWe0y9UWI45b/1GGHt+3prZ9qCK7sZ
dZWLFqwg1jdse0cMriqaiygrFIEDvdvrVhXngqXmRVkJI/vATM1kniI7B+wW
xA7jabLBoo5udWnoHrAnw6K2TSUEW4cwXcK9BeADnhumHl7OBHsHe5UaQjLA
dlNO99jNaeCD5d08lTcfvLr6fvwqBhc8Gsfef3RpMvgrzVYzd7sEsLJhtXu6
Pg78i0d8Z/sMGxxjqsUPSaPAx1nHnqdsigA7vyrG7BrDwD9ddOl7POwHLvBZ
c5A2YrMwn+/GWMpda5R0qd0X5/u5/mB+aLNDvU8Y+IOVzCTJ4QhwOVbrxFRH
gY1+H+3l9LLBMYm8e/nUeDDegX+zf44DLtQN0kS/J4FvtzOe3F/BBTMHX4av
e5UKbowzVvO/TANfSW5D6WszwGI02UtQkQmelZjxeHQB2PQRLeq9k0IwUWUp
6Q/YAz7g+mZiVp29MN8Aw5YangPOmcgt+7lvH3jA/rlCwMkFH1q70fxWlgic
HTkuDPYVL7zf9KYjXb/gX1cUllVyMPD//wVMqbt7veGWAJ+5qY2K7LbCyT5v
yXoUtScscbLP9m2jlp1PzXGyT8Fg3IBh2yqc7LPrjI9J4sNlONmnWK5N4PnT
cLLPtyIqKFaXqTjZZ4mI4+AY+0pJ9qkrkfm9zX6hJPtMaZ05wJFOKck+Fxdc
tbhoYVCSfWoiPrXBCseUZJ/ZktAtK0YfK8k+J22G94qfapVknxp5dMh2c7WS
7JMvNN3DP3JJSfYp6htJPJXaAn2WWXacX1qkgj5FgbPPjC0a6HPHsaGi01wt
9KlNuBHmvb0f+uw5W9+VnzQEfUa7RP9maBiGPqP7Fo+9ZP4BfS4x+X7WpvFP
6DP4dRO+xTgCfdZ93Oa8fd0Y9NkubHpS4/kE+qRfM9bZmY5DnyzPIF2lZhz6
fDAwIgs+/hf0KU/GQ+bcJ6DPtXnPkr2uT0Cfy466JzIQHfQZP+fq33pBB31e
Yi3njprpoc8jd4pc0Uw99Pl32jUV/q0e+uT65bTwp/XQZ4Hbmc3feRNITY1D
bc6kGKXS6O+e8yGQTxwwqytTYtT0fnVXrS+BZG90XBnzUoyWrk5Nk/oTiO+O
vBeSpRhKnX5TzgogkLYKp94HdAxNzXO2UIUS0LtKJetK2UEgN6rvLHqUhKGv
hXmB4TsJ5Ee7DYfduBia31/CcIsmkDrPu/nXMzDUXr6h2RBDIHyWS4ZOhKEn
VPkmxXEEoivXhEZWYGj1QxZWnEwgg2tcr8o+w9DTHtX7k3YRyL3a4s1DVRga
pH76PCCFQFovuDIK5Bga4zjZNMklkEK1xPbsufn7jSflvLT5ed7vkRmaMVRw
Ytd0YDqB7OpzM2O2YGhZif2ARQaBhI330HpaMXRlehVHlTk/r9hd6vgDhp6y
xcfqswhk/dyHxt1XMfTz+uElBQICsZL2HlS0Yag11V+xU0jA/769SW9w2U0g
/wB2staI
                    "], Automatic, 
                    Hold[
                    Nearest[CompressedData["
1:eJxF02lQU1cUwPEImgjIorIIAqKDCooW1AYB5RZaFHCrVAsKSsERKghq2MJQ
BTHakIFqRacMVEqLbGrSkrIMJuQluSxxEFnCaiBPSEEWGaBQqIKl6Uzf8cOd
O78vd87M/Z+N4ZcCzuvQaDSW9vx3f4TMx5aWSMKyaHZx6/MKFPBt8+PdoR/M
buHERErU4I4OgzFZWD/YVnrJ1NW6D1wZXbfCuP8lOCzTZao3vRf89m4Kl0A9
4EIjtWXOQBf4gb8LS5nRCeZcDGM7+nWAr+o+SmJNtIPPpbXYd5W2gXNqh3J+
jGoFS0mHVU82vQA7mHzifSK/CVy9jRs1qFGANfXldkxmA3jE6f4uogqDTa+V
MXcuk4F3MSedimbEYO5nE6017Gqw5QnBnVMWQnDNXL2xwv4RWKgayhrl5IMT
j1tXqM5xwD/rp3TKE24gmH9wme31oJ/A1lOit+7yMrBPYW/z0SAh2PvIGt2/
KqvBmaHdac7VYnD9URvDz9fIwG82ml1rz8Xg+PjtYbfNG8DdfSYBEQoFODR5
32vG4SawbLsrD694Ad6iJx556Nv6YV5xtM8Kbht46a1OGWuwHTx3vPZs/eYO
cO+e0PWbOZ3g2ECT1Zv6usDm9/4IWm7TA34cXFAyw+4Ff7E/1VdR+xLMPxuz
yX1RBZ7R/1S35mQ/+EibB9MmRw32XOl4x+gwCf5/X8A4YZXJAEtJHN7STrgb
jxNUnzpd33m6JI4SVJ83Itc5XqIPE1SfE2tzreoZGoLq0yt2kUbf+oqg+kzN
um0Vk6UiqD5ZPnrz5ktdBNUnb87+WLiRkqD6vL1jYv2F3BaC6rOpwvFV1uln
BNUne11r5ZhLHUH1mTUvmV2ZLiGoPhcSzEyd5isJqs9ZJZOT1c4nqD79Knhj
pv4FBNXnm9MSXksKh6D6XDrY+77xcjr0KVQesssey4M+30xZJeryi6DPtYG+
vOg1fOizOWriVpuoHPoc/U24fjz0Q59Dkf+sbBmpgj6vjK5mRdBqoE+FK2PB
WfkU+gzSGz7Wny2GPn2qbLmBdAn0mRrrFXf/AgF9GuxzszhzUAp93rJouLKq
UQp9Jq4d2PDISwZ9Mu9dHR8slkGfTV+anFcx5NDn1N1yi/JgOfR5UyKmTRTI
oc8fTJQlpzRy6JMVfWt8uxWGPvuek57Tfhj6nLERyLuTMPQ5YChMqX2A0XIP
A5n4gRpFu2kkIfkYiR++PBRSqEaBo3sEC1rvYCeH5QnUKC1m7Pu9BRgZbKjO
tKxXIw+zGJbgF4waL+7SmP2pRvTS97W8Egy9hxTQn9DLMZq78reV4DiJYhV2
jXla81WNRUcCSRQmrch2FmJk/WuEKDNcuw/xk16nfsfo3cmHw/rJJFpMdJ4v
rsSosnDDfkYxiXBc/sjupxjFGk42Fj8mEU3I3VmntX2SJOBAOYm+OcR2OCHC
KNv/zNc3xSTK4zLc4sTaf57OzdZVkogd4tXGl2C0LTjKtrCHRK/dhCIPAqNX
dW5l3moSDXtFBD/T+lhOj+T6KImUTh+LNFKMGDqlfhsnte9l5KdclmEkjU7q
kM6SSLR8ZHpRa3bngdCv3pGIV7LXNkOOYb9fRFTTzDBG/wKrncc1
                    
                    "] -> CompressedData["
1:eJxF031Q03UcwPENnY8oCAjIQzAlniaPegQM+P0iURwKC2g8yMZ42hRRth+C
CCtZeAmhBYxscCIpilikya3SJPcLbsoUdUBNEQGpAIntNxQEsalR1+/D9+57
33v9873v5+79pafnxmaZUCgUbH7/e9KWe0y9UWI45b/1GGHt+3prZ9qCK7sZ
dZWLFqwg1jdse0cMriqaiygrFIEDvdvrVhXngqXmRVkJI/vATM1kniI7B+wW
xA7jabLBoo5udWnoHrAnw6K2TSUEW4cwXcK9BeADnhumHl7OBHsHe5UaQjLA
dlNO99jNaeCD5d08lTcfvLr6fvwqBhc8Gsfef3RpMvgrzVYzd7sEsLJhtXu6
Pg78i0d8Z/sMGxxjqsUPSaPAx1nHnqdsigA7vyrG7BrDwD9ddOl7POwHLvBZ
c5A2YrMwn+/GWMpda5R0qd0X5/u5/mB+aLNDvU8Y+IOVzCTJ4QhwOVbrxFRH
gY1+H+3l9LLBMYm8e/nUeDDegX+zf44DLtQN0kS/J4FvtzOe3F/BBTMHX4av
e5UKbowzVvO/TANfSW5D6WszwGI02UtQkQmelZjxeHQB2PQRLeq9k0IwUWUp
6Q/YAz7g+mZiVp29MN8Aw5YangPOmcgt+7lvH3jA/rlCwMkFH1q70fxWlgic
HTkuDPYVL7zf9KYjXb/gX1cUllVyMPD//wVMqbt7veGWAJ+5qY2K7LbCyT5v
yXoUtScscbLP9m2jlp1PzXGyT8Fg3IBh2yqc7LPrjI9J4sNlONmnWK5N4PnT
cLLPtyIqKFaXqTjZZ4mI4+AY+0pJ9qkrkfm9zX6hJPtMaZ05wJFOKck+Fxdc
tbhoYVCSfWoiPrXBCseUZJ/ZktAtK0YfK8k+J22G94qfapVknxp5dMh2c7WS
7JMvNN3DP3JJSfYp6htJPJXaAn2WWXacX1qkgj5FgbPPjC0a6HPHsaGi01wt
9KlNuBHmvb0f+uw5W9+VnzQEfUa7RP9maBiGPqP7Fo+9ZP4BfS4x+X7WpvFP
6DP4dRO+xTgCfdZ93Oa8fd0Y9NkubHpS4/kE+qRfM9bZmY5DnyzPIF2lZhz6
fDAwIgs+/hf0KU/GQ+bcJ6DPtXnPkr2uT0Cfy466JzIQHfQZP+fq33pBB31e
Yi3njprpoc8jd4pc0Uw99Pl32jUV/q0e+uT65bTwp/XQZ4Hbmc3feRNITY1D
bc6kGKXS6O+e8yGQTxwwqytTYtT0fnVXrS+BZG90XBnzUoyWrk5Nk/oTiO+O
vBeSpRhKnX5TzgogkLYKp94HdAxNzXO2UIUS0LtKJetK2UEgN6rvLHqUhKGv
hXmB4TsJ5Ee7DYfduBia31/CcIsmkDrPu/nXMzDUXr6h2RBDIHyWS4ZOhKEn
VPkmxXEEoivXhEZWYGj1QxZWnEwgg2tcr8o+w9DTHtX7k3YRyL3a4s1DVRga
pH76PCCFQFovuDIK5Bga4zjZNMklkEK1xPbsufn7jSflvLT5ed7vkRmaMVRw
Ytd0YDqB7OpzM2O2YGhZif2ARQaBhI330HpaMXRlehVHlTk/r9hd6vgDhp6y
xcfqswhk/dyHxt1XMfTz+uElBQICsZL2HlS0Yag11V+xU0jA/769SW9w2U0g
/wB2staI
                    "]]]][#/{600., 6.1545902763278795`}]& )[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     0]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     2]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[
                    Part[CalculateUtilities`GraphicsUtilities`Private`scaled, 
                    1] - 0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt]}]],
                     TraditionalForm, Graphics]]}, AspectRatio -> 
                NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> True, 
                AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
                BaseStyle -> {CellBaseline -> Baseline}, Epilog -> {
                  AbsolutePointSize[5], 
                  Hue[0], {
                   TagBox[
                    TooltipBox[
                    PointBox[
                    NCache[{69.31471805599452, 
                    Rational[1, 2]}, {69.31471805599452, 0.5}]], 
                    TemplateBox[{"\"(\"", "69.31471805599452`", "\",\"", 
                    FractionBox["1", "2"], "\")\""}, "RowDefault"]], 
                    Annotation[#, 
                    Row[{"(", 69.31471805599452, ",", 
                    Rational[1, 2], ")"}], "Tooltip"]& ]}}, FrameTicksStyle -> 
                Directive[FontFamily -> "Times", FontSize -> 10], ImageSize -> 
                300., LabelStyle -> {FontFamily -> "Verdana", FontSize -> 10},
                 Method -> {}, 
                PlotRange -> {{-300., 300.}, {-5.20437735079212, 
                 0.95021292553576}}, PlotRangeClipping -> True, 
                PlotRangePadding -> {
                  Scaled[0.02], 
                  Scaled[0.02]}, Prolog -> {
                  Opacity[0], 
                  TagBox[
                   RectangleBox[
                    Scaled[{0, 0}], 
                    Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
                TicksStyle -> 
                Directive[FontFamily -> "Times", FontSize -> 10]}], 
              TagBox[
               GridBox[{{
                  GraphicsBox[{
                    RGBColor[0.24720000000000014`, 0.24, 0.6], {
                    AbsoluteThickness[2], 
                    LineBox[{{0, 0}, {1, 0}}]}}, ImageSize -> 13, 
                   BaselinePosition -> (Center -> Center)], 
                  StyleBox[
                   FractionBox["1", "2"], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0, {FontFamily -> "Verdana", FontSize -> 10}, 
                   GrayLevel[0.5], StripOnInput -> False]}, {
                  GraphicsBox[{
                    RGBColor[0.6, 0.24, 0.4428931686004542], {
                    AbsoluteThickness[2], 
                    LineBox[{{0, 0}, {1, 0}}]}}, ImageSize -> 13, 
                   BaselinePosition -> (Center -> Center)], 
                  StyleBox[
                   RowBox[{"1", "-", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "0.01`"}], " ", "t"}]]}], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0, {FontFamily -> "Verdana", FontSize -> 10}, 
                   GrayLevel[0.5], StripOnInput -> False]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{0.3}}, "Rows" -> {{0.3}}}],
                "Grid"]}, "Labeled", DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"], 
                  
                  ItemBox[#2, Alignment -> {Inherited, Bottom}, 
                   DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  RowBox[{"(", "\[NoBreak]", 
                    GridBox[{{
                    StyleBox[
                    "Right", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], 
                    StyleBox[
                    "Bottom", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited]}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center], "\[NoBreak]", ")"}]}], 
                "]"}]& )], TraditionalForm]], "Output", {}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "3", "datatypes" -> 
    "Solve", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.921", 
    "parsetiming" -> "0.747", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa12831g1af6878ef68iee00001igbgc35f6560021", "host" -> 
    "http://www3.wolframalpha.com", "server" -> "19", "related" -> 
    "http://www3.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa12841g1af6878ef68iee00000f84f2gci7770ga0&s=19", "version" -> "2.6"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -7., 
    "Date" -> {2014, 9, 8, 0, 0, 51.977851`8.46839329508298}, "Line" -> 124, 
    "SessionID" -> 24190340719069411275}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Result", "Results", 2, 2, "Content"}, Typeset`open$$ = True, 
   Typeset`newq$$ = "Solve (1/2) == 1 - e^(-0.01*t) for t"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{700., {829., 26.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 InterpretationBox[
  FrameBox[
   StyleBox[
    FormBox[
     StyleBox[
      RowBox[{"\<\"(\"\>", 
       "\[NoBreak]", "\<\"step-by-step solution unavailable\"\>", 
       "\[NoBreak]", "\<\")\"\>"}],
      StripOnInput->False,
      LineIndent->0,
      LinebreakAdjustments->{1, 100, 1, 0, 100},
      LineColor->GrayLevel[0.6],
      FrontFaceColor->GrayLevel[0.6],
      BackFaceColor->GrayLevel[0.6],
      GraphicsColor->GrayLevel[0.6],
      FontColor->GrayLevel[0.6]],
     TraditionalForm], "Output",
    ScriptLevel->0,
    FontFamily->"Times",
    FontSize->14,
    Background->None],
   BaseStyle->{Plain},
   FrameMargins->10,
   FrameStyle->GrayLevel[0.85],
   RoundingRadius->5,
   StripOnInput->False],
  WolframAlphaResult[
  "Solve (1/2) == 1 - e^(-0.01*t) for t", {{"Result", 2}, "Content"}, 
   PodStates -> {"Result__Step-by-step solution"}]]], "Output",
 CellChangeTimes->{{3.61914844591792*^9, 3.6191484711433887`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"1", "/", "2"}], "\[Equal]", 
    RowBox[{"1", "-", 
     RowBox[{"Exp", "[", 
      RowBox[{
       RowBox[{"-", "0.01"}], 
       RowBox[{"(", "t", ")"}]}], "]"}]}]}], ",", "t"}], "]"}]], "Input",
 CellChangeTimes->{{3.619148335255855*^9, 3.6191484074473658`*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Reduce", "::", "ratnz"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Reduce was unable to solve the system with inexact \
coefficients. The answer was obtained by solving a corresponding exact system \
and numericizing the result. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/Reduce/ratnz\\\", ButtonNote -> \
\\\"Reduce::ratnz\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{{3.6191483980358667`*^9, 3.619148408262867*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"C", "[", "1", "]"}], "\[Element]", "Integers"}], "&&", 
  RowBox[{"t", "\[Equal]", 
   RowBox[{"100.`", " ", 
    RowBox[{"(", 
     RowBox[{"0.6931471805599453`", "\[VeryThinSpace]", "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"0.`", "\[VeryThinSpace]", "+", 
         RowBox[{"6.283185307179586`", " ", "\[ImaginaryI]"}]}], ")"}], " ", 
       RowBox[{"C", "[", "1", "]"}]}]}], ")"}]}]}]}]], "Output",
 CellChangeTimes->{{3.6191483471715393`*^9, 3.619148351728177*^9}, {
  3.61914839803752*^9, 3.619148408268702*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{"30", "\[Equal]", 
    RowBox[{"1", "/", "x"}]}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.6191267444791727`*^9, 3.619126750049971*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"x", "\[Rule]", 
    FractionBox["1", "30"]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.6191267517460823`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "Integral of 0.01 * e^(-0.01*t) dt, -infinity < t ", Typeset`opts$$ = {
   AppearanceElements -> {
     "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Fast parse", "Fast parse", 1, 0, "Input", 
        "{Integrate[0.01/E^(0.01*t), t], -Infinity < t}"}, "ExtrusionOpen" -> 
      True, "Formats" -> {
       "cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"{Integrate[0.01/E^(0.01 t), t], -Infinity < t}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"\[Integral]", 
                   RowBox[{
                    RowBox[{"0.01`", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "0.01`"}], " ", "t"}]]}], 
                    RowBox[{"\[DifferentialD]", "t"}]}]}], ",", 
                 RowBox[{
                   RowBox[{"-", "\[Infinity]"}], "<", "t"}]}], "}"}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Identity", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement["moutput", {}, {"{-1./E^(0.01 t), -Infinity < t}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"{", 
              RowBox[{
                RowBox[{"-", 
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{
                    RowBox[{"-", "0.01`"}], " ", "t"}]]}], ",", 
                RowBox[{
                  RowBox[{"-", "\[Infinity]"}], "<", "t"}]}], "}"}], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral assuming all variables are real", 
     "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegralAssumingAllVariablesAreReal", "position" -> "300", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Integrate[{Integrate[0.01/E^(0.01 t), t], -Infinity < t}, t, \
Assumptions -> Element[Alternatives[t], Reals]]"}], 
       XMLElement["moutput", {}, {"{100./E^(0.01 t), t True}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               StyleBox[
                RowBox[{"{", 
                  RowBox[{
                    RowBox[{"100.`", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "0.01`"}], " ", "t"}]]}], ",", 
                    RowBox[{"t", " ", 
                    StyleBox[
                    "True", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited]}]}], "}"}], 
                LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 0, 
                
                GrayLevel[0], StripOnInput -> False], "+", 
               StyleBox[
               "constant", FontFamily -> "Helvetica", Magnification -> 
                0.9 Inherited]}], LinebreakAdjustments -> {1, 100, 1, 0, 100},
              LineIndent -> 0, 
             GrayLevel[0.6], StripOnInput -> False], TraditionalForm]], 
          "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "3", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.143", 
    "parsetiming" -> "0.748", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa28311bg7fga6g75d086a000067dg5842h78365a2", "host" -> 
    "http://www2.wolframalpha.com", "server" -> "3", "related" -> 
    "http://www2.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa28321bg7fga6g75d086a00006927g7i04ff71ca0&s=3", "version" -> "2.6"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -7., 
    "Date" -> {2014, 9, 7, 23, 27, 37.222166`8.32337662068599}, "Line" -> 110,
     "SessionID" -> 24190340719069411275}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Fast parse", "Fast parse", 1, 0, "Input", 
    "{Integrate[0.01/E^(0.01*t), t], -Infinity < t}"}, Typeset`open$$ = True, 
   Typeset`newq$$ = "Integral from -infty to t of 0.01 * e^(-0.01*t) dt "}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{700., {497., 26.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"-", "1.`"}], " ", 
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{
      RowBox[{"-", "0.01`"}], " ", "t"}]]}], ",", 
   RowBox[{
    RowBox[{"-", "\[Infinity]"}], "<", "t"}]}], "}"}]], "Output",
 CellChangeTimes->{3.6191464501308737`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Solve x - y < (1/2) for y", 
   Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Result", "Result", 1, 1, "Input", "Reduce[x - y < 1/2, {y}]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"solve\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox[
                    RowBox[{
                    RowBox[{"x", "-", "y"}], "<", 
                    FractionBox["1", "2"]}], HoldForm], 
                    StyleBox[
                    "\" for \"", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, 
                    GrayLevel[0.6], StripOnInput -> False], "y"}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None, None, None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Solve", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Reduce[x - y < 1/2, {y}]"}], 
       XMLElement["moutput", {}, {"Element[x, Reals] && y > (-1 + 2 x)/2"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              StyleBox[
              "\" and \"", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0, 
               GrayLevel[0.6], StripOnInput -> False], 
              RowBox[{"y", ">", 
                RowBox[{"x", "-", 
                  FractionBox["1", "2"]}]}], 
              RowBox[{"x", "\[Element]", 
                TagBox["\[DoubleStruckCapitalR]", 
                 Function[{}, Reals]]}]}, "RowWithSeparator"], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement[
       "info", {
        "text" -> "\[DoubleStruckCapitalR] is the set of real numbers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/mathematica/ref/Reals.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/R.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
             "\"\[DoubleStruckCapitalR] is the set of real numbers\"", 
              TraditionalForm]], "Output", {}]}]}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Inequality plot", "scanner" -> "Solve", "id" -> 
     "InequalityPlot", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "RegionPlot[x < 1/2 + y, {x, 5/4, -1/4}, {y, -5/4, 1/4}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[
             GraphicsComplexBox[CompressedData["
1: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
nhefu3V+bZk2Grq7Wbj/19rmrc7xOXWl+vOkPr1OVi7Qxg3++l+pvpx0xwsV
lbPk2M3f/BLjU6Ipc+4fWFa5Ulb99Wff4+q3cPSJ9iHr5I17rjsc7l+k5a9m
3f6S/0bp0y01J6/TUX3uriarc+q2yN8efTEjKKBQM274fntp5XY52f/6r9OC
DmnrM0PL6gp2ybfPfvt5+5ADOv1Q48u+mfnydkT4/MSwAo2xV0mwv+tKe590
tc9poV1Hcu26epPdR0bZfbWXjUMaj/KMS8fYOCXIxq1LrQ45a3VpgdUpM77w
1K3XWQ4yzHIRP8tJNg/x5CbdLUdJsVxlkOUsYyx3GWkexM+8yDTzJNPMmywy
j1JuXmWteZenrQ9kl3l39QfPS7Fe0C/0B89LsX549wvPR7GeePcPzz+xvnj3
E88zsd549xfPIznfX3n1G88PsR559x/P97A+efcjz9uwXnn3J8+7sH559yvP
l7Ceefcvz2+wvnn3M89DsN559zfPE7D+efc7v7+zHnr3P79Psz56zwd+r2W9
9J4f/F7J+uk9X/h9jvXUe/7w+xPrq/d84vcU1lvv+cXvAay/3vON769Zj73n
H9+vsj57z0e+72O99p6fzvd/V9dv7/nK9xus597zl/Mz67v3fOY8xnrvPb+d
/fzV9d97vrP/498D7/nP/oB/H1gPJvRp9Uhgo306sPv7iXGJ1SpPb+uY2myP
9qq9EObvV623DBnr5++Xp10zIppnJlVp8ag7mya03613v707P9y/Sr+K2f5n
w2479faggPdrkyt1yrRxZ6cE7tCbrlvWL6F9pfab61d2us82vbStyfXdVp3S
2xbtODAsNFvPzZ6UldfplG7tUzYnOS1LT4WcfCsqtUIjhjwyJj5noxY2feKR
Rt0q9FLM/Keji9M1d9/6C8lp5bp4bkX3sHPrNCvBf21QQLlG9Z3YJcbnO133
/NwxxellumKi/4XeASm6slVtx9jAMv1Pv8SJt2Um6eLilyt9M0v1qYEnr3vB
f67OW5qbnBZUqsE1Or+mcqRc2To6MynupP629OVT94YkSNXAxx4ujC/R4OUz
79tZt1zy97b8rtn8E+oz4cjIPwpWy/rnajqEJBzXH5a33JcYtlaWFG1ZFpdY
rIPe15q0oPUSN3xRq8ykIl074fWb8jtlSFTVvz6pTT6mvoNvu7fKN1OeGfO4
T7dVR/XR5JK2DRpskR7nb58ZlXpEoxc+1G1+bba0iT3zR3JaoS57f05vv5pt
0vBy9qTi9MO6f+qJJ1eV7pAzMxN/8s08pDfEdB8cULhTDjSJHhWafVAfHhUf
lZ23WzZ+FHwyPueAvjb4+OTQ7DxZ3rJVeHbefv0s9MH3itP3yJzPfyqoKyjQ
vODZn0al7pMT9qrT7O/yjb1PF9vn5E27jq6168oAu4/m2n2lpY1Dy21cUmHj
1Et/esYtaVaH+lpd8q7VqV2tbnnKctD+lov0tJx0uOUmhyxHjbVcZbzlrAmW
uzRN9njQr82LPGuedLt5kw/Mox43rzJnmcez/mreJfespw803vpC7hvg6RNZ
YH0j7a2PZLn1lQy2PpNU6ztpa30oGdaXMsn6VHKsb+Wo9bEcsL6WXtbnUmJ9
L0ttHshpmxdync0T+d3mjTxk80ga2rySV22eSXObd5Jo81Ba27yU3TZPpbPN
W/ljsGceSw+b19Ld5rkE27yXMbYOSN8F9xWdjtzj2g/8r+KzVc0aVWvpNzM2
F8Tudu0Hyl4f1zbEp0rf2XZkefr8Ha79wM6zfT+La1aprYrvn5W0Itu1H1jz
hl+LTN9TOqryxn0Nx21y7QcW/nF2bu2dFbrcd/3CgsXfu/YDU2fsuKGbf7mu
j9+S0fO9Va79QOSNn78T1b5MP10c2erxyI9c+4En54+vTe5Uqqt+6rVueOhH
rv3AyA7zjqcPK9Hfh/ZY1mD6Ktd+oHv3R/Z2ijqufa/8PCdg0feu/UCDoHJN
iinSpgXBW6PGbHLtB/aGzE9rNvWoRj2TNzU0Odu1H0h6vueXcfGFmt/zjSVR
83a49gOjX6lYUPvJIX2gnf+GuCm7XfuBntEfzo5KOqALmuw+mDRij2s/0PjN
wNjilAK9FOt5de0HUuxz2tWu49oPBNt9dbiNw7UfKLFxa4LV4doPvGV163bL
wbUfeMBy0197e3J07QeiLHftaB5c+4HHhnm86WDz6NoP7P7Z410HWB+49gMT
Ej19Iy9bH7n2A2Os72SK9aFrP/CO9a18Yn3s2g8EW9/LVzYPXPuBxjZvZJvN
I9d+YLTNOym2eejaD+y1eSu1No9d+4EeNu/llojtXQuvXDsfVHV8ZFDtX8/9
xT6eEJZ67f9PcZu9TyfPmf7DlJeunSfjHpvfrbi+Lwou337z/LQqbRNe0SK7
vg8yZp2ZmZNeqRvHBf6aUu99qc/WS1c2ndLvbvX//s6bs3T2x4lvBGZX6A+9
896srPc65vbon2NyyjWo6OfpIzan6nNJwa+l5pXpyAkftr7Ybon2urtVaWVB
qf7Y/4Z7JhZPkn7PFKcFpZ7UMT43HSkcsEL+NnT2l2npJ/TS4SMr/es9nHzt
wYXts4t1e8p9JWH1uX878fjsxLxjmrNJb+5bn/Pb78bH+hQe0c4rX+8YUZ9r
yAfdR08tPawfzrutX2x9jncknhhy7vRBPT9p8ysJ9blVrpjzVGTtfn1h2GvT
UutzGm2vesL+Lg3f8LxPm9nnZLldRx+368o/7D460e4rR20c+m8bl/xg49Qj
Nm5pW+ipQ5tYXbLe6tRHrW65P8STg/awXOTAeE9OEmq5ya/HPDlKlOUq2y1n
mW65y1zzIEvMi6w2T7LOvElT8yj55lXGm2c5ZX0h5dYnzvkyxvrCOV/e2K5b
TUxctbZYXpg3bGye63z5U0rDkanxVfrdhi5r+szc6TpfHu5SdLxyXqU+sS8u
odPiba7z5aZ1a573TziluXvSatoMVtf58sue7+0NT6zQhn8OW3d65gbX+fL9
rMEDEpLK9a1w3/NjhqxxnS8n9H1gS15ymRZGH7t8U8Qy1/nyxdxGgY1WlWrW
6a87jiq9mOV9vnxneXrk1PCTOqLVjrzFYctc58snUl95/tyIE7rl/rlHA15Y
4zpftspoOiAyulhXVy/+d+iMDa7zZdW2DT0LpxzTsRlnSuJeVNf5cv2+EZ1D
4o7okr5t5xUv2uY6X8YV39I6c95hvdwld3XtjJ2u8+Uz1Rm3dEs8qCNaTtrR
LDrPdb5scyHySnLyfs358+/lncL3uc6XR+3veru9z3W+nGTX1YF2H9f5svn9
nnHpWzZO1/ky1erSVKvTdb5MsFy0xHJynS/zLVdtbjm7zpc3dfV40WDz5Dpf
XjSvOsk8u86XWSmr/+qLoDDrE9f5sr/1lfzL+sx1vuxufSnvWZ+6zpellzx9
LV9Yn7vOlyk2L2SDzRPX+bKnzSvZZ/PMdb5MsnkpP9o8dZ0vG9i8lutsnjvn
y/UB5b2j6j0ffzQ19FzXan1mUM92oft36fbsGTs7BVTpmcgPGwZUbdevB7z4
WGRgpc55+1T1nX9s0YQ9Xf6bFHRKn+jwxqIr9Z5iw67vXtinQmc9325YXr2X
4ceOfN0spFxjm3w+oGv1Su3/8rf3hISW6eple8LuqJmlXSvjkuLCSnXgxKhH
+1UskPsK13aOTSvRgOIhzW9u87X8r2xI65pNx3V41ozswPocd/7U+NaInCLt
+NHhuuhNmbLwf2lXCgqO6u9rfP32D9wqkY2G/dKnuFCHLs7qUfNQjjz4t5sq
0isP6ZbpUWGN6nO40vr7Q53OHdD2r7cY719f956OETlJdQW6zV6lh/1da+19
csA+p/9n15Gxdl19ye4jPms999UPbBwyyMalm22cMsvGrWetDnnH6tJ2VqcU
Wd3a0XKQ2Us9uUiw5SQPWG4y2HKU4ZarTLKcpYPlLvPMg0w2L5JinqTIvEmW
eZQg8ypHzbOkmHfZ+13THV037NERRZPPJUdXa9LGDenJ9efIF74oSw06V6Wj
c0as9s3frU8MH/R6cUyV9jxwy5L4+nNk0D0b7o2trdTGJRkf1NWfIx+oalfu
G1uph36MnBpdf45s/9W8pWl1p3RF7a3jSuvPka3G/DY4dOopHX/dxuFh9efI
pt1G3FFzpULf8ctdOa9lpl7+Jf9gfFyFturedk5M5ww9v/6Rj9s3qtD0kMn/
Cpf1WjVlxaDs+HJ99pX80KDn1mpRr1uaRPiU6/Ff+o4ceGC15v85ZUfdvDL1
bfdLZ99Ly3XLlvIZic3KNGl5rwp9MkHXz3wqKCChVEf9njhrU91IXd0/o67A
t1Qb9uvU8G6/ufLIbf3HFnc9qc37Zk56879J4v/ZXdW+ASVacD7twrnuKdLI
/5eXQwNP6KJtje6/t8l38tPKnKPxQce1a26X71PPrpODnZP+md2nWBPWFe7L
KUqXTWsn5NYNLNJfl0w/U7pjoyT3GNAnIPSYDp7Zuckfa7Pk/czWmdFhR7Xk
4dMJPvXnyHHB5wNWhR/R5p0lObH+HPnirp3flg4r1OA2C9a0rz9H9g79ooNf
5GGd1OLHzWldd8q9h2KWhUUd0pTGQflB9efImwcPbDU/+qAerUsoyrszTy6c
/PsnOTEH1Ods9Q/h9efIY69eaNIgdr/+o+Ifv1U23CfZNbviAqcW6AZ7lVD7
u+6390lr+5z+aNeR03ZdvcHuIxl2X73LxiGzbVz6sI1TnrNx61NWh9xtdelr
Vqecs7r1XctBplku+pnlJH6fe3LTNMtR0i1XzbOc5VnLXSvMg5SYF/2zjceT
tLrg8aYtzaMsN6/azTxLh/4e77rC+kBKLnj6Qr6zPhEf6xvJtD6S/LaevpJd
1meywPpODlkfSlfrSym1PpUE61v52fpYLj7o6Wupsz6XcOt7aWzzQCJsXkgL
myfysc0baWvzSLbavJIuNs/k4gnPvJOeNg+lg81L6WvzVMJt3sqzNo9lrs1r
ibB5Lttt3svoO5oGNKqplssrXjm4KXWfNPjS86rj7e/6/x2O31E=
              "], {{{
                 EdgeForm[], 
                 RGBColor[
                 0.798413061722744, 0.824719615472648, 0.968322270542458], 
                 GraphicsGroupBox[{
                   PolygonBox[CompressedData["
1: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
apDN8w==
                    "]], 
                   PolygonBox[CompressedData["
1:eJwtlXf4zlUYxt+eR1ND4+rSJtqD0p400FRIIhRJMn6IhF9W2TsRpZRUGrQ1
SNHQLu29NGnvXZ/7us8fn+vc533f7/d9zjPuU7dzVcveUalURkINuDQrlff4
oD1cA5uxvwpeQk8O61owJfxZQ/SFcDn6CZiF3gKmoVfBTPSmMAn9AhyL3gGu
Q3eA2eitYDr6Vdg8/Q49OxW2Rh8GrdFXwgz0xjAB/Rzsh+4Jo9FPwf7o3jAW
/TR8B2PY38mqgx6P3hGuR3eCX2A8+/tZ+8OZ6N3gHnRfaITuA+PRz8IQ9Fv6
nXIBZ7HfHe5DXwQfwjD2c1k7wk8wjv29rP3gGxjNfiFrT/gYhrO/gfUc+AHG
sr+btQ+cgd4V7kJXQSv0LrAI3Qtqp3Ok3DSC12Ew+xnhnL0brqlq2Q7eh6Hs
r2U9G+qjW6ZjuSOcm6bpWJQj/XebdCyKYV/0+TAc/Rhsiz4K2qr24doelz67
arw9+pj0f80Jx946XQudYWf0qXABegHUQ5+mnkLfBnXQJ8J56PlQF32yYkDf
DDuhm0Nn9DxooHfBSPQKaJKOYU7p6b31W6hGL4W9dFYYjH4Y3oZq9rPDZzoy
fcZZpeZHo7eDq1V7OBy9DcxUraBrOkfKzTB4s/SMeqVNefc75Vn9h549Iv2d
3qHea5vuFfWgeqtdujfVY3sol3AxejHsqVzDJegHw7E1TtdaMe6j3MFQ9LLS
G2+UWNUja2EUn90eznmLdA2U++7qafSB8GJ4hrunZ16zfplmBH0APB+eyU3S
M69ZnwjT0DXSv30crkCvB6PQT8IUdCWdq0dhKjpgBHo5dErXSLUZBN3SNVZt
9Zu/FBf7JeEanpuusWo7pMzSj+FZ1kxVpWdaszwOJqP/1YzAI+Vdf5dn9c7f
dC4+eyCc84noP0ssD0GHdA2U+4HQK+1B8p4x8Ed5Rr9VjdZHT4eVYc/Su38v
z+o/eqQ9TV6mHMmbfmUdEPaommkPlPfJk+QtP4e9Rx6zobwAngl74LrpnCvX
8ugR6E9Zu8CNkOkaqTaaGXnRJ8pj2JPkZR+FvVKe1j7dg4tLTAer9/Qf6FfC
vdAvXXv1xEHq1bSXvxzupf7pu0Q9dQj6UGiFfg2+Upzsbw17wknpmdesd4UT
0p4wv5xhdTmTziIPaJb2hHnlDJ/pXOxvCnvIF+pb9reEPUS52ijdC8rZ6WlP
lBf2CNdqg3QtV5bY1pTZUIz/lR5W72rGBqZzolzoDpTXfhC+6+S5uou+D3u5
7qR/Sg+q96pLrJ+XsyrmLdN3pO5G5Vh3x7dh79cdsk56ZjQr8mTN8tclds10
l7QHLCs9rrN/ydotnINB6Roo97qDB6Rrplrpjj8l7dELyjP/A44PCF4=
                    
                    "]]}]}, {}, {}, {}, {}}, {{
                 Directive[{
                   Opacity[0.4], 
                   GrayLevel[0]}], 
                 LineBox[CompressedData["
1:eJwl1Hl8iHUAx/HHpqZWzLWD3TaGnY0oIamVhMxZVtZU7q1ba6VUcpSjQysp
KuWWokMXXehwjbnpEK2DLN2Y3nv1x/v5PK/vH8/v9fr98SQVleQX1wmCoKdH
bkgQ1L5LUJcwwokgkjhSyaQj3elDAaMoZQqzWcoatlFFDU19PIM8CimjnFVU
UE1DhzeiMU1oSiRRRBNDM5oTSxzxJJBIEsm0IIVUWtKKNFrThrakk0EmWWST
Q7/ac0ODYA8X0JFSdtOEZ2nMLu6mA+PYSSOeoSE7uIvzuZNKIiinAdu5g/bc
zjbq8zTnUsFttONWtnIOswhnC7eQSwmbOZunOItNFHMeY9lIPZ4kjK8YQw6j
+ZIzeYIz+IJRZDOSz6nL44SygRFkMZz1hDCTOqzjZjK5ic8ImMFpd/yp3kgG
w/iEGvt0PaUfaxHp3MBHnLRP0xO6Vgtpy1DW8K/9Mf1HP9TracN1fMDf9kf1
L31fC2jNEN7jT/tU/UPf1WtJ4xpW87t9ih7Xd3QwrRjE2/xmn6zV+pYOpCUD
eJNj9kn6q67S/qTSj5UctT+iR/QNzSeFvrzOL/aJ+rOu0KtpQR9e4yf7w/qj
LtfeJNOLZVTZH9IfdKleRRI9WcJh+4N6SBfrlSTSg0V8b5+gB3WhXkECl7OA
7+wP6Lf6quYRz2W8wjf2+/Vrna+XEkd3XuaAfbzu15f0EmLpxovss9+ne3We
XkxzujKXPfZ7dbe+oF1oRmeeZ5e9THfqHL2IGDrxHDvs92ilztYLiSS69kyi
Qv//T/4HHP6cDQ==
                  "]]}}}], {GridLines -> Dynamic[
                Map[{{#, 
                   GrayLevel[0.7]}}& , 
                 MousePosition[{"Graphics", Graphics}, None]]], 
              Method -> {"GridLinesInFront" -> True}, Epilog -> {
                DynamicBox[
                 Typeset`ToBoxes[
                  
                  DynamicModule[{
                   CalculateUtilities`GraphicsUtilities`Private`pt = (
                    NearestFunction[1, {331, 2}, 3, CompressedData["
1:eJztmIs3lYkaxl1OhoaGlCN3kkjUaajk8iK6uDRUJGVEdFGKVpQuBqlTyKjU
RENEM6jcokR6N7ZyyW27buxdY9xCxmXICJ3Vfs98s9Y5/8JYy9prWctafN/7
PM/vedQ9j2/3FhESEvr8bSssJJTTGKrj5FSOf3/S57FfveXiCkpx5fhWUZ4i
Cznz9r61mCtE+2WahZXsfKywGrrhGJmNlysOdeSm/ISzC8aUL3rcRoeDsdqa
vCOoM/Fa1sTnGiQaOzsv0E6BtJnye3Pxj6CNH3/qg1geuCEn4bj5M+i6O5/d
F/QCDMzVJ7K4JRC42lT8aCAbnqntVtSWfQUz0gH63VmVYCZ8zSLJ7jWEjj7c
ufddLXT5dX8tWVYPoodPmPrIcEDTQ2hzhXsjbNod7aCV2QQHHJVcw2ea4fLW
jP1dNq2QbrHe1zyuDaqMXgYm9nFh6F87Q2YMO0BqRdcV1/BO0Nfwu1HA4YGD
wtyPcupvYJ9cebJ1xRuQ0d5jVvHpDaxXlR4R6/7r56uTH/oej3kDwitjjeJc
3oD20q2DrSZvmN9Xu99zyPwdH0ZX1Rj45PBBfnlYb9pNPpirrLvdF8QH6XQV
LxlLPvzytdhq4/l8mKdb9EvQMI/5O2Yf7nLviudB7TrQldzPgwn93zttNvNA
WSs9+oouD95nx7g+Hu+EF8antXhFndCzRq9NMamT+X94eZVO4XadkAk56pmL
OqF57YHGoakOmNVTvKjL64CaAhFHp/sdkLhxQOk73w4o3XC3ttixg3kuhc+N
7bTm2iFq81J5h5ftkGvWVhmd0Q7thlfP1kS3Qwbr5OYPzu1wznavrLpqO9yz
lCl3F21nnm88+5FlRRYXjn5zc8HYKS5c32TDWr2XC4Wmn/yPm3MhoqLXNE6c
C3t31EqU1bdBiM2FIuH8NuY9nX6tauTj0QZbd30xL1anDfy2PX/CkWqD29b+
h2TGWuFQvYuBcWErGO0xF/IOa4V92ydyUg60Mu/bpenaKknZVtBxD/po2NEC
Ds76j05iC5y2//XbxyktsKWtagXvSAss2Z87KWbQAqauB9Os5VuYuzHsFNXK
ZDeDxMHB0daoZtD7NilFzr8ZnJ0+fzXD8rcm6t8pN8OUj+b7tJ4mUPXkJvZV
NjH3J9cdoOQQ2AS9x9z6g8yaYMGBhfEFGk1g6PbK9oNYE4j1Z/5Tva4RWk7c
+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
APxJ2rI=
                    "], CompressedData["
1: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
                    
                    "], CompressedData["
1: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
                    
                    "], Automatic, 
                    Hold[
                    Nearest[CompressedData["
1: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
                    
                    "] -> CompressedData["
1:eJxFmHtczOkXx7MqyiVrB4ktkX5KirYfxZqzKpdcZq1xGVFSlliJhNbKVi5Z
cmujMC7FJnZcSr9qdTmlGt3UUE2XSU0zTVEol6ydtfplzn4f/TOvz7ymmef7
POecz/vzWPoGLvn+Mz09vQV99PQ+vh7Ods3p6anAcpnQxUnehpzO+zWnWyb6
pJNGxmwx9m5l+vjFjW1ufhqmd44Hn1D/Fqa9fufVpQWomXaf0v5dV5CK6Ynp
WGIT0sz00Jmn3PxClUy/OlAd4mLQxHTuybBNEpPHTB87P3G1hZmC6dXX5Iui
reqYtv1fOBg41DD9LtduSohLNdPSspqxHW6VTMfURvC8BQ+ZLihaNTAhuZxp
H2VyZ6S0hOn3f/arDFBImY4z8U4Tdt1jeqPA/6vtxjlMJ4TytHynNKbTVoaH
D8uSMP3t1jtfelqcZdp5QaC5QhMMnH57eId8nEcC066nj1lJtbeZNtqg8tLK
Mph+MurcglhhLtML9Wf7J/MLmL797MX+UpsipnnVcfEaXhnT/76CNb3P9D36
P6a96XuZ1tLvMj2J1sX0elo30/wjuudies8i3XMznROo2xduXbCF9o3pvbSv
TM+mfWf6IJ0L0+10bkwL6FyZTqFzZ/oI1QXT2VQ3THdSXTFtSXXHtJDqkukD
VLdMp1NdM/2U6p7pQdQXTFtT3zAN1FdMi6jvmN5Gfcn0Yepbpi9TXzOdRX3P
dBHNhU/r8S6wl/d80ptGDHQy6GiDDwlrKzMlnz4fdCjsya6VFdASMitaKGkD
1YRpC7t797WPpUNHUEQbfFv8/FaQcTl41+/sig9og4KbAwvt0x+w358aM7G+
3e8B1M6QCLrs2yDRSTXTP6sMutVnrpoYtAFXr0vON0v4Xb3rv5ueFp9XCreX
26QEKFpB75K81GtLKZR9GD7gaHIrbP3mqIOi95yfJuqvk0S2gkrp9qvIogTc
fRZuVAS1gkjqm8QrK2b7Uf57eLYspBhy8sLv2zi1An+hs6XgYREoNgaO8TBu
Ba5/nMeljw/p1oD1o0FnI+X34XTDB9urSg2I0+1uue27Dyn7n+2TpmlgoEg9
NK+37irs6hs0URrY++7MTr6TFOxaLVW8EA28eZxxRKssZOezKb/mUtrRQkic
u+IbPxcN1Psd03dqLYD8TvczESYa4Pp5zLWoC8naFrj31C80oCMf9vpWXVZq
WsC5IiLaJi4fzhrfe9+T2QJJgS5vE3v7ID3l1jKL6BYwG9K10srjHgzd/Ken
ILQFTnQPDlR257F6MVRM2i9OyIOoB3Z/iPktsPOnlraRf+fCtR1mQ7N4LcDN
F0MH3xEdPWrw7nPXR6iXC+ueXBtt1qGGxAfJHeaeCGEnYne45PXW42CLOyMH
5MB55wPlolg1bP42ajcvKwu0L8sqIyPUIDIruRI1LIvVr6umX4V+YCYECz9z
lLupwdp6x+kei7tw8u/Ow90j1cDNuxep005YGajhzZQxh4JsM2Dhlp9PCbtU
oHzvldK+Lx38hwe8CJKqoGBm6Y+a3jlxIMdzbrRYBYl7nWcpNamg3JWwMC9S
BdEeO38QQSrrpz281FOyuDvgWVdz3cRDBT7LLL1KPVJgV3hhXwcLFXDzt2r6
ICNvYxXYry0T8JfeBsc3Swcf7W4GRxHv1eZVt0Agdt0gKW2Gt3UvwnyzJfCD
++Tc0vhmyF5VbCKyuA5F/+wq1EY1Q8xL93XzHiWx/t4cmZvhfOAquK65Mc5D
0AyTjc7NtW+7Amv6ndvjb9X7ff/6QVauKjzWpBnKxry05b2/BGa7bSOlWiXM
Caj70N/7Ikwda6rUyJTwaOux0W8sz4KwxMDF4KoSvILdpjdpYuDmvkV8p2gl
GF+arsYF0WzebIv1M53ldxwmaCLEEUIlHLzwQDiiYz/MPbq1O95GCZw/JczJ
0Mp4Smh8Hbs/U7sOerGi908JOYlJE9Yr3/BnLFYk8yVNMMmj77jtimAMvpTm
FypqgvDzI5arNfvR4Ys5WxT2TWA9x0Z/rNlh5OZf8YvpKT6C42gpv20bktwI
9dv9Z8xWx6CndVRDmlcjcH457MyoNp5TI1xyzwr+8Q8xygb8/jLIuBHemBaW
xgkvotHqg5eT0x5DqnH/GvncBHSVrF3W5fsYOg9NmtesuYL/mL9cI3B5DKav
k193OSYiN4+/8Zp6US/sKnY2rxrdkdkAexSrhgwwv44THKeV2/g3AOff6ivS
2kh+AzTmG0wab3QTL3x8LF4D9Lc/XOu0/BbWbJhyyipPAWPkNVcsen1vSMbA
uX4BCuCf2vTYyiMFS23F3+W5KWBJid0dSWcKcv7g3/PikNPpO5j93HCwt7Qe
9ueE57loUvHtTBWKg+qB44nk29tKtPPqIS1FXiGtT8PN4/pUiyzqoawt7jdB
eDr+tr3hYGxpHTxJnNgo7PXhxvx0Z/muOjBcnzN8pcVdPDN1rpuToA7MzoU9
UxbeRc6vJstc7/lvzsQjfyX3yGS1sPB4tTYgMwsLPI4mm4TWAsc3P2eNzgoQ
1sLefbZGf9/OwekOEmmpTS1EZzxrjFiBuP3nyBBjeQ3UZuIA914ukFT42npE
1MD6UUZJUm0ubnB95XRVVANd/22PNhbkIeefuxeXhgri83ClgddLN4UcjG/z
zB7Ou4fRy5wvR0TKgeOtRUX3byi95DDWFuJj3fKx/4wVGXwnOUjcx0QpTufj
rCOOm0KV1fD1lY0TvHs5Zbdi0OisqGoo6XunQKkpwP8Kzlub+VXDUvOYW1Yu
hcj5eaPzjrP+UYX4n8/7q9M0VbAlLmdqx1dS9Fmrjuk+WQUc/42qCroo9K+C
g0OfZifb30f5nM+uJ/OrYMikkqTu8PtoEvt4VVd7JVyK+mJ2SC83zWvLGOQQ
Wwn2z1Y3a2VF2NdznunRgErIMOSX8a2KkeMLV0uL9Ihdxdg9+k6VTdcjeBTm
LzSwKEH7gGMH/cWPgOPRp01fnpQGPYJ2bXR96chSvLLkxjkrj0cQPCy40CSg
FB8nHFrk1/0Q9Hdkr43u5bjhr/164uMfQnSV4QdeVhk+/P61kV7IQxjd2fZE
ZPIAOd5JNCquFPs+wPwJ3lKxVgZTNw7damFcju9DXEIUiTLg+Di9oyjCJVQG
AvXXf2r0KzDIW3Q0ViiD2n++VNmIKnC514a9ko+cQK8opffhJ/ocfk3/B3n0
Pcjxl+GPut9BK/pdeEDrwBhaF3C8bkzrhjp6Dgyj5wJzek58Fax7btDQPqAv
7QvcoH3CWto3eE37iBwPOtM+Yy7tO/TQOeBkOhfg8kMinRsMoHPE0XSusJjO
GY/RucMIqgP8YKerC2iiOsFgqhsYT3WEHJ9uojrD1VR3MIXqEMuoLoHLM65U
tzCT6hgzqK4hguocbanuwYP6AM9SX8Dn1Cc4hPoGVlAfIcfLYuozfHdL13fg
R32I/tSXwOWrRupbCKQ+xqXU15BKfY5S6nv4ieYAbqG5AG40J9CT5gb8QnME
OX4vpzmDE2juwCmaQziQ5hJwee/tWd3cgniaY6j6XjfXoJXmHBbQ3IMbNAcx
ieYi7KA5idE0NyGT5ihyeUKPr5uz6ENzF+7THEZ3msvA5U97mttQSXMczWiu
gynNeXxfrZv70EQ+gLmTdL4AV8kn8DT5BjwnH0Eu3ziSz6AT+Q78RT6E71br
fAm4PCx7pfMtMLDQ+Rgmkq/BfPI53Ey+B5+TD6Iv+SLUkU/iEPJNsCAfRS5v
rSOfxXnkuzCRfBivPtf5MnD5XH+2zrdhGvk4rhHrfB32kM/j0zk634fZxAGY
0379IxfkGBIn4Pp3Om7AJOII5PLfAuIMTLqo4w60Jw7BX+N0XMLuC8TELZhK
HIMviGtwBXEOrtum4x6cThyEcuIiNCdOQp6ljpswlzgKuTzqR5yFIcRdOIc4
DFOJy9j9RQNxG5YRx6HBah3X4TbiPOTX67gPlxIH4m7iQnQmTsQlxI1YTxyJ
XD4OJc7E/cSd6EMcipeIS9l9ShpxK7YSx2IJcS3+QpyLT4h7cTNxMOr/o+Ni
XEycjKaOOm7GV8TRyOX1U8TZOJ+4G0OIw3E9cTm739lD3I4fiOPxBHE9XibO
x5vE/XiQcgCWUC7ATZQTcCvlBhxIOQK5+4NblDPwEOUOjKYcgqaUS9h9UwLl
FjSlHIN2lGswk3IO3qXcgxcoB+F8ykUYQTkJqyg3oRXlKOTuM+5TzsJnlLvw
OuUw3EO5jN1/GTbqchtOphyHJyjXYTXlPDSn3IcZlAPxJuVCFFNORGfKjcin
HInc/Uoz5UxcTLkTCyiHopJyKbuP20S5FedTjsU3lGvxOeVcjKDcizLKwTiU
cjGmUk5GMeVmXE45Grn7nr8oZ2Mq5W5soByO7pTL2f1gOeV29KUcjyLK9diP
cj62Uu7HdroHwJ10L8DuG/Uu6+4NcCvdI7D7ry/onoFp7vP/Bz9Nagc=
                    
                    "]]]][#/{
                    Rational[3, 2], 
                    Rational[3, 2]}]& )[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                   If[
                   CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     2]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     2]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[
                    Part[CalculateUtilities`GraphicsUtilities`Private`scaled, 
                    1] - 0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt]}]],
                   TraditionalForm, Graphics]]}, AspectRatio -> 1, Frame -> 
              True, FrameLabel -> {
                FormBox["x", TraditionalForm], 
                FormBox["y", TraditionalForm]}, ImageSize -> {300.}, 
              Method -> {
               "TransparentPolygonMesh" -> True, "AxesInFront" -> True}, 
              PlotRange -> NCache[{{
                  Rational[-1, 4], 
                  Rational[5, 4]}, {
                  Rational[-5, 4], 
                  Rational[1, 4]}}, {{-0.25, 1.25}, {-1.25, 0.25}}], 
              PlotRangeClipping -> True, PlotRangePadding -> {
                Scaled[0.02], 
                Scaled[0.02]}, RotateLabel -> False}], TraditionalForm]], 
          "Output", {}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "3", "datatypes" -> 
    "Solve", "timedout" -> "", "timedoutpods" -> "", "timing" -> "0.878", 
    "parsetiming" -> "0.498", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa3081hbae9b9d7d13ih70000545cf680ah85ee80", "host" -> 
    "http://www5a.wolframalpha.com", "server" -> "63", "related" -> 
    "http://www5a.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa3091hbae9b9d7d13ih7000012b84bd5060ca2c1&s=63", "version" -> "2.6"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -7., 
    "Date" -> {2014, 9, 8, 0, 45, 3.58275`7.306791493016748}, "Line" -> 134, 
    "SessionID" -> 24190340719069411275}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Result", "Result", 1, 1, "Input", "Reduce[x - y < 1/2, {y}]"}, 
   Typeset`open$$ = False, Typeset`newq$$ = "Solve x - y < (1/2) for y"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{295., {57., 26.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 RowBox[{
  RowBox[{"x", "\[Element]", "Reals"}], "&&", 
  RowBox[{"y", ">", 
   RowBox[{
    FractionBox["1", "2"], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      RowBox[{"2", " ", "x"}]}], ")"}]}]}]}]], "Output",
 CellChangeTimes->{3.619151103806905*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "/", "2"}], ")"}], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      RowBox[{"2", "x"}]}], ")"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.619151168606612*^9, 3.619151275853035*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1:eJwt1Ps/1XcAx3GXlUJmLXSayi2LRh6iUultklLkHrrIpVSystJGayGORy1d
jDWXI+o4coujG9nR53DknCXhOIdDx/kiCUe+EbWssu3x2A+vx/M/eBmHHfM5
oKaiouLxb/+57cBQG3/Yf6M19EdmZijysnxnGMWwg1/k1+feT1NEX0t66Q7D
Bad+W2v+Zooi1g4LOLkMPwiVu8IGlRRZ17qK+ytjP0Iy87qfdFKEnyOwv8iI
Qdr48qasCookJV6I/YWRjEn2+rJV+yiyP4ZmnGdkoGZO6NGDDxVkTobb9dfj
BYhv7lDWhfaQqlbbLVuWVGCYwzBYYygngUnybsGFu7Ckts79vKebHKs8YZU5
+QAFX7Inu852kYkrHSJVVYKG3Y8vEsiIqK6RtGyoh2GeoVFmXwc5HOc2L2i0
Ae6bdse1n5eSurm2M2XfCWH0d0SChZuEFLIbPi1a9hhW5bkJx1+JiZN+7Q3f
8ifojblu3VHURqyE8upGyxZEstLYrMhWInHyHSsea0XgmSDTMpOnJErziFhq
I8ZypcVuv2tNpEkWUKtzqR2RO7yY/c9FxNc1sG9gQIJdJzwdV69uJKvzLwTk
m3Uggwx5kfsC0vspXXIovhNOarKd1qp15IVbC1tfIEOUrD6a84ZHuFlUXJtx
N5yyEhfWxFYRzjn18xanniGqZ/xZkMFtMhW+ayTiDzkCe7+5JTIrIVouKT6V
Bgp4kZzOkeRr5LTuC+2+PRQSXu8NV4QnE+2HK1Q6PXqhkkRr8k8mwfEHz4+C
6V7kC8eK4wPzwCpIZZuy+sB3e7x2XX0xgv3tmudu78frkhuHdwTexj3pgfSH
b/tRdMs6Z/JeFRyecNUGrz6HKDRFz6aKB6PNEVPpLgNIWJAl9ZxfB3s7+7S7
gwOQtEpcxNkCUBMX/2QzX+B00xrzy/qNGF3lzWTYDoLb4qIXIRLBXGk1oto+
iMyyqiIN9yY0mJ0URye+hG66xE0w6ykuS6ThPmZDWFJcKizY2gral5+m1jAE
xc0E01nn2nDbX2+Tw/fD2F9qmXK8Xwx2c1Ju//wRuOZorH+0TIJ3wj0/za8f
wdjlB2/NkqXoTSNTukeV4JvGK43lHXjbtp5xVmcUo+wfbT9bLEN0hgk/jjeK
3uWbE97EdsGg2UR3IPgVrLM3G4lqu+ErLftg+OkVCkuC3jt8eIaJfdej5CVj
GCDOXdX+PSAhFUwddxpn6oK1FmcqUNMStV2xg0ZMXtdVXq4C9zdaflHuTSPq
Zz+TPWwFygw5LI8AGoEO2xxyyhXIlmXfSQ2jYVdpf5DxSIGTXil9mnE0RvK1
BXoTCqxw2uuoUUhjZ0LNKR13CuYVi9Q7i2i4B9vPLvemYLJEJiospeGygZvm
EUBh4QcfP9dKGjZ/cYpSwyjMrt56hMmjoR2d1qEZR6FvpV2WejuN+n2HbDUK
KcivjQe3S2lUOz6vLSylIJtXYcaW0eB+FezmWknhqdKC66ygwer0DWHyKPBu
LhUmDtOI9cQl9XYK1fo9qd6jNKKtahhsGYU7zGwfY5pGhJY9x1lBoSRcT8Gf
pOEntOQlDlPgiMXsK+9obONwthjTFPK/vXI4ZJqGU5JRO3+SAovrsdLmI421
oTnBIdMUfl+qNTUzQ+P/f+Ef0cKOKw==
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{0, 1}, {-0.49999997959183673`, 0.49999997959183673`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.6191511909262667`*^9, {3.6191512314420137`*^9, 3.619151276427354*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"prob", "=", 
  RowBox[{"RegionPlot", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"x", "<", 
        RowBox[{"1", "-", "x"}]}], "&&", 
       RowBox[{"y", ">", 
        RowBox[{"1", "-", "y"}]}], "&&", 
       RowBox[{"y", "<", 
        RowBox[{"x", "+", 
         RowBox[{"1", "/", "2"}]}]}]}], ")"}], "||", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"y", "<", 
        RowBox[{"1", "-", "y"}]}], "&&", 
       RowBox[{"x", ">", 
        RowBox[{"1", "-", "x"}]}], "&&", 
       RowBox[{"x", "<", 
        RowBox[{"y", "+", 
         RowBox[{"1", "/", "2"}]}]}]}], ")"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "0", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"y", ",", "0", ",", "1"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6191539512052507`*^9, 3.619154166191485*^9}, {
  3.619154209162634*^9, 3.6191542113185167`*^9}}],

Cell[BoxData[
 GraphicsBox[GraphicsComplexBox[CompressedData["
1:eJy9mXl0lNUZxgMiFkviAgpOgApug40iy4Ao4SJjAyqFCUX0AE4tLagMeyk4
qbZYYVisgDCUxSAMWxXEiUKr4ACCAXRYBCUMRIQQMiEsITAsQgXSm3Pyu1/O
S76T//wnOc/3vve79z7f8y73TvOBI3oPqp2UlFSo/1T83/fsy+2CsQKVu/3e
zMmJFQrc88tGIyYl1qkJtTouiAQKDcb+woxd/eKuXGMHt1lVr27cVWQw/g3U
bdcCiajxB+MPLng+f3hyPG4w4+MXP/AEY7vNeDDjwYwHT6uzMuYKHjOY93Xp
+UyLuGuveR+Y94F5H5j3gTvl/LWL133cYN7/7rJT51zBmHk/mPeDeT+Y94N5
P/hE/x4fBBInDGa+i1fe3hJI5Jv5wMwHZj4w84GZD8x84Lk3Nb09HDplMPNn
9mk1J+Y5ZOYHMz+Y+cHMD2Z+MPODmR+csbo0K+Y5bbCdjqVupS6lzqRO5HeV
vEse7OJIxo2MC6lzqVOpK/nd5XeQcSnjTsaRjAOpW6kr+Z1lHMu4lHEl40Dq
VOpGxrWMSxlHUudSdzKOZdzJuJA6lXEp40bqWMZRTbpetXL3y87wETW3Yd72
uGuN6v9caI/He1TV7vjQlGDsC1XvhtGP+ZPj6rNjI9LaB7epTz/quiQUKVbD
//XJNzHPLjWoX4P6UV+Jmrk4a20k8K1qULdoTMJxQp2+nPpWcjxPbfp4zQ+O
6EnVPXP9AK/7gBrxwsQMt79ULX3f+3A4dNDMyzqYl3UwL+tgXtbBvKyDeVkH
87IO5mUd8NGkXt+wz1lm4ip8sPMdUxPzzbqIe3Qv+SIO0ankjzhBZ5JPdI1u
JL/oEl1IvtEZOpD8oyN0IL8HukEX8AQv8AQvsq5LHcm6LnUl67jUmazTUney
7kodyropdSnrnNSprENSt/B04sF2jqivQKU0LVxV7Fpq/vN88/jsnl73EfN8
7r46byYchSp9fdv/BWM5amTasE8DiUJ1zjd2QfvgpyrjH3knHdGj6gPH2i77
PRtUs/3pd4dDRSqn6OrZSGCzOv/Q8j5uf1zd3Gnhl8nxLWrHmylTYp5iNXhW
l9le99dq8YGx633OY+qLE0cGh0M7VFarw2fLy4+plNATTZKSdivPxG73B2Ml
KtLj9onO8B7l/D7czxk+rl65VFjq8X6nrj3SeHokcEI1Wrq6rz85T+0LjP/S
4z2pcntN2BiK7FMfHiz5sch1So3+qY8z6tuvJrTJTPMnl6pf/fu+dxKOfNVv
8toXk+Olamfvi5cd0e8ND84Vc7b7nIfNf563PtR8dihyWmVd2zrQ7f/BYPzg
DR7hDR7hDR7hDR7hDR7hDR7hDR7hDR7hDR7hDR7hDR7hDR7hDR7hDR7hDR7h
DR7teAETh8QdvMILz/HDDo/857nMi6yLeVkXGD/GST/yg1yX1IWcR8bXhGuj
F7ydmGow763bburXrmDZdePAsq7AA5j3oRP8yUP4g/FHN/iTl/AHm/xQqSP8
yVP4g/FHV/iTt/A3eQw+KnWGP3kMfzD+6A5/8hr+YPzRIbzZ8QpPdjzCix1v
8GDHE/u244V92vHAvuz2zX7JI2DyBpg8ASYvgMkDYOIeTJz/XPPI7wg2/WMl
hheek3eJJ/KujH/G8dxuHH0AvIN5D3ncxHNlHgfTJzAezHjyPP7keTB9BOPB
jKcO4E8dANNnMB7MeOoE/tQJMH0I48GMp47gTx0Byz4WbM6FlXUGf+oM2I53
MH5238GOdzD+dt/Bjncw/nbfwY53MP5238GOd7DpU2y+gx3vYPxr+g6yXso6
Rt9NXNJ389zUTVEX8QPTf8s6B6b/lnUNTP8t6xiY/lvWLbA5l4g6BTbnW1GX
wOa8K/oF8rXhofK8AeZ8AeY8Aeb8AOa8YPrTyvOByV+V5wHyJ/mNvAfPPCev
Y4dn7OR57PCMnbyPHZ6xUwewwzN26gJ2eMZOncAOz9ipG+wLP/o3/MDy/gt/
9IY/+8SO3rCzT+zoDTv7xI7esLNPc26v1Bt29okdvWH/7NHn+rurnPdXVLjV
uv6ereuHizqk6L56cNEDub4q53/85b1YrE6DjU7dJzWccSktWOU+AH95r/X2
6mcHRmdtU5sf/3p2pMr9AP7ynso9cO6NQ3UfNfLYvGtFVe4L8Jf3UK9NHrY3
oPuqZrOGvJScat0f4C/vnfYfTlkeK8pTOzo/vttV5T4Bf3nv1KZDzjin7ruy
Tvyyo7fK/QL+8h5q2rTMp/xV+rDlFWn2ihXXYPgEwxcYPsDsF8x+wKwX3Kdi
+qQCdX7Px9PmxOar7tsOb/NV6GLNqrtu0edQ7Mf3tH6wZas1Bq+Y0//R9nu/
UBdH5zwS1HXzqw4DvovO+tTYX8x47/vYjG1qabM35kV0XZwfPVN/ko4L7Hde
KPib/7e7VO9oZu24rnsef9scp44L7MV7bnsneeK3KmlsC19yUomq6xz7u2j5
N8beteXqgd6jeeqj5ue+c+m65fUN+Mml4wJ79vg+7cJPHFADdn7Zyavr0trN
V3cEdFxgvxS7cGPSooPqZn9wWUCfwxo6Fr4X03GBvXfF57p22Pzn+X/vHZQS
1ufQEaO6jHTqvLh1UfPU4ANlxm/0qKlud0sLw6sdj/AM7/AqeZS8SZ4kL5IH
uW8wukSnz7uz93o+OmLWX7vhjVfLw0eu48POr27Z0HT/C0fN85yNeYOcv7fw
mvnpy0P14wZ7fct3eVIsPDAj5Zbo58UG1280roN/vYVvTRwalxhSYvC6zd0W
hYZaeMOCcIFD9zXgl4c3rhdNtfDQp8Y/5f76pMF3Oo6PSkQt7Ljg+cT3aqnB
uVvW5juyLIzO0T3P7faN7omDmnggDoiLmnghLoiTmngiToibmngjboijmngk
joirmngljogr7HZxhV4X95rn9Ou+MGPb+0sjVe6zB2SvXBWq5j678U+fOw+c
WaGmT9s4PVbNffalfkfzw2fXqfTHZlwqr+Y+u82ANTP8un6djL/4B2c199kl
N//YNlXXq3nvtI56qrnP3n0w2+fV9albeu22/mrusx9s1zk9rOvRhZJv3w1V
c58deOtwSpKuP0uCS+pEq7nPLigcX+DR9Sazy5hhiWrus+FJ1vnnHx+W++uy
+df9DgCPdnVe1nFZp2UdlnVW1lEwdUnet9On8B35rvQl8ncKvrOsq+yHPobv
jg7oW+TvGuhC1mX4oM9BJ+iGvkb+DoKOZF03fXFlH4Su0Bl9j/zdBN3JvoDv
QZ+EDtElfZH8nQWdyr6C70kfhW7RMX2T/F0GXcu+BD3QZ6FzdE9fJX/HIQ5k
X4Oe6MOIC+KEvkv+7kPc8D7s1Mkhx7a/+1ryuwYPzjiUfEt8he1zcLOm3a+U
OwrV7VPueqRlLEft+KrxIGf0qPpb8Xtjh+rzUtaY4zs9/rg633zmoVjRFuW8
e117vz73r9i99w2/Pg/t2z51YUif4z/e+NbMZH3+mTCu/y+i+lxev9FDf/Lq
806be9JGJfQ5+6Xhu1xhfb4p2HXlgCNeqjZvGXFTkj7PjC9tuyiyz+pnWNeV
e+duDPQ+ZP7Lvodx2aktbglnWnmZfbAv9sG+2Af7Yh/si32wL/bBvtgH+2If
7It1sC7yBnHPPro99+qwxZ0svHD8mJ3Rk+uMH+Owt8j0BWslrTT/eY5u0MXp
EZnLA4tPmXWceXptcXkvix/53G4dkm/eS96tU3/fqfwz89XIUeNmxXwFKu2F
UI9WZVPNuF4z0jalXHSYPCn9uSdhn+RRWTf/mbWzqztYppo2ve2AR5/7sy9O
6eUst+ou/tRd7m3wJ07gh/nIm6y3X/61A4l8C9ctu1JvUhurjpAXsd865YnX
g3MsHFmgVjnLrDpD3sO+tcOEu9v3sfBj9z/hjOdZdYi8hr3zn48e8U22cPD1
wsuudladIm9hnx+dsDpSbOEze9/cHphp1THykjlPNb9/YvJvLPx02n0LYmes
Okfewe7xb+vrXWLh5W9uHe7sdcjwKHmSPMh9yn3Idcp1yHi4euPntz552dLp
mtaLVro75lr5sKCwZ/xC1OAZ2273uw/sNvhUszVPBzvsNThj7LNN4rNjBi/e
ebHUdT7/Z5unJp7B9BXoOW1D9le+/VacPjyvTr34RKvvx49xPLcbR5/BuPxX
hrUOTrLed/DJvFHJLuucQB+B/+Q7Os+PtLfsU88sy3cVWecI+gT8229KuSEe
t+yPZo91e2cdM5g+AP+ioYd9ybMte3G3bh8GulrnBOo8/jMb5+x1PWnZg+ca
3RE+a50jqOP4d8kdn+49Z9m7Lix5Pbbo1HV8whPP7XjCH56w2/GEPzxht+MJ
f3jCbscT/vCE3Y4n/OEJux1P+FOXyOPkafIyed3Uy8q8zn0u5y3exzmBPMA5
wNwTVt5TMI73MM7ES2Wdog5Rp4gv6pQ8p5n8VjkP89rVjZrqRE11oaY6UFPe
rynPg9skGhS6Kn73/eOZSM7ZFerm7q/dGdXnkGEF62pl6T6kYEHR016t83um
X12aqs8ln53r8feE1vWpZncv9eq8P+2p/6wOaF13H7vpL2F9rhi8sGmJQ+t0
8c6B3ZJ0Heh0YWKTsNbxtXvr3JWpzwkNnzntceu+//nXlp0IVfwev6jvxJjW
bf4r93j9FffpFzes9ek+ftId57eGdJ2Y2+OB0+Vap65Nua2iuo8fuXh6i6Du
y48OnT03ofv4jEs/9nVqXc5oPLhWqu7Lm/V88a2I7rPTc9sPces6cn7JVxs9
WocnR9z0nU/32TsuP3K+SPcD81L3Px7UdQU90jewb3hgn+ybfbFP9sG+WDf7
YJ2sm3WxTtbBuvgOfBd45zvAM7zDKzzDI7zCGzzCE7zBCzz9HzZXo1g=
   "], {{
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      0.3], EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNWHm819MWPfukRLjSpDTcXimVSpRIV4OG20xXuc2DokiRkPCS9DLLMw+R
JGQMlQiZIkqUuTlDmd78DI+Htax1P9cf+7f39/z22eecPZ29T8OxUwZOziml
2/FTAbhdpPQa8CTAXwGTAcMAa5P+rwi4CXA2YDhgnccqA24BTAWMAGwE7Aeo
CjgAsA9gX8BtgGmAkYANnref/6ecSoDxgM6AHoCD/P/+gOqWVQC4A3A+YBTg
fa9TC3Cwac6rbVzN8yt7nUMsqwbgLsB0wGjAR5ZRH9DgD/IKjWv/QRb30dBj
dQB/MqbsRsZ1ATkkqynPFpJ1GGAM6NGAbaA3e80mgFMxNhawg/oKrdGM5wjJ
bQGoCbox8OGABYCLAWOpU4yPAJzK/YX21Nz7quYzj8f4OMAu0CcAjgN0BJyJ
sTMAe0D3B/4V+Cvb4RjAsYCJGJ8A+AL06cCnAT4DPc48nQB3A2bwfIBull1E
fYC3DuB40F0BHbx2F8vu4HO1sP7G+nw8Zy/P4X57G1N2A/DXB3QHfRqgJ6Av
oJ/pYsAAz+e8puBtAjgR9EDz9QeUGJO3EfUG6OOxYs8v9l65jwmeP4j2AG9z
wMnUD2AwoBTQGmOtAKeAfhFwBmAIYEVSPDHmTvceTkqKJfo/Y2x9Ulzt7TH6
LH13hGnGyDtJ8VPFaw70OchH/yyLqQP8PdL0vv6mPxzkser+Hp3ktzU8n/8z
lj5Oio16SfFG/gL/x7iolcrj7WDLquPv6pbJ7w+SYrWm7dPZOuV8xghjgD7P
+ChM5XHVMJXHFb+3JMXMoV6jYSqP0ULLGmN+xuCmpHx0YFJcNPMcxlRzy2Rs
NvVcxmwT7+fNpNy3F2AxYGZSfNGGk22v0Y5XxsBYxxZ9epzjg759muOGPs84
Y2wV+Zv+3NVzulgvHTzG7wcBs5LibIJjlHG1KilOWvq7m2UtAcxO5XmUuu5h
WcX+puwyvy6Lq14+A+cwlh8BzEnlsUVf7es5/f3NOQP8zbgZYFmM9W4+42OA
uanc3+mrJ6Xy2BtooB8zphhPg/3fgJCuqecnAFcmxd+UpJjh+JOAq5Pi72nA
tUnxdiTmrk6Kv7agjwKcCfos2w+fv8doqddmLultPVa0fMbahUn+RF86NymW
GEcHmGYs0M8ZG4wdxt0I85xjmnLOMw/5mYdKrLtGls9cd5FtSpo+P9rrXmCa
8tcArvf+R/gOaQ9YmeSbrQCXmm5vm44zfZnpTrbzeNM9bWf6yVXWMW1xhe12
km00wfRfzE9/uNxyOPcY7Gce8J+t04mWM8Q2oa6vMz0UsDzJJkN9pkk+1w22
E+l+3gPXutG2r2D7nG3d3mxdV7K+p1r/t9pmpK/xfkptt2m2xe22TYHtc771
PN+2r2v7zLBdqL9Z1idtMt08D1m/1Oc9tiX57wNckhSn91s3rWyfmaYfsM0o
k/a/2PxHQwGLPJ86nm35T/k8PMujtkdf62muadrqStuLtppjGz1sm5F+3DYm
z51JflbD9rnW8pfZZkOtv6tt06VJvjLIZ5rns0yy/cI2ZB05zHa76Q92u9n2
mmo70UaTbeMKtucttidteJvtxj3eZd1Ps/0KbIf5tsVqwKveM214t21Imyyw
jmfbZp2s7/usc+p6kWnaZLFt9RNgIW2S5CN3WlczbVeenT5C2ze2jpfYbnOs
d+qcPsKcXuZHtD3tTh9kXTvK9nzEdptrG9OmtPmTtsNzSTHPdUeF6r+Vts9S
24X1xrO2BW3FHDrB9nzadn7GfNl2WmF+xuUy65C+QJ8rtbw15nnJ+yjbw8vA
rZPupueTajiu8aLl0Nd4H9BPXzAf9TzPslrZNqs89xXPZf7oF/oe4rHVlkkf
px/Th9+w3Ja2/3LzLPJ/HP806Y5uwzmh+535/q2k+553/YkhmjoZGOJjTfZ2
Un3G2uzkUB1GelCoHmPd9G7SeBXPXW+ZJZbBGm1rUh3DGmZwaD5rlPeS6pUD
Pb7JckpZS4bqpyHGrJs+TKqrano/Jd7H0BAf67ZhxqxnPkmq5+qZ52PPHR7i
Y111ivfC+u7npLEm5tniuQG6p+v5fwO22+7sa0gfkXTv7Eiqa+jf2zy23TT5
d5qH/OxNaJsjPYc2Yh30X9uM9mJ/tNP0fzz/CNtrgG35eVLdRTk/AL4EtAXs
TqrBjkqqu0izbmJfs9s87Gs+N893lkU533v+Ud7TZ5bBvony2wG+Tqrr2lku
67Qir7/H8ovMQ7396DnkZ89F+mj717f2GfrR3+xj9IW/2x9o83/YT2iTf9ku
XUJ75T6LQrqjrjqFzvO7bkM2a21f+Kd9oBbGD3YPdkJId229x/95b8Q/md5s
/6AP/2K6ifH/PX5cyE60UXJfybk9Qt+kORb2pbL6m75aIUSzLu8e0lc7/1/B
NXpF003Nv5fHWc/v7fF9TLOvYK3PHoD1P8cqebwgNN7c45U9t0qoJ2HPQFzF
/Pubbmae/Tze0HyFtvOvtjVlF5ifemavy/zG2o99CPdVLURT/zVC3y28twM9
t6rlNPe8aqYLfWbqj7JreW5t02W9NP9r5LWqey7z3DdJuY57Ze1eZMy+nf01
Y72ubcSxeh5nvcy6mf1yXfOTp5vnk6e7eTjGepd9Antw9u8NPbePxymvMPRf
2bwG5ikO/dfdvI0sh703ewbW0/xmbc11Skzz/8NC/T//57xDTfcCbmz5TcxD
/saWz/HBln+KcQvT5G1m/t6hNShzof2bvn24+clD3NJz2XfwjYB32RGmOd4+
VEOznio1H3ledtwyZvuG5pCf9yH7HN6HvOvY5/DeZi3NtzzWYq8n1ZGsa7hO
G8vsE9of98ac3CEUp11D8c/Y7xjKI8whzMHHh3II82LnUJ7Zab42lnGc5ZC3
k/nLzkxdMh92C8UycXfTu712W8vuYvm8+5jvmOvod8X2gU1w2B9CNdp64Puy
9PsOYHHWOa8B9Mx60/wA9JKsPnAT5WfVEG+CXpBly5cAt2at8yrgjiwffR0w
P8tv7gScm5VznwB9WVb+Yo9/uvd8I/CUrNx9PeizsmLsOtAds2qoG0Dz8ZW5
nvcJ5/NO4f3NeoB5nvc573Xmf9YOrEMq2ha8L3lH8r5gnbHO+aa/fY/n6WP7
ct+97Z/UUV/7z83AZ2fdK7xfWHPw7md9wTqgqvfDfVT2Hkq8n43moV14T3Gf
G7xH7mcvn2Owz7LR36yRbgU+J+sOux301Kx7aD7jBfS9oGcBP45v3hNzQD8Z
yvczQT8WunNuAr0qlOfuATyeVcd/xbNn+fwttHMoP/Gd+5VQHvkW8FRWrF0B
/HTorvgQ8GBWHM0G/W5Wf3AD7RbKzYsAy7Lq/uuAnwnl5qtBLw/dDzNAPxy6
t+iL/Rx3S3mWrFinPz5kn+TbzkT7P+sFvhMVOdboV/SRrzzezvhM03cDt8zK
PYwvjlMG11kYWov1Dtfo6Fib6LG7wLMmlPPuAb02lMv2mJ/7WYjxdaF8UR30
zqw+4wv7LX3+foxtCOWmr+2H3O9a+wT9gf0F6zTeNa/hZ2uoF3wF9OZQ/7ce
9Oehfm4b6EpZ/RPt8GXIFguAW2XV9d2BPw7lukLGa1Y/sQF4d6gnW8s9h/rF
daAvCvWRb9P+oR7xLdCfhnq7d0DPCvWL9JFvQn7yOujtoZ6V/tXfPvYy8KRQ
v/s8cKes/mcF6Guz7u/NwN+H+sVnQT+XlSOXA6/Iyp2rOC8r/11Ev8uquVYD
v5SVL18AfjErV64EzMu6y58BXpmVi5cCLs+qh5YBrsqqUZ4D3JhV5z3KM2XV
al2BT8i6Z7Yyn2X1x0+BZ25WPbQF+OdQz0qf3Wi/Zax8FIoX+kUN+8aOpPfQ
Y41Zu7fxON9MeUewL2Gfwl6G76XMaUc6H44zvTNpLuft8ngHyxhjObu8BuWz
nmE/sNa+dqL9jXcc+bel8v/4zsC7hXfM+6m8v6rp3MZx5rcdtGFWr7nNa7OX
ob7Y97LvfgP/nxd6q1gDemroDYNvB3ynYw/0KsanhN5CtoOuktXf7wKuk9Vn
vwk8PfQewJ6e8lt73RGmWfOzH2MNvtJ8p6byfq+eeUdGeZ3Pfo//bzZPfePh
5ue5h/rse0IxQP+vnbU/7u2LUMwwXj6kT2X19CXAA7N66A+A9856wxgMPCir
b+4AfGzWe0MR83To7aAf832oTpkWijHG146QTqnPWozxrPeP7xxLjKMLQrHN
uH4Y+L3Qm8Vw0MOy+un2wO+H6qP36O+hNxje66z/WOMNwXhpVu++LWQ/2m5y
KDcxL01nrg71V5+EYp7xfiHwklC/dE4orzGnHZ6Vl5mTLwD9YKgHOx/0A6He
bBTokVl9fPOs++9e6gH0/aE+7TzQi0N9FHVQ03rYEvYn+i1wznpzujSU+5j3
fgmdmef9MVQzXQqaAbHVMd6NsRyqJT8BfUjW+1BBlt/T5ytkrUH5fbNsRnt1
Bn4h9OZyEPNA1jtTD+BeWXVX5SyfoD/sm+X39PlLQrmeeX488Lisd5HPQjma
+Xks8Jisd4virFzPPF8x627gvbB/li/SD+tmnYH7H5C1V+6TNWAP74d7rOp9
Pka/Dr1X/uQcx/w2I3Qf8C5oAFw/q6beFYpPxuZvYZg9MQ==
         "]], 
        PolygonBox[CompressedData["
1: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
         
         "]]}]}, {}, {}, {}, {}}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
     LineBox[CompressedData["
1:eJwl0llTT3EAx+GjF8JYsjXjmqahm4qSFtpsUblT/1a0074nkX3iBSg7bS5C
2cslRfbtVfSccfGZ53x/5+r85qwuiGSWrAiCYEq9Hj5qOioIjnMNw5dPucCz
WtQzO8K1LONzfuI5fdaMXc51rOQsl3heX/TCrmI0T/Ilv3JI3/TKPsX1rOFr
fucl/dAbu5YbWM+3/Mkr+qV3dgM38jTn+JvX9Efz9hluYjPf8y+HNer5H1O4
R2narVTddH6bN7iF6YrXE3s7p7iD3eG3cjK8E05wkF0c4Dj7ORbeKTvZx8fs
4SP2soPdfMhOPmAX29nB+2zjPbazja28y2beYQtb2cgR1vMWG9jCzbzOGDbx
GItUqKt2BRtZwKM6ost2OeuYz8M6pIt2Gat5kAe0XxfsUp5gHnOVo0E7wgpm
M0v7NGCXsJR7makM9dvFLGYst2mr+uw4JmuVVobfqB7nSUzULu1Ugj44H4n6
/78vA/YaZ1A=
      "]], LineBox[CompressedData["
1:eJwl0sdOVGEAhuHDiF1RbFgT2EsQRF0QFpYr8BJcKJbgRqToArgHBCxYhiaQ
oIgVFLFiB8EG9q3YsYGKzx8Xb57z5Z+cmTkzaZt2bsxPiKKoU3EXObEoWqf1
+mDvYh0384zO6qNdwHpu4Tmd1yd7NxuYxwvq0Ge7kI3cyk5d1Be7iMe5jZfU
pa92MZu4nZfVrRG7hM3cwT3aqxZ7OWuYzm8sYytLeYLlHOW+cD9WhHuykuOs
5lVW8Rr3M1EHdcM+wJs8xKk6rFt2DW/zCJN0THfto7zHOOeGZ6gHdi17Wc+F
2qCHdgP7uZbLtEaP7BY+ZlN4TuG1emI38imbOcClHNQSrdYivdVi9TlP4TMt
0CrN0xvN133nc8L9lKxszdJrzdYd5zPD+2qGVmqaXmm6epxPCZ9Tk5WliXqp
SbrufEL4PoopU5FeKEFXnP/VgOs/XMExPudvdumX+u2fzOB3DvFHeKY67fo9
T3GYJ9kWfg/X7UxVmt7ZubH///V/SAluPg==
      "]]}}],
  AspectRatio->1,
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{Automatic, Automatic},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "ScalingFunctions" -> None, "TransparentPolygonMesh" -> True, 
    "AxesInFront" -> True},
  PlotRange->{{0, 1}, {0, 1}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.619154099027338*^9, 3.619154166603335*^9}, 
   3.6191542126756687`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<prob.pdf\>\"", ",", "prob"}], "]"}]], "Input",
 CellChangeTimes->{{3.6191542162195587`*^9, 3.619154230379076*^9}}],

Cell[BoxData["\<\"prob.pdf\"\>"], "Output",
 CellChangeTimes->{3.619154232096808*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "/", "2"}], ")"}], "*", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], " ", "+", " ", 
      RowBox[{"2", "*", "x"}]}], ")"}]}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", "0.5", ",", " ", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6191513172333527`*^9, 3.6191513173703747`*^9}}],

Cell[BoxData["0.125`"], "Output",
 CellChangeTimes->{{3.6191511522587347`*^9, 3.619151157936254*^9}, 
   3.6191513181875343`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"x", "-", "y"}], "<", 
    RowBox[{"(", 
     RowBox[{"1", "/", "2"}], ")"}]}], ",", "y"}], "]"}]], "Input",
 CellChangeTimes->{{3.619150952215646*^9, 3.619151010216682*^9}, 
   3.6191510798295593`*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Solve", "::", "fdimc"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"When parameter values satisfy the condition \
\[NoBreak]\\!\\(x \[Element] Reals\\)\[NoBreak], the solution set contains a \
full-dimensional component; use Reduce for complete solution information. \\!\
\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/Solve\\\", ButtonNote -> \
\\\"Solve::fdimc\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{{3.619150997341875*^9, 3.619151010674999*^9}, 
   3.619151080628254*^9}],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{{3.619150997344397*^9, 3.619151010677972*^9}, 
   3.619151080632505*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{"1", "/", "2"}], ")"}], 
   RowBox[{"(", 
    RowBox[{"1", "/", "2"}], ")"}], "*", 
   RowBox[{"(", 
    RowBox[{"1", "/", "2"}], ")"}]}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.61915080540086*^9, 3.619150811813857*^9}, {
  3.619151366332924*^9, 3.619151380453558*^9}, {3.619151533873526*^9, 
  3.6191515359409857`*^9}, {3.6191515696753187`*^9, 3.619151590735708*^9}, {
  3.6191517308707523`*^9, 3.619151732750146*^9}, {3.619152232974028*^9, 
  3.6191522331471767`*^9}}],

Cell[BoxData[
 FractionBox["1", "8"]], "Output",
 CellChangeTimes->{
  3.619150819050321*^9, {3.6191513699710712`*^9, 3.6191513811588373`*^9}, 
   3.619151536957244*^9, {3.6191515798489847`*^9, 3.61915159146905*^9}, 
   3.619151733794216*^9, 3.619152233631407*^9}]
}, Open  ]],

Cell[BoxData["z"], "Input",
 CellChangeTimes->{3.6191508402022467`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"avgWait", "[", 
    RowBox[{"n_", ",", "avgTime_"}], "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"Block", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"randtime", ",", "\[IndentingNewLine]", 
       RowBox[{"timelist", "=", 
        RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", "0"}], ",", 
        RowBox[{"i", "<", "n"}], ",", 
        RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"randtime", "=", 
          RowBox[{
           RowBox[{"-", "avgTime"}], " ", 
           RowBox[{"Log", "[", 
            RowBox[{"RandomReal", "[", 
             RowBox[{"{", 
              RowBox[{"0", ",", "1"}], "}"}], "]"}], "]"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"timelist", "=", 
          RowBox[{"Append", "[", 
           RowBox[{"timelist", ",", "randtime"}], "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Histogram", "[", 
          RowBox[{
           RowBox[{"Select", "[", 
            RowBox[{"timelist", ",", 
             RowBox[{
              RowBox[{"0", "\[LessEqual]", "#", "\[LessEqual]", "120"}], 
              "&"}]}], "]"}], ",", "24"}], "]"}], ",", "\[IndentingNewLine]", 
         
         RowBox[{"Plot", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"1", "/", "avgTime"}], ")"}], 
            RowBox[{"Exp", "[", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"(", 
                RowBox[{"1", "/", "avgTime"}], ")"}]}], "x"}], "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"x", ",", "0", ",", "120"}], "}"}]}], "]"}]}], "}"}], 
       "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.619126793631844*^9, 3.619127213261245*^9}, {
   3.619127274789469*^9, 3.619127375228982*^9}, {3.6191275255947123`*^9, 
   3.619127534140482*^9}, {3.619127595982956*^9, 3.619127597860767*^9}, {
   3.619127781436771*^9, 3.619127787534225*^9}, 3.619127827596531*^9, {
   3.6191278613344517`*^9, 3.6191278616376743`*^9}, {3.6191280346291656`*^9, 
   3.619128036856372*^9}, {3.619128070951416*^9, 3.6191281215217733`*^9}, {
   3.619128195895732*^9, 3.6191282077382307`*^9}, {3.6191282576207047`*^9, 
   3.6191283275234003`*^9}, {3.6191283714629593`*^9, 3.619128390055686*^9}, {
   3.6191284888578577`*^9, 3.619128512451853*^9}, {3.619128792995064*^9, 
   3.6191287931836767`*^9}, {3.619129191360023*^9, 3.619129201649678*^9}, 
   3.619129260701243*^9, {3.6191293185177402`*^9, 3.6191295126067257`*^9}, {
   3.619130974416231*^9, 3.619131013194537*^9}, {3.619132258280662*^9, 
   3.619132296703549*^9}, {3.619132380308888*^9, 3.619132411374262*^9}, {
   3.619134554190009*^9, 3.619134569157797*^9}, {3.6191346716612597`*^9, 
   3.6191346933548107`*^9}, {3.61914966359864*^9, 3.619149670488266*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"hist", ",", " ", "plot"}], "}"}], " ", "=", " ", 
  RowBox[{"avgWait", "[", 
   RowBox[{"10000", ",", "30"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6191273842927628`*^9, 3.619127393063014*^9}, {
  3.619127486693265*^9, 3.619127499337412*^9}, {3.619127659962384*^9, 
  3.619127682630163*^9}, {3.6191285438688393`*^9, 3.619128553589616*^9}, {
  3.619134573121778*^9, 3.6191345797809896`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[{
     {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
      Opacity[0.5319999999999999], Thickness[Small]}], {}, 
      {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], 
       EdgeForm[{Opacity[0.5319999999999999], Thickness[Small]}], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{0., 0}, {5., 1540}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{38.89338235294119, 
            46.718137254901976`}, {-64.12538344989952, 39.95498438197053}}],
          StatusArea[#, 1540]& ,
          TagBoxNote->"1540"],
         StyleBox["1540", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[1540, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{5., 0}, {10., 1321}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{46.093137254901976`, 
            53.917892156862756`}, {-49.41322399848423, 39.95498438197053}}],
          StatusArea[#, 1321]& ,
          TagBoxNote->"1321"],
         StyleBox["1321", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[1321, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{10., 0}, {15., 1109}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{53.292892156862756`, 
            61.117647058823536`}, {-35.17131621903199, 39.95498438197053}}],
          StatusArea[#, 1109]& ,
          TagBoxNote->"1109"],
         StyleBox["1109", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[1109, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{15., 0}, {20., 946}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{60.492647058823536`, 
            68.31740196078432}, {-24.22117014332106, 39.95498438197053}}],
          StatusArea[#, 946]& ,
          TagBoxNote->"946"],
         StyleBox["946", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[946, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{20., 0}, {25., 798}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{67.69240196078432, 
            75.51715686274511}, {-14.278706221816677`, 39.95498438197053}}],
          StatusArea[#, 798]& ,
          TagBoxNote->"798"],
         StyleBox["798", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[798, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{25., 0}, {30., 678}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{74.89215686274511, 
            82.71691176470588}, {-6.217248988164464, 39.95498438197053}}],
          StatusArea[#, 678]& ,
          TagBoxNote->"678"],
         StyleBox["678", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[678, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{30., 0}, {35., 569}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{82.09191176470588, 89.91666666666669}, {
            1.1052413324029615`, 39.95498438197053}}],
          StatusArea[#, 569]& ,
          TagBoxNote->"569"],
         StyleBox["569", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[569, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{35., 0}, {40., 472}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{89.29166666666669, 97.11642156862746}, {
            7.621585929605168, 39.95498438197053}}],
          StatusArea[#, 472]& ,
          TagBoxNote->"472"],
         StyleBox["472", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[472, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{40., 0}, {45., 384}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{96.49142156862746, 104.31617647058825`}, {
            13.533321234283456`, 39.95498438197053}}],
          StatusArea[#, 384]& ,
          TagBoxNote->"384"],
         StyleBox["384", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[384, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{45., 0}, {50., 332}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{103.69117647058825`, 111.51593137254903`}, {
            17.02661936886608, 39.95498438197053}}],
          StatusArea[#, 332]& ,
          TagBoxNote->"332"],
         StyleBox["332", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[332, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{50., 0}, {55., 282}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{110.89093137254903`, 118.71568627450982`}, {
            20.385559882887836`, 39.95498438197053}}],
          StatusArea[#, 282]& ,
          TagBoxNote->"282"],
         StyleBox["282", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[282, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{55., 0}, {60., 221}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{118.09068627450982`, 125.9154411764706}, {
            24.483467309994374`, 39.95498438197053}}],
          StatusArea[#, 221]& ,
          TagBoxNote->"221"],
         StyleBox["221", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[221, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{60., 0}, {65., 221}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{125.2904411764706, 133.11519607843138`}, {
            24.483467309994374`, 39.95498438197053}}],
          StatusArea[#, 221]& ,
          TagBoxNote->"221"],
         StyleBox["221", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[221, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{65., 0}, {70., 160}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{132.49019607843138`, 140.31495098039215`}, {
            28.581374737100916`, 39.95498438197053}}],
          StatusArea[#, 160]& ,
          TagBoxNote->"160"],
         StyleBox["160", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[160, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{70., 0}, {75., 141}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{139.68995098039215`, 147.51470588235296`}, {
            29.857772132429183`, 39.95498438197053}}],
          StatusArea[#, 141]& ,
          TagBoxNote->"141"],
         StyleBox["141", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[141, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{75., 0}, {80., 133}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{146.88970588235296`, 154.71446078431373`}, {
            30.395202614672666`, 39.95498438197053}}],
          StatusArea[#, 133]& ,
          TagBoxNote->"133"],
         StyleBox["133", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[133, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{80., 0}, {85., 95}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{154.08946078431373`, 161.91421568627453`}, {
            32.9479974053292, 39.95498438197053}}],
          StatusArea[#, 95]& ,
          TagBoxNote->"95"],
         StyleBox["95", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[95, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{85., 0}, {90., 91}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{161.28921568627453`, 169.1139705882353}, {
            33.21671264645094, 39.95498438197053}}],
          StatusArea[#, 91]& ,
          TagBoxNote->"91"],
         StyleBox["91", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[91, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{90., 0}, {95., 86}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{168.4889705882353, 176.31372549019608`}, {
            33.552606697853115`, 39.95498438197053}}],
          StatusArea[#, 86]& ,
          TagBoxNote->"86"],
         StyleBox["86", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[86, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{95., 0}, {100., 68}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{175.68872549019608`, 183.51348039215688`}, {
            34.76182528290094, 39.95498438197053}}],
          StatusArea[#, 68]& ,
          TagBoxNote->"68"],
         StyleBox["68", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[68, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{100., 0}, {105., 47}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{182.88848039215688`, 190.71323529411765`}, {
            36.17258029879008, 39.95498438197053}}],
          StatusArea[#, 47]& ,
          TagBoxNote->"47"],
         StyleBox["47", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[47, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{105., 0}, {110., 41}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{190.08823529411765`, 197.91299019607845`}, {
            36.5756531604727, 39.95498438197053}}],
          StatusArea[#, 41]& ,
          TagBoxNote->"41"],
         StyleBox["41", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[41, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{110., 0}, {115., 45}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{197.28799019607845`, 205.11274509803923`}, {
            36.30693791935095, 39.95498438197053}}],
          StatusArea[#, 45]& ,
          TagBoxNote->"45"],
         StyleBox["45", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[45, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{115., 0}, {120., 28}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{204.48774509803923`, 212.3125}, {
            37.44897769411835, 39.95498438197053}}],
          StatusArea[#, 28]& ,
          TagBoxNote->"28"],
         StyleBox["28", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[28, {}], 
         "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{-2.4, 0},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    PlotRange->{{0., 120.}, {All, All}},
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", 
   GraphicsBox[{{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwVzX080wkcwHHnXNRRHgqViigljzWu3EvfL34jsh1jmPxyW4kyT1moq3mR
JS+9VMitPDSr1MnycOjSAy3lqaumy3aKFo2ULg9Teehc98fn9f7zY8GJZ0Rq
amho0L72vx/72lusclq2CoJqpvQNymDK04nrrhCDNG2osv77MohsHGKaKmqh
zViwMHxeGRRNSju+VUghNqSnRzIjApd8R8GUvAtWGjhlRw6KQIsTxVHL+yEe
trRa3RJBTLumbEw+Dpmrzq59GS2ClUf8j4/KNZHCXNhFyz0PrdOUX2ViI/Qc
UCktZ4qh4kJTF8d2BRbYs3XoLefA8qZ9ibanJTK906+XS4XASi6uoDPXoW7x
7K2h5kJQWftUjunb4XL7uWoj7TNQyey4p7nUCf3ml+hq0fPh6Sve4fySTVhf
ZaRj23wa1gxvdej66IzEbG/Fl72nIIaloLdnbMb+vgu9c9a58II4HR034Irq
fmXnw+c5cHOaTlu22Q3fX3Z1qH2QDblLX5TymwBBYNaENVnwgEUcaNNzx6wc
y4WpgwKAHRkyO6YHLqDM7fcyy4QPdz3yCws9MW2sO3KInwGUQUNGsJTAzPh3
HjuWp8PEHV/v/dpeaEI6VFfHp8E2Zt4WlYs3si5sVLvoHgETkTunLm0bak48
Tv782yFY4Z80ekzqg33zu98WHE2FP27X/VL9wRerVGkU54pk+PMl6ebi4oeq
voNXXWU8SGkynjWMoqGzvtNJvmsShGoxzCdO0zG1VJ2qak+E37+oDzl0/4Qj
BjbTNqwEYPQE7mVn+CM1t6x12eY40NFnO7LWBqBhzNPLvXdigJXqUMFoDcCd
3ESZ+OheONAkEKeQDGwZF25nCKPgkXJRg69GIF56FfbESRIJ40qLbT7CQBwY
5vC65+2GGqPJEz52QWi6YEGS1nEOSMxnRz49CsLGYK3pfh028HRzOmWRTIyK
ELo28SMgtYt2nzU/GBNYRSm8kXDwThG66YmDscDuojyiIQxq6BejpT+E4OIS
iYpbHwqhGq+vrekJwZOxf8Un1AVDx6mrSXWJoUjj+pUSM0FwcKY8cGwJC60p
lIE3HoFwT7hr0OE6C/8t4sVerw8AxeIrn87SwtDsfsus6c/+YBNjblU7GoaO
1hxV9BI6eIvMH08e34FLZIXnt3ZshzntftsfV4bjjc97Upc2+IDaR37Jvjkc
xaFVwZVl3lC3L6iEFkIiW9yS0iKnQrNmw55RFomBdyYKTJ9QofOciWN+OIle
/Je74tuo0N/RI1WwSaz1sjJac4MKBhvYb3ZxSbxvMlVcfY4Kce9iNx1KJ9HO
tTDHeycV1nOz2suvktjV/V1Q3BABFK3hPJ9rJM5zlv1trCQAi33DR6pJVOrW
TdxVEBD6UO+DUwOJq9ZZKFd1EHDMtmDx7WYSr3QGZExXEvB6RBTx9BmJsREv
VtskETCaqbk+WUFi4rgVfyaGgBmz3eOmz0l8dN4u4vFuAgxp1oKdShL/iVFf
4wcT4C6RVAy/JTHcooQ7s4UAP+oi3on3JHKr1vcqN3799ya4OYySKJBEP2zb
QECCHuUJb5JES60jlqIVBBy+dOasyWcSxeV52SeNCchy+8RpnCZxyO/5vvRF
BOQ9C7Ulv5BIV6Y8OKBDQGls4+TcHInHhNlF3G8I+A/Xxz4Q
       "]]}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0, 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
    
    PlotRange->{{0, 120}, {0., 0.033333330612245006`}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.05], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.619128141073258*^9, 3.619128342072209*^9, 3.619128394985565*^9, {
   3.6191285188162003`*^9, 3.6191285558274717`*^9}, 3.6191292083197536`*^9, 
   3.619129265643938*^9, {3.619129328169529*^9, 3.619129388020941*^9}, {
   3.61912942200152*^9, 3.619129441575857*^9}, 3.6191294810144587`*^9, 
   3.619129644416312*^9, 3.619129732549159*^9, {3.6191307834423723`*^9, 
   3.619130794696477*^9}, 3.619130986689457*^9, 3.619131017980042*^9, {
   3.6191322783198423`*^9, 3.619132300592635*^9}, {3.6191323856044693`*^9, 
   3.6191324071183643`*^9}, 3.619134581342798*^9, 3.619134698121819*^9, 
   3.619149678704911*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<exp.pdf\>\"", ",", "plot"}], "]"}]], "Input",
 CellChangeTimes->{{3.619134719842688*^9, 3.619134751489046*^9}, {
  3.6191349352631197`*^9, 3.619134936409258*^9}, {3.6191350084049253`*^9, 
  3.61913501409706*^9}}],

Cell[BoxData["\<\"exp.pdf\"\>"], "Output",
 CellChangeTimes->{3.619134753215197*^9, 3.6191348094845047`*^9, 
  3.6191349373247538`*^9, 3.6191350151992064`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{".01", 
    RowBox[{"Exp", "[", 
     RowBox[{
      RowBox[{"-", ".01"}], " ", "t"}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "1000"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6191396875043373`*^9, 3.619139816221752*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1:eJwVk2c4Fm4fho2yKjObEMkou2i471+ISGWHZO/MbCHb4zEeKpU9EimFrEjI
zsoWIaNkJyFFvP/303Vcx3l+PQUsXXVsKMjIyFTJycj+v/3jBxS4butD2FX7
z2xm7rhNlGG1sMwAxF7TG+FwN6y+bZk2ZmgEV7kyg9PeOOPQjXmOJCcjoGNK
mJDNdsY1P9ySrgQbQSnJrHA82hlLfA2Kr803AqEp0k37G86YuSslOGvTCNgD
nUIN95zwaEaftfUDY9B8OWTySMMJOykpnVz6eAOup1P3nFxxxKRogdptVVOw
kdeJGbC1xzIqsrPGJqbQeWnlHLmOPR7aVaGvdjcF59qQ11jRHh/xtDf1TTOF
OvSj7CeLPS40Ldpd/2kK0ptGDiINdrhdVhGvpJlBre5OXL+AHaZ0PWHu5mcO
b9LtlN8u22DEeWnK8qMFuHzry+8os8Kfv2QkTo5YwOHF2JRLuVbYN2/jgulX
CyDcFbTqv2+FS2Wf5Bj9sYBs9kQ1Zg8rLHJ110pL0BI6IuW55WSsMEtY2ayi
jyWI33He/vfaEs8t8S9x8FlBqpjGX5NaC3yv/s9mt4s1RGgp1K7+MsNU5dPC
j32toTNtoGhz1Az7F3QYWIRaQz5r+HHGBjNseS+94leSNQjs8TgFJphhaesL
3hzvrOFuT382ljDDPdTRGxYHbKDgxkyOvrMpPnSNY3093wakyyu8Lf6YYML4
6Z9cU7bgH13fOHfRGEvLfPOuXLSFtlTG0FxJYzwaeX9Hd9MWWCct+Tw4jfEJ
qVXquAN24KJxtPLSshHuDS04snfKDnRUSBn9SUaYS4RHc4ZoB8UmLEnGC4a4
8DZ5/gs5e6CcmmRoyLqOe6k7Tc4THMB98u1mK9bHWsSDlkL3HKDEPjLxt4Q+
7jl4xe5gmgMQ7a74yx357zN1u48VOYB2Xc2BoR093M3dExkw7ABvc2xoK6v1
cKfkQHGNsCMQRsltvivo4ZbrY/sUmx3hl9TWcjXSxTX5S4WKFE4gA0mqTC7a
OIrlTvevA06wI8o5FWOujXXu0q4WsDoB3dX6LUZdbTxnICzLJuoE9VVrQWcV
tDErlXnVyjUnKCrP3kdHqY1drPubM9OdwGTM7vf9FC3ML1A9QX7GGbyfGaWe
ybmGw1OiGFtcXSB+8aJBfZkmDrf9HHXN3wWWfasGH6Vp4ggZyb1P4S7QuTZZ
EBauiSPbh5YXk11gOGb+wGM9TRz191gHU5MLFAgbfC7ZuIyJxk0RNzlcoY17
/E/Kucs4kYt8e73eFRIaFHJ6BtXxtSvv1pii3WCmSnjCHNTwWQ0pl504N+gj
i5E9IqGGhdWezM/ec4NaVZHJeW41vAPRk2/T3GBzg5a58Lcqfi6n321T7AbP
q85njhapYiqe5YKqYTeIEkt/PXRUFdcu8FhYCLtDm9kexx7zRSxBCPhY3OgO
ugGk/m5OZSx3qm9j3wd3uKi2+y6WVhmfnT7OY9TtDkK7bHcN/yhh1fP99uQj
7tB7V8aAc0QJm62KUuisuINXaiUjTlbCCYbDcr84bsNuTHIaI48SXhORSTnl
chvItOTPBIpfwBUfvltXc3gAbfO5vEsTCFvesk7e4PWAwabW04FNCNMfmuqS
EvSA8102+q3PEbbVGj2df9IDnmSMrqf6IMw63EnzQMkDFjbJ21SYEfb8WlLo
7OQBPpcGNCIuK2KZvTvr/PUeQK3cyaXedQ6/lGMMj7LzBPkJuVAVujNYZVnf
197JE/L7tTTrNxXw2NNUJ3V3T+DBoZqXZxQwHftx/QN3POGTTUNdfI0Ctv2j
KEyK94Q0AyqRdlcFzF97q+1huSdIau59pBmRx/fUWg/mUXrBElfPkH7Faext
HJTUlOkF5sbcA13JclikMU+O4akXGHPnylgT5PCo+Md+o+de8D725yVaHzms
+I+P+UeZF2RdP3rrrp4c3pf1Pp6z3QsmtHlPcDHK4Xvf9hFc1r2gZCxufTda
Fhe5xfhzqHvDuXVnfRmCDJ6LfGzmtOYNrtLadC0vpHAEFbHW5Lc3GIqVl2dk
SOGjkXd4r+x4g3XC7/chiVLYJML080kqHwiaMhmz9ZHCPWFC139w+kDi3025
QmUp/Ca4+OrtCz4QciRsRKFGEkf7tyn6JvhAM83PX5VyEljMZYs7XMIXFOjW
+mxviuPp9M5jE7K+4EiSu0KhKo5TurIkFc74gv3+ypYSCXFMe1JdeUnZF/Tr
RD00ycTx3GKyo56RL9B8qxxyyRXDTx3OVQmF+0J5uwaf0aoo5rcJMmge8YWs
+DVt7YcimM1kXyJVhB9UiB+Lc2AXxp7Be8/UiH5gV/7zx8Q+Ydyb+7eeQPKD
s4rJ01Zrx3Ds8uoqXYofbCZcVE7rOoYp7o5rMRT5QZPEoajm8GN4ObuCkWPE
Dy7NZs+sbAjhpu/2CaIn/cGA283n4owgdvfoImkO+oOQZlu23XcBXP0q0U52
1B98hsP8LEcEMMWCPub64g+x8oOX7TsE8APziZXvc/6wdH/s3YMiAVxx5ceV
sB1/EHO6NefqK4B3jjMdrBa8A/k0LevHDwpgwpge4fjtO7B2u1LM5hw/zrg4
FkzBEAAXAxp0yl14MYV0GKXu4QAgpM0fqNLnxTY8YpFPOAOglnrxb+95Xnzi
l0+MilAAbCtGyigf4MVVWSwPI88EgFpzOYtAAQ8e2NZ4QWcdAHYsJ068nePG
tK+rBpmrAiClyFhi1ZsLex55JCZoFQgS7YKNrR3suIGf2pnTPhCyyZQWFt6w
YyZBnyIG50B4go7s581jx6+OX5fb8Q6Ev34lsy+D2fG8FDsaJAaCHV0ZQ8hp
dmyq/Eg76nUgbFvyd0znsmE1+0e+i+RBYOqwoqcSy4q5Xj9qKc0KgiC2Q5/5
wlgwfYEEe+LTIGC6e2Rtw4MFU2Q127k8DwL7i396h61Z8GLcLxrRsiDQPunW
WqvKgmscrl3OaA2Ci4nlRI4DLNhMgLqHsBIEtyLQg19JzDg3wXvk5vm78Ghe
T4yujAlLuuovUX+6CzNW67PTDIwYsX38fnX8LlzwsC8xpGDEmu8uzSRN3wVu
94SO0nkG7Hjg/Kjg8l0gP/WyY6eUAffrMn3lIw+G3G6ia7o6A2ZY/d17ji0Y
llvqGmn86HGUSPNLDwgGniajJqq5g9gn2cxm5kEw4MjWmnYKOuy5RdZo9CgY
tHX3bequ0OLb13P4e5KD4djq0KXlEVrsxPrtc01GMOiSp9NoldBi80RHnYfP
goGs1DNhwJwWq0d7YfWaYPjq+vlLdwMN5vaL4SyaCYZm6Xgn2XvUuM6wsstf
JgQKeS/JyZjsx+0M7WTCp0IgreKA8I76fjzQMibbKx8C5PmJGYPy+/GcHEXK
ccUQoHu9s1LBsh8zM12xHVALAU0Dl3Tpzn3Y9sP07smb//Hoc0PbeB+mP0sv
NRUVAobvq/hiZCixCbfNPbXxEGC9NVawBuS4SjNGc/ZLCJQ+OxEWIkOO2YJK
qCKmQ0DBXMiDR4gc907+82/4HgJnrye7eFOTY9W8h1aKayEgPX6juqqbDEtL
t8nJUofCqnf9pqcZGaZSEx8+Ih0Kf9WD/daZ91Dx7Z/cm+GhkFVjLe2zvY3C
JHfK7aJCoauN+lv6t21ksESlNRIdCinkv/MHP26jHRue8Jr4UNi+GCDsm7uN
LhmpLYU+DoXX4xX3o65uoy84vYahMBQmu5XfNT39i+gPqd8U7Q+FK1F3ekzN
/yDn/KwME4EweLt2bNmG8je6WsNDTykUBoOJcVQLPzaRRO/jwALhMCCmL2YE
jW2ilb8JJpviYeDlU3V4pHwTuV0N4Uo4HQZ8j7wStB020e0Ni4eNl8P+6zWo
S6V/A3krC8aLeYfBx+OsE0Ov11HQl6eBW+1hUNFuZjSVvoYG7lJ1uXeFwb/z
6bpipDUkxm/Hs/gxDHZNb/4ICl5DQ+Yib8cHwuAeW/6shtUaOjn9fKthIgyi
ausGnETX0NjXIo+4tTCQ9CN+6Kn8ic4tVDkc5QqHyWO8Nz6PraKt9S59TYdw
GFb5QKcWu4KyGZROVN0KB9r1Cd1UzxWkIVZBIewSDj/DvdbJb66gVLOMor3b
4fA3z4CSSmIFoXYX2tKAcNBXKej83rOMwjMZ3nEmhEPAcxjez7WMGDW0hb5X
hEMlK7WGZtUiEs0cWAvZFwGjVA+1RETn0SRTdYYgdQRcCj8uQ354Hj0Mz9Ro
po2A1GI0trg7hygcHXNoGCLAQVfx6ubAHBqVI9MhcUYA9d4v2omQOURsFy9J
k4gAQemKg0sT39HSRqhrpWEEzMm18mc8nUVFmtJLS4URUCYgNGBm+RWNamz7
WBRFwCfeDn5Lna+ISr2ZcqgkAp4qj2+5KX1FpheNuOsqIoAvY1mw7OhXdBCF
aCTWR4AmkV3v48wMcpTsfXZqIALM9xs/07KfQcLM7jZB2xEglBRKreg/jTKG
iycYNCLhiY23b2PdJBo+ufRfE5HwjfFWTETJJGIMP55teS0SzJmI1bpPJlGo
VIZVuV4kCDrzqRyOmkS20TFzxmaRkPnef1bo2iSSPGe79tQzEghrTcd+N3xB
9RncVOczI2Evmfq8B+8EmrKJPGm/HgknJ8QDh5k/owS1PJevm5Ew1tzYe/3f
KEKiLUXmfyIhu/Ktwvz3UZS2tF/GaDcSOCrSqPG7UWTgEXFagyYKBslkpcrt
R1FncDg+wRMF6haHaOobRlBlaqj2qnIUFK+m9qyHfkJxvUFevvej4NWh5GxB
6SEUf/K14lxSFFzQOZM9xjeEEqK/7Td8HAVNnwwOP6EfQg8uaD6UT4+CpLMS
4oZLgyilhLNyMy8KzB1ZtyyeDaK8xLItz+ooIK3aMSweHUS12gt33KeiwKV6
cThWYACt9uqHOkoSYPCf/uy6Uh/ai/jLxyBDABO1yoBo2T5EfzbzXakcAdhv
SXGIC/WhEzlzWztnCFBH5S+TtL8P2d2+40pSIYAT65cGyg+9aII526TMiADF
NJlfQacXdeound4NI4CUtlHCT+ce9GwwdDHxEwHer1wZ/03qQidYDzrQfibA
DZ1fUi98u1CJXtJs8DgB+I89mXKz6ELV/flTrtMECDqkzi8r24U6ezuHrywR
oNTtXHDicCda7WJroiWLBnU/TpMCwU6k0PI8LeR4NGjPVOh8bWtHHyr6rrh7
R4NVOmVKlkobMr7alcXrFw19CyIi3yXb0NK31l8f7kSDgQWtA+ZuQ4ys75KP
hkTDHb4HLUJrrcjQI/9bf0w0OCd3aL7PakWzkgGBp7OjIVr5BkmOvBXtKzj2
crsjGux8r7RldDcjlOp7MFKACAFKU8LBjxuR4MvI2WNCRHj+8gkfM6ER0dQ9
qG8WJoLjtW8TJT6NqHe62HP/CSKszNSEcl1vRNZi82Php4kw9+DNERJbI4qu
MnoZdpkIFIEsdduPGtDA8NmrIV5EKH9ySTUp9z26dfgfKeADEdTJpcS3mupQ
S8kP9R8dRFDmjfE7UliH+K9NU1p2/8cRq4Lh/To0EN3qo9ZPhL6G1bb9lnUI
7SWaMY8TgV5x/Z4aWR1iXBCWfLZKhAtnJN8YQi2qqNPq7mePgdutTkKXu2sQ
2a3cg+K2MSB7THPA6kg1sjenSeuzj4EkudIARZpq9FHfSdz/VgysHepYFl2r
Qhkgp/HBLQZS3lounG2pQopsTVF2d2LAWPvOvXOuVcj//QxFbkIMeKTqrBc0
vUEb7IJ/eN7GQNifLzd6AirRQlP2N3rGWBBVWHzPzleOWi8u6EUzx8ITGQN9
U/pylNsi00TJGgt1/J+FX/8rQ2ZtjTlbnLHwt0PdOGSsDA10fDObFowFmXix
LzUpZaiuT3S0XD4W9uLNzDI5y9CDyZJuE7NYeEc/09fBX4oUd95XPn8VCylf
+sqf6ZQgl9+8rzhKYoGnOUX29MUSlLHmlxtZGgv5LRUC3fIlaHdOOtHyTSxI
3o+S4OUtQbWD2Y5cDbFwrkpGVH6uGEFRCC9xMBbWY5QLdYOLkZLlhTCHnVjY
Wfy+uOpahNTa6q+KaMTBqxdzIdmRhSicO56rQzMOtMZ451NdClGDy41Z52tx
YOb5k/jcoBCdZ90MLNWLg25r07P7jhciGUvxl8gsDgzej7jkt71AR3aSDuh7
xgHbT7bEDIYXaFPyVltIRhwEFYY/G39RgPIesSp9XosDHqZiOMuVj4y8W5e1
NuLgr3WtBTNNPjqo75fc8jsOln18Wrc28tBt5vHVkp3/fHcOudXePITjcjMJ
VPHwukHNmEDMQ59CZf+d4ooHlxEfBb3dp4jORftNwoV4kL3Os0y/moucVeIk
VBPigauAsbLnTw7qVnrGuv9+PJiyHuwVn89BUhcadxqT4oE4fCM86VMOWlf8
034hNR4uy3eEPajMQf7yNnaKefGgIMYfir1zEEFMMUuuJh4+9RSGos1slMu4
zCQ4Fw+vGF/uEMmyERUDzZ+phXhgPCCrmv0zC9kfEpzMWo4H702d3KbpLCRO
Z/TqyK94YBGJdJNpzkKvKZs1uHbj4bnmGm0BMQvVbaaFMR0mQcAHqVtb7FmI
f6PSsYeNBOqcuqWjtFko9FefNomTBG7eytX3fmci1VUa/kN8JDBxq9J7VJeJ
Ouc9a2jESCB0iHW7WSsTScyRnrSeIIGRI5fG1VOZKGH2OTFSkgQEkdbiFc5M
pDszabjvFAnqxHLcfGYyUNnUNm6UJ0GhbVOmWVsGYptkOx56lgRtfV73zF5m
IN8JafoLiiRwsp+Q9bmXgUbHNDf2MAlOOyi45vlkoP8BKG6FHg==
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{0, 1000}, {0., 0.004241074834243744}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6191397070217543`*^9, 3.619139712069512*^9}, {
  3.619139768574952*^9, 3.61913981686579*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"SystemOpen", "[", 
  RowBox[{"DirectoryName", "[", 
   RowBox[{"AbsoluteFileName", "[", "\"\<barchart.png\>\"", "]"}], "]"}], 
  "]"}]], "Input",
 NumberMarks->False],

Cell[BoxData[
 RowBox[{"SystemOpen", "[", "\"\<barchart.png\>\"", "]"}]], "Input",
 NumberMarks->False],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "/", "30"}], ")"}], 
    RowBox[{"Exp", "[", 
     RowBox[{
      RowBox[{"-", 
       RowBox[{"(", 
        RowBox[{"1", "/", "30"}], ")"}]}], "x"}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "120"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.619127329650424*^9, 3.619127336699361*^9}, {
  3.619127463922781*^9, 3.6191274756875668`*^9}, {3.619128678689539*^9, 
  3.619128738867569*^9}, {3.61912879795168*^9, 3.619128801860297*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1:eJwVzX080wkcwHHnXNRRHgqViigljzWu3EvfL34jsh1jmPxyW4kyT1moq3mR
JS+9VMitPDSr1MnycOjSAy3lqaumy3aKFo2ULg9Teehc98fn9f7zY8GJZ0Rq
amho0L72vx/72lusclq2CoJqpvQNymDK04nrrhCDNG2osv77MohsHGKaKmqh
zViwMHxeGRRNSju+VUghNqSnRzIjApd8R8GUvAtWGjhlRw6KQIsTxVHL+yEe
trRa3RJBTLumbEw+Dpmrzq59GS2ClUf8j4/KNZHCXNhFyz0PrdOUX2ViI/Qc
UCktZ4qh4kJTF8d2BRbYs3XoLefA8qZ9ibanJTK906+XS4XASi6uoDPXoW7x
7K2h5kJQWftUjunb4XL7uWoj7TNQyey4p7nUCf3ml+hq0fPh6Sve4fySTVhf
ZaRj23wa1gxvdej66IzEbG/Fl72nIIaloLdnbMb+vgu9c9a58II4HR034Irq
fmXnw+c5cHOaTlu22Q3fX3Z1qH2QDblLX5TymwBBYNaENVnwgEUcaNNzx6wc
y4WpgwKAHRkyO6YHLqDM7fcyy4QPdz3yCws9MW2sO3KInwGUQUNGsJTAzPh3
HjuWp8PEHV/v/dpeaEI6VFfHp8E2Zt4WlYs3si5sVLvoHgETkTunLm0bak48
Tv782yFY4Z80ekzqg33zu98WHE2FP27X/VL9wRerVGkU54pk+PMl6ebi4oeq
voNXXWU8SGkynjWMoqGzvtNJvmsShGoxzCdO0zG1VJ2qak+E37+oDzl0/4Qj
BjbTNqwEYPQE7mVn+CM1t6x12eY40NFnO7LWBqBhzNPLvXdigJXqUMFoDcCd
3ESZ+OheONAkEKeQDGwZF25nCKPgkXJRg69GIF56FfbESRIJ40qLbT7CQBwY
5vC65+2GGqPJEz52QWi6YEGS1nEOSMxnRz49CsLGYK3pfh028HRzOmWRTIyK
ELo28SMgtYt2nzU/GBNYRSm8kXDwThG66YmDscDuojyiIQxq6BejpT+E4OIS
iYpbHwqhGq+vrekJwZOxf8Un1AVDx6mrSXWJoUjj+pUSM0FwcKY8cGwJC60p
lIE3HoFwT7hr0OE6C/8t4sVerw8AxeIrn87SwtDsfsus6c/+YBNjblU7GoaO
1hxV9BI6eIvMH08e34FLZIXnt3ZshzntftsfV4bjjc97Upc2+IDaR37Jvjkc
xaFVwZVl3lC3L6iEFkIiW9yS0iKnQrNmw55RFomBdyYKTJ9QofOciWN+OIle
/Je74tuo0N/RI1WwSaz1sjJac4MKBhvYb3ZxSbxvMlVcfY4Kce9iNx1KJ9HO
tTDHeycV1nOz2suvktjV/V1Q3BABFK3hPJ9rJM5zlv1trCQAi33DR6pJVOrW
TdxVEBD6UO+DUwOJq9ZZKFd1EHDMtmDx7WYSr3QGZExXEvB6RBTx9BmJsREv
VtskETCaqbk+WUFi4rgVfyaGgBmz3eOmz0l8dN4u4vFuAgxp1oKdShL/iVFf
4wcT4C6RVAy/JTHcooQ7s4UAP+oi3on3JHKr1vcqN3799ya4OYySKJBEP2zb
QECCHuUJb5JES60jlqIVBBy+dOasyWcSxeV52SeNCchy+8RpnCZxyO/5vvRF
BOQ9C7Ulv5BIV6Y8OKBDQGls4+TcHInHhNlF3G8I+A/Xxz4Q
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{0, 120}, {0., 0.033333330612245006`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.6191287182136507`*^9, {3.619128798950151*^9, 3.619128802535791*^9}}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "Areabargraph", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Areabargraph", "[", 
   RowBox[{"data_", ",", "xmin_", ",", "xmax_", ",", "k_"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Block", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"sorteddata", "=", 
       RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"length", "=", 
       RowBox[{"Length", "[", "data", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"dx", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"xmax", "-", "xmin"}], ")"}], "/", "k"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"currentupperlim", "=", 
         RowBox[{"xmin", "+", "dx"}]}], ","}], "*)"}], "\[IndentingNewLine]", 
      "currentupperlim", ",", "\[IndentingNewLine]", 
      RowBox[{"result", "=", 
       RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"index", "=", "1"}], ",", "\[IndentingNewLine]", "counter", ",",
       "\[IndentingNewLine]", 
      RowBox[{"rectanglelist", "=", 
       RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"linelist", "=", 
       RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"graphicslist", "=", 
       RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"currentupperlim", "=", 
      RowBox[{"xmin", "+", "dx"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"sorteddata", "=", 
      RowBox[{"Sort", "[", "data", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"sorteddata", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "<", "xmin"}], ")"}], "||", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"sorteddata", "[", 
            RowBox[{"[", "length", "]"}], "]"}], ">", "xmax"}], ")"}]}], 
        ")"}], ",", 
       RowBox[{
       "Print", "[", 
        "\"\<Note:  some data values lie outside the user-defined interval.\>\
\"", "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{
        RowBox[{"For", "[", 
         RowBox[{
          RowBox[{"i", "=", "1"}], ",", 
          RowBox[{"i", "\[LessEqual]", "k"}], ",", 
          RowBox[{"i", "++"}], ",", 
          RowBox[{
           RowBox[{"counter", "=", "0"}], ";", "\[IndentingNewLine]", 
           RowBox[{"While", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"index", "\[LessEqual]", "length"}], ")"}], "&&", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"sorteddata", "[", 
                  RowBox[{"[", "index", "]"}], "]"}], "\[LessEqual]", 
                 "currentupperlim"}], ")"}]}], ")"}], ",", 
             RowBox[{
              RowBox[{"counter", "++"}], ";", "\[IndentingNewLine]", 
              RowBox[{"index", "++"}], ";"}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"result", "=", 
            RowBox[{"Append", "[", 
             RowBox[{"result", ",", "counter"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"currentupperlim", "+=", "dx"}], ";"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"rectanglelist", "=", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"Rectangle", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"xmin", "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"i", "-", "1"}], ")"}], "*", "dx"}]}], ",", "0"}], 
              "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"xmin", "+", 
                RowBox[{"i", "*", "dx"}]}], ",", 
               RowBox[{
                RowBox[{"result", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "/", 
                RowBox[{"(", 
                 RowBox[{"length", "*", "dx"}], ")"}]}]}], "}"}]}], "]"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "1", ",", "k"}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"rectanglelist", "=", 
         RowBox[{"Prepend", "[", 
          RowBox[{"rectanglelist", ",", 
           RowBox[{"RGBColor", "[", 
            RowBox[{"0", ",", "0", ",", "1"}], "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"linelist", "=", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Line", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"xmin", "+", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "-", "1"}], ")"}], "*", "dx"}]}], ",", "0"}],
                  "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"xmin", "+", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "-", "1"}], ")"}], "*", "dx"}]}], ",", 
                  RowBox[{
                   RowBox[{"result", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "/", 
                   RowBox[{"(", 
                    RowBox[{"length", "*", "dx"}], ")"}]}]}], "}"}]}], "}"}], 
              "]"}], ",", 
             RowBox[{"Line", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"xmin", "+", 
                   RowBox[{"i", "*", "dx"}]}], ",", "0"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"xmin", "+", 
                   RowBox[{"i", "*", "dx"}]}], ",", 
                  RowBox[{
                   RowBox[{"result", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "/", 
                   RowBox[{"(", 
                    RowBox[{"length", "*", "dx"}], ")"}]}]}], "}"}]}], "}"}], 
              "]"}], ",", 
             RowBox[{"Line", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"xmin", "+", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "-", "1"}], ")"}], "*", "dx"}]}], ",", 
                  RowBox[{
                   RowBox[{"result", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "/", 
                   RowBox[{"(", 
                    RowBox[{"length", "*", "dx"}], ")"}]}]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"xmin", "+", 
                   RowBox[{"i", "*", "dx"}]}], ",", 
                  RowBox[{
                   RowBox[{"result", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "/", 
                   RowBox[{"(", 
                    RowBox[{"length", "*", "dx"}], ")"}]}]}], "}"}]}], "}"}], 
              "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "1", ",", "k"}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"linelist", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"linelist", ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"graphicslist", "=", 
         RowBox[{"Union", "[", 
          RowBox[{"rectanglelist", ",", "linelist"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Show", "[", 
         RowBox[{"Graphics", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"rectanglelist", ",", "linelist"}], "}"}], ",", 
           RowBox[{"Axes", "\[Rule]", "True"}], ",", 
           RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
           RowBox[{"Frame", "\[Rule]", "True"}]}], "]"}], "]"}]}]}], 
      "]"}]}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.619129177333939*^9, 3.619129177334955*^9}, {
   3.6191295882166243`*^9, 3.619129591012373*^9}, {3.619129623345386*^9, 
   3.619129627321837*^9}, {3.619129664881955*^9, 3.61912966768312*^9}, {
   3.6191306134014807`*^9, 3.619130676193837*^9}, {3.6191307313496933`*^9, 
   3.619130774939912*^9}, 3.6191309128669662`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "range of f(x) = -30 Log(x), 0 \[LessEqual] x \[LessEqual] 1", 
   Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, PodStates -> {"Input__Step-by-step solution"}, 
    Method -> {
     "ExtrusionChosen" -> {
       "IndefiniteIntegral", "Indefinite integral", 1, 1, "Input", 
        "Integrate[-30 Log[x], x]"}, "ExtrusionOpen" -> True, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"f[x] == -30 Log[x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"f", "(", "x", ")"}], "\[LongEqual]", 
               TagBox[
                RowBox[{
                  RowBox[{"-", "30"}], " ", 
                  RowBox[{"log", "(", "x", ")"}]}], Identity]}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/mathematica/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox["\"log(x) is the natural logarithm\"", TraditionalForm]],
             "Output", {}]}]}]}]}], Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plotter", "id" -> "Plot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[-30 Log[x], {x, -3, 3}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max3085$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min3084$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3084$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3085$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$764252$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min3084$\
764257$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max3085$764258$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max3085$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min3084$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$764252$$\
, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3084$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3084$\
764257$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3085$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max3085$\
764258$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$3205643[
                    
                    Plot[{
                    Re[(-30) Log[$CellContext`x]], 
                    Im[(-30) Log[$CellContext`x]]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][(-30) Log[$CellContext`x], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3084$$], 
                    (
                    Piecewise[{{
                    0. + 3.2071349029490923` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    3.2071349029490923` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min3084$$], \
-3], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3084$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max3085$$]], \

                    (Piecewise[{{
                    0. + 3.2071349029490923` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    3.2071349029490923` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min3084$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max3085$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3084$$ + 
                    3/500, CalculateUtilities`GraphicsUtilities`Private`\
max3085$$]], 3]}, LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, Ticks -> Automatic, 
                    ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min3084$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max3085$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, $CellContext`UnitNumberForm, 
                    NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat = \
$CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$3205643]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3205643[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines = 
                    ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3205643[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    All, 1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbinv7/APkPiMxsb4hgR0MCYNKEn53lvsNBauHWxnG/\
x58NlN0qxdpZgO0JR+ONWX5vHdc89d78mRjNJ+r9fTV635IDlJb+\
DpsTVDOctlIci701xRrZkU6RV8dtuamJo9yuEHJd533Zr3Us3A+\
PMrfB94UnAw9KthnBlG9WRfQZ6xRNeekWLH9icTLhPg7Cd9urO9tftyd8vDYCwjMIYqoXfaQuaZAk3\
THgJds+YtB/HNHx+\
Vx08F5zH9XlCRUP3AescKiIWRAjjmE3zr5WbqLiZmQBBQ5MJpcvIctr1AG8XEdExnOb5xPlnP2wKDm\
mrPzb2Sm3UK8uHfxAcydjF5j0vanR2BYWFcMvrOyuqfczfA8+\
u28EqerCYO83vDkTcw7JjqZTqfta6TZ6TqWhf9nKuLmi8bDfL8KVP/\
Lx0ybZbD2G4bBp0d2Rqv1t4y/Iu28DLHrp+L+741n72jBFw1HCrBfZSk4PMomikPvETbp6tz6/\
AYdyq+Y3SGVLDCiWycZb+4/nhYgdebQoy1m2xAOqKeARHNqXURx+0emzIzzEBBYoHn1/\
XLJhvLOpSAO9vXngnC7ADzhKxbntAcpAt1B5NkX/6ouJVczjQZ8n4gDJ1StVb0t7A+\
ypIryFgGRhLjBU29BnNYJTUCFSz7QQkS5yAYQrJf9uO++YeLlUCq9hWqS3kWB640p+\
FJ9MsCH1IxNVlzxw4cXcFti9lE8qRWXcTSdHHabI7pfpPpxg3NgR5KQmhJwgd6tyl0m8Jf3RSW9uBu\
TejWhG5N6NaEbk34f9cEFzH+K/0GCW64Rg=="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {}]}], 
       XMLElement["dataformats", {}, {"minput"}], 
       XMLElement["states", {"count" -> "1"}, {
         XMLElement[
         "statelist", {
          "count" -> "2", "value" -> "Complex-valued plot", "delimiters" -> 
           ""}, {
           XMLElement[
           "state", {
            "name" -> "Complex-valued plot", "input" -> 
             "Plot__1_Complex-valued plot"}, {}], 
           XMLElement[
           "state", {
            "name" -> "Real-valued plot", "input" -> 
             "Plot__1_Real-valued plot"}, {}]}]}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[-30 Log[x], {x, -18, 18}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max3087$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min3086$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3086$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3087$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$764317$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min3086$\
764318$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max3087$764319$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max3087$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min3086$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$764317$$\
, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3086$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3086$\
764318$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3087$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max3087$\
764319$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$3205658[
                    
                    Plot[{
                    Re[(-30) Log[$CellContext`x]], 
                    Im[(-30) Log[$CellContext`x]]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][(-30) Log[$CellContext`x], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3086$$], 
                    (
                    Piecewise[{{
                    0. + 19.242809417694552` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    19.242809417694552` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min3086$$], \
-18.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3086$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max3087$$]], \

                    (Piecewise[{{
                    0. + 19.242809417694552` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    19.242809417694552` Tan[1.5040801783846716` #]]& )[
                    If[CalculateUtilities`GraphicsUtilities`Private`min3086$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max3087$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3086$$ + 
                    0.036000000000000004`, 
                    CalculateUtilities`GraphicsUtilities`Private`max3087$$]], 
                    18.]}, LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, Ticks -> Automatic, 
                    ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min3086$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max3087$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, $CellContext`UnitNumberForm, 
                    NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat = \
$CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$3205658]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3205658[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines = 
                    ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3205658[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    All, 1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbinv7/APkPiMYGP7hgR0MCYNKEn53lvsNBauHWxnG/\
x58NlN0qxdpZgO0JR+ONWX5vHdc89d78mRjNJ+r9fTV635IDlJb+\
DpsTVDOctlIci701xRrZkU6RV8dtuamJo9yuEHJd533Zr3Us3A+\
PMrfB94UnAw9KthnBlG9WRfQZ6xRNeekWLH9icTLhPg7Cd9ur31fGd3d8fDYCwjMIYqobfbQuaZAk3\
THgJds+YtB/HNHx+\
Vx08F5zH9XlCRUP3AescKiIWRAjjmE3zr5WbqLiZmQBBQ5MJpcvIctr1AG8XEdExnOb5xPlkv2gKDm\
mrPzb2Sm3UK8uHfxAcydjF5j0vanR2BYWFcMvrOyuqfczfA8+\
u28EqerCYO83vDkTcw7JjqZTqfta6TZ6TqWhf9nKuLmi8bDfL8KVP/\
Lx0ybZbD2GobBp0d2Rqv1t4y/Mu28DLHrp+L+741n72jBFw1HCrBfZSk4PMomikPvETbp6tz6/\
AYdyq+Y3SGVLDCiWycZb+4/nhYgdebQoy1m2xAOqKeARHNqXURx+0emzIzzEBBYoHn1/\
XLJhvLOpSAO9vXngnC7ADzhKxbntAcpAt1B5NkX/6ouJVczjQZ8n4gDJ1StVb0t7A+\
ypIryFgGRhLjBU29BnNYJTUCFSz7QQkS5yAYQrJf9uO++YeLlUCq9hWqS3kWB640p+\
FJ9MsCH1IxNVlzxw4cXcFti9lE8qRWXcTSdHHabI7pfpPpxg3NgR5KQmhJwgd6tyl0m8Jf3RSW9uBu\
TejWhG5N6NaEbk34f9cEFzH+K/0G5Ca4dg=="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {}]}], 
       XMLElement["dataformats", {}, {"minput"}], 
       XMLElement["states", {"count" -> "1"}, {
         XMLElement[
         "statelist", {
          "count" -> "2", "value" -> "Complex-valued plot", "delimiters" -> 
           ""}, {
           XMLElement[
           "state", {
            "name" -> "Complex-valued plot", "input" -> 
             "Plot__2_Complex-valued plot"}, {}], 
           XMLElement[
           "state", {
            "name" -> "Real-valued plot", "input" -> 
             "Plot__2_Real-valued plot"}, {}]}]}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Properties as a real function", "scanner" -> 
     "FunctionProperties", "id" -> "PropertiesAsARealFunction", "position" -> 
     "300", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> "Domain"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               TemplateBox[{"\"{\"", 
                 RowBox[{"x", "\[Element]", 
                   TagBox["\[DoubleStruckCapitalR]", 
                    Function[{}, Reals]]}], "\" : \"", 
                 RowBox[{"x", ">", "0"}], "\"}\""}, "RowDefault"], "\"  \"", 
               StyleBox[
                
                RowBox[{
                 "\"(\"", "\[NoBreak]", "\"all positive real numbers\"", 
                  "\[NoBreak]", "\")\""}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False]}, "RowDefault"], 
             LineIndent -> 0], TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Range"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               TagBox["\[DoubleStruckCapitalR]", 
                Function[{}, Reals]], "\"  \"", 
               StyleBox[
                
                RowBox[{
                 "\"(\"", "\[NoBreak]", "\"all real numbers\"", "\[NoBreak]", 
                  "\")\""}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False]}, "RowDefault"], 
             LineIndent -> 0], TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Surjectivity"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             TagBox[
              FormBox[
               TemplateBox[{"\"surjective \"", 
                 StyleBox[
                 "\" onto \[DoubleStruckCapitalR]\"", 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, 
                  GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
               TraditionalForm], Format[#, TraditionalForm]& ], 
             TraditionalForm], TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement[
       "info", {
        "text" -> "\[DoubleStruckCapitalR] is the set of real numbers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/mathematica/ref/Reals.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/R.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
             "\"\[DoubleStruckCapitalR] is the set of real numbers\"", 
              TraditionalForm]], "Output", {}]}]}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"title" -> "Derivative", "scanner" -> "Derivative", "id" -> 
     "Derivative", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"D[f[x] == -30 Log[x], x]"}], 
       XMLElement["moutput", {}, {"-30/x"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                TagBox[
                 FractionBox["\[DifferentialD]", 
                  RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", "x"}]], 
                 Global`TagBoxWrapper["StringBoxes" -> RowBox[{"d/d", "x"}]]],
                 "\[InvisibleSpace]", 
                RowBox[{"(", 
                  TagBox[
                   TagBox[
                    RowBox[{
                    RowBox[{"-", "30"}], " ", 
                    RowBox[{"log", "(", "x", ")"}]}], HoldForm], 
                   PolynomialForm[#, TraditionalOrder -> False]& ], ")"}]}], 
              "\[LongEqual]", 
              TagBox[
               RowBox[{"-", 
                 FractionBox["30", "x"]}], Identity]}], TraditionalForm]], 
          "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Derivative__Step-by-step solution"}, {}]}]}], Typeset`pod5$$ = 
   XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "500", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[-30 Log[x], x]"}], 
       XMLElement["moutput", {}, {"-30 x (-1 + Log[x])"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   TagBox[
                    RowBox[{
                    RowBox[{"-", "30"}], " ", 
                    RowBox[{"log", "(", "x", ")"}]}], HoldForm], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{
                    RowBox[{"-", "30"}], " ", "x", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "(", "x", ")"}], "-", "1"}], ")"}]}], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0, 
                   GrayLevel[0], StripOnInput -> False], "+", 
                  StyleBox[
                  "constant", FontFamily -> "Helvetica", Magnification -> 
                   0.9 Inherited]}], 
                LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 0, 
                
                GrayLevel[0.6], StripOnInput -> False], Identity]}], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution"}, {}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False, False, False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Function", "word" -> "Log", "template" -> 
        "Assuming \"${word}\" is ${desc1}. Use ${desc2} instead", "count" -> 
        "2"}, {
        XMLElement[
        "value", {
         "name" -> "Log", "desc" -> "the natural logarithm", "input" -> 
          "*FunClash.Log-_*Log.Log10-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Log10", "desc" -> "the base 10 logarithm", "input" -> 
          "*FunClash.Log-_*Log10.Log-"}, {}]}]}], 
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "reinterpret", {
       "text" -> "Using closest Wolfram|Alpha interpretation:", "new" -> 
        "f(x) = -30 Log(x)", "score" -> "0.609459", "level" -> "high"}, {
       "\n   ", 
        XMLElement[
        "alternative", {"score" -> "0.363636", "level" -> "medium"}, {
         "(x), 0 \[LessEqual] x \[LessEqual] 1"}], "\n   ", 
        XMLElement[
        "alternative", {"score" -> "0.135135", "level" -> "low"}, {"range"}], 
        "\n  "}]}]}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "5", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "7.967", 
    "parsetiming" -> "0.358", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa34251cff9fc2021eba4000003a5a376f13i7bc15", "host" -> 
    "http://www2.wolframalpha.com", "server" -> "8", "related" -> "", 
    "version" -> "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -7., 
    "Date" -> {2014, 9, 7, 18, 19, 9.839096`7.745530184704922}, "Line" -> 11, 
    "SessionID" -> 24190340719069411275}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "IndefiniteIntegral", "Indefinite integral", 1, 1, "Input", 
    "Integrate[-30 Log[x], x]"}, Typeset`open$$ = True, Typeset`newq$$ = 
   "range of f(x) = -30 Log(x), 0 \[LessEqual] x \[LessEqual] 1"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{700., {1721., 26.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "30"}], " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "x"}], "+", 
    RowBox[{"x", " ", 
     RowBox[{"Log", "[", "x", "]"}]}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.6191255087995453`*^9, 3.619127949901133*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "Integral of sin (pi*x), 0 \\[LessEqual] x \\[LessEqual] 1", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Fast parse", "Fast parse", 1, 0, "Input", 
        "Integrate[Sin[Pi*x], {x, 0, 1}]"}, "ExtrusionOpen" -> False, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}, 
    PodStates -> {"Input__Step-by-step solution"}}, Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Definite integrals", "scanner" -> "Integral", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "2", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[Sin[Pi x], {x, 0, 1}]"}], 
       XMLElement["moutput", {}, {"2/Pi"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", "1"], 
                 RowBox[{
                   RowBox[{"sin", "(", 
                    RowBox[{"\[Pi]", " ", "x"}], ")"}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TemplateBox[{
                FractionBox["2", "\[Pi]"], "\" \[TildeTilde] \"", 
                "0.63661977236758134307553505349005718152`5."}, 
               "RowDefault"]}], TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{"\"Compute the definite integral:\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, StripOnInput -> False]}, {
                    RowBox[{
                    SubsuperscriptBox["\[Integral]", "0", "1"], 
                    RowBox[{
                    RowBox[{"sin", "(", 
                    RowBox[{"\[Pi]", " ", "x"}], ")"}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"For the integrand \"", 
                    RowBox[{"sin", "(", 
                    RowBox[{"\[Pi]", " ", "x"}], ")"}], "\", substitute \"", 
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{"\[Pi]", " ", "x"}]}], "\" and \"", 
                    RowBox[{
                    RowBox[{"\[DifferentialD]", "u"}], "\[LongEqual]", 
                    "\[Pi]"}], "\"\"", 
                    TemplateBox[{"\"\[ThinSpace]\"", 
                    RowBox[{"\[DifferentialD]", "x"}]}, "RowDefault"], 
                    "\".\\nThis gives a new lower bound \"", 
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{"\[Pi]", " ", "0"}], "\[LongEqual]", "0"}], 
                    "\" and upper bound \"", 
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{"\[Pi]", " ", "1"}], "\[LongEqual]", "\[Pi]"}], 
                    "\":\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, StripOnInput -> False]}, {
                    TemplateBox[{"\" \[LongEqual] \"", 
                    RowBox[{
                    FractionBox["1", "\[Pi]"], 
                    RowBox[{
                    SubsuperscriptBox["\[Integral]", "0", "\[Pi]"], 
                    RowBox[{
                    RowBox[{"sin", "(", "u", ")"}], 
                    RowBox[{"\[DifferentialD]", "u"}]}]}]}]}, "RowDefault"]}},
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Apply the fundamental theorem of calculus.\\nThe \
antiderivative of \"", 
                    RowBox[{"sin", "(", "u", ")"}], "\" is \"", 
                    RowBox[{"-", 
                    RowBox[{"cos", "(", "u", ")"}]}], "\":\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, StripOnInput -> False]}, {
                    TemplateBox[{"\" \[LongEqual] \"", 
                    TemplateBox[{
                    RowBox[{"(", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"cos", "(", "u", ")"}], "\[Pi]"]}], ")"}], "0", 
                    "\[Pi]"}, "", DisplayFunction :> (SubsuperscriptBox[
                    RowBox[{#, 
                    StyleBox[
                    "\[RightBracketingBar]", SpanMinSize -> 
                    3.5]}], #2, #3]& )]}, "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Evaluate the antiderivative at the limits and \
subtract.\\n \"", 
                    RowBox[{
                    TemplateBox[{
                    RowBox[{"(", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"cos", "(", "u", ")"}], "\[Pi]"]}], ")"}], "0", 
                    "\[Pi]"}, "", DisplayFunction :> (SubsuperscriptBox[
                    RowBox[{#, 
                    StyleBox[
                    "\[RightBracketingBar]", SpanMinSize -> 
                    3.5]}], #2, #3]& )], "\[LongEqual]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"cos", "(", "\[Pi]", ")"}], "\[Pi]"]}], ")"}], 
                    "-", 
                    RowBox[{"(", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"cos", "(", "0", ")"}], "\[Pi]"]}], ")"}]}], 
                    "\[LongEqual]", 
                    FractionBox["2", "\[Pi]"]}]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, StripOnInput -> False]}, {
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer\"", "\":\""}, "RowDefault"], 
                    FontFamily -> "Arial", FontSize -> 12, StripOnInput -> 
                    False], "\[SpanFromLeft]"}, {"\"\"", 
                    TemplateBox[{"\" \[LongEqual] \"", 
                    FractionBox["2", "\[Pi]"]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{
                    RGBColor[{1., 0.984313725490196, 0.6745098039215687}]}}}, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False, FrameStyle -> 
                    RGBColor[{0.8196078431372549, 0.788235294117647, 
                    0.16078431372549018`}]], "Grid"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {}]}], 
       
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "More digits", "input" -> "Input__More digits"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Input__Hide steps"}, {}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Visual representation of the integral", "scanner" -> 
     "Integral", "id" -> "VisualRepresentationOfTheIntegral", "position" -> 
     "200", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[Sin[Pi x], {x, 0, 1}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{
              GraphicsComplexBox[CompressedData["
1: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
NMo87v/h/96f/su3/wDItq2S
               "], {{{}, {
                  EdgeForm[], 
                  Directive[
                   Opacity[0.1], 
                   RGBColor[0, 0, 1]], 
                  GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJwt0WWQEFQUgNEtSrqkY+mULkFKpEOWTmEB6V1SSgGDEJDuRjqU7lC6pTuV
TqVLwbOz/Djz3blv5v25oeGRYRFBAQEBgcQMjO6V93NBDdZD+oYZ7OIJXzGB
LdyjARH8xBquUZaatOEHlnKeAuQnHx+RlzzkJhc5yUF2spGVLGQmE6FkJANl
qEFrvmcJ50hPaarTiu9YzFnSUZ/OjGA1f/EJ1QjnWxZxhrTUoxPDWcWflKIq
LRnIQk6Thp6MZzN3qUtHhrGSq5SkG2PYwC2qMIltPKAFA1jAKVIznZ08pgf7
eME4NnGHOhzgFVN4y+/8TYeA6IPvkWf8yL+sIIZ9CB+bg/SgvmYq79jOP3SN
+sL7Xn3OaP5jPTepzH5eMpGt3OcLdvOU/sznJKmYxg4e0Z2xbOQ2YUzmNx7S
nqEs5zIl6MIo1nGDSjTnG+ZxgpTUph1D+JVLFCeSkazlOhVpxtfM5Tgp+Jy2
DOYXLlKMz2hKP37mGB9Siy8ZxDIuUJQKNKEvczhKcorwKY3pw2yOkIzClKcR
vZnFHyQlCYlJREISEJ94xOUD4hCbWMSMujchBEfdm0KUoyG9mMlh/gdCe4FZ

                    "]]}]}, {}, {}}}], {{{}, {}, {
                 Hue[0.67, 0.6, 0.6], 
                 Directive[
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]], 
                 LineBox[CompressedData["
1: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
                  
                  "]]}}}}, {GridLines -> Dynamic[
                Map[{{#, 
                   GrayLevel[0.7]}}& , 
                 MousePosition[{"Graphics", Graphics}, None]]], 
              Method -> {"GridLinesInFront" -> True}, Epilog -> {{
                 LineBox[{{0, 0}, {0, 0}}], 
                 LineBox[{{1, 0}, {1, 0}}]}, 
                DynamicBox[
                 Typeset`ToBoxes[
                  
                  DynamicModule[{
                   CalculateUtilities`GraphicsUtilities`Private`pt = (
                    NearestFunction[1, {253, 1}, 3, CompressedData["
1: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
pA5w6PEUsjh6Zf33KEQWSsUmJlL4D0dFIoo=
                    "], CompressedData["
1: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
PsChJVDI5uiXi+9RiCqSjktKovAfMLUiiA==
                    "], CompressedData["
1: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
                    
                    "], Automatic, 
                    Hold[
                    Nearest[CompressedData["
1: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
PsChJVDI5uiXi+9RiCqSjktKovAfMLUiiA==
                    "] -> CompressedData["
1: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
                    
                    "]]]][
                    Part[#, 1]]& )[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                   If[
                   CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     2]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     3]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[
                    Part[CalculateUtilities`GraphicsUtilities`Private`scaled, 
                    1] - 0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt]}]],
                   TraditionalForm, Graphics]]}, AxesOrigin -> {Automatic, 0},
               PlotRange -> All, ImageSize -> 200, AspectRatio -> 
              NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> True, 
              AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
              BaseStyle -> {CellBaseline -> Baseline}, Epilog -> {
                LineBox[{{0, 0}, {0, 0}}], 
                LineBox[{{1, 0}, {1, 0}}]}, FrameTicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10], 
              LabelStyle -> {FontFamily -> "Verdana", FontSize -> 10}, 
              Method -> {"AxesInFront" -> True}, 
              PlotRange -> {{-0.1, 1.1}, {-0.30901692120354657`, 
               0.9999999579063413}}, PlotRangeClipping -> True, 
              PlotRangePadding -> {Automatic, Automatic}, Prolog -> {
                Opacity[0], 
                TagBox[
                 RectangleBox[
                  Scaled[{0, 0}], 
                  Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
              TicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10]}], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Riemann sums", "scanner" -> "Integral", "id" -> 
     "RiemannSums", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 TagBox[
                  GridBox[{{
                    TagBox[
                    PaneBox[
                    StyleBox[
                    "\"left sum\"", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, StripOnInput -> False], 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    RowBox[{
                    FractionBox[
                    RowBox[{"cot", "(", 
                    FractionBox["\[Pi]", 
                    RowBox[{"2", " ", "n"}]], ")"}], "n"], "\[LongEqual]", 
                    TagBox[
                    TemplateBox[{
                    RowBox[{
                    FractionBox["2", "\[Pi]"], "-", 
                    FractionBox["\[Pi]", 
                    RowBox[{"6", " ", 
                    SuperscriptBox["n", "2"]}]], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "n"], ")"}], "4"], ")"}], 
                    SeriesData[$CellContext`n, 
                    DirectedInfinity[1], {}, 0, 4, 1], Editable -> False]}], 
                    RowBox[{"SeriesData", "[", 
                    RowBox[{"n", ",", "\[Infinity]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["2", "\[Pi]"], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["\[Pi]", "6"]}]}], "}"}], ",", "0", ",", "4", 
                    ",", "1"}], "]"}]}, "SeriesData", 
                    DisplayFunction -> (#& ), 
                    InterpretationFunction -> (#2& ), SyntaxForm -> Plus], 
                    Identity]}]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxBackground -> {"Columns" -> {None, None}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, FrameStyle -> 
                   GrayLevel[0.84], BaselinePosition -> Automatic, 
                   AllowScriptLevelChange -> False], "Grid"], 
                 LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
                 False]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`RiemannSumScanner`Private`intervals$$ = 10, 
                 CalculateScan`RiemannSumScanner`Private`method$$ = 
                 CalculateScan`RiemannSumScanner`Private`LeftValue, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[CalculateScan`RiemannSumScanner`Private`intervals$$],
                     10, "number of subintervals"}, 2, 100, 1}, {{
                    Hold[CalculateScan`RiemannSumScanner`Private`method$$], 
                    CalculateScan`RiemannSumScanner`Private`LeftValue, 
                    "summation method"}, {
                    CalculateScan`RiemannSumScanner`Private`LeftValue -> 
                    "left endpoint", 
                    CalculateScan`RiemannSumScanner`Private`MidpointValue -> 
                    "midpoint", 
                    CalculateScan`RiemannSumScanner`Private`RightValue -> 
                    "right endpoint"}}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2939663$$ = 
                 False, CalculateScan`RiemannSumScanner`Private`intervals$\
2939664$$ = 0, CalculateScan`RiemannSumScanner`Private`method$2939665$$ = 
                 False}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`RiemannSumScanner`Private`intervals$$ = 10, 
                    CalculateScan`RiemannSumScanner`Private`method$$ = 
                    CalculateScan`RiemannSumScanner`Private`LeftValue, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2939663$\
$, False], 
                    Hold[
                    CalculateScan`RiemannSumScanner`Private`intervals$$, 
                    CalculateScan`RiemannSumScanner`Private`intervals$2939664$\
$, 0], 
                    Hold[
                    CalculateScan`RiemannSumScanner`Private`method$$, 
                    CalculateScan`RiemannSumScanner`Private`method$2939665$$, 
                    False]}, 
                  "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    
                    With[{CalculateScan`RiemannSumScanner`Private`delta$ = (1 - 
                    0)/CalculateScan`RiemannSumScanner`Private`intervals$$, 
                    CalculateScan`RiemannSumScanner`Private`epsilon$ = 
                    RandomReal[{0, 0.001}]}, 
                    Labeled[
                    Plot[
                    Sin[
                    Pi $CellContext`x], {$CellContext`x, -0.09999999999999998,
                     1.1}, PlotRange -> {{-0.09999999999999998, 
                    1.1}, {-0.09999999999999998, 1.1}}, Prolog -> Table[
                    (Flatten[{
                    If[
                    TrueQ[Part[#, 2, 2] > 0], {
                    Opacity[0.1], Blue, 
                    EdgeForm[
                    RGBColor[{0.63, 0.64, 0.84}]]}, {
                    Opacity[0.1], Red, 
                    EdgeForm[
                    RGBColor[{0.9, 0.64, 0.64}]]}], 
                    Polygon[#]}]& )[
                    ({{#, 0}, {#, #3}, {#2, #3}, {#2, 0}}& )[
                    0 + CalculateScan`RiemannSumScanner`Private`i 
                    CalculateScan`RiemannSumScanner`Private`delta$, 
                    0 + (CalculateScan`RiemannSumScanner`Private`i + 1) 
                    CalculateScan`RiemannSumScanner`Private`delta$, 
                    (If[
                    Or[
                    Not[
                    NumericQ[#]], 
                    Not[
                    FreeQ[#, 
                    Alternatives[Complex, I]]]], 0, #]& )[
                    Quiet[
                    Which[
                    MatchQ[
                    CalculateScan`RiemannSumScanner`Private`method$$, 
                    CalculateScan`RiemannSumScanner`Private`LeftValue], 
                    (If[
                    Not[
                    NumericQ[#]], 
                    N[
                    ReplaceAll[
                    Sin[Pi $CellContext`x], $CellContext`x -> 
                    0 + CalculateScan`RiemannSumScanner`Private`i 
                    CalculateScan`RiemannSumScanner`Private`delta$ + 
                    CalculateScan`RiemannSumScanner`Private`epsilon$]], #]& )[
                    
                    N[
                    ReplaceAll[
                    Sin[Pi $CellContext`x], $CellContext`x -> 
                    0 + CalculateScan`RiemannSumScanner`Private`i 
                    CalculateScan`RiemannSumScanner`Private`delta$]]], 
                    MatchQ[
                    CalculateScan`RiemannSumScanner`Private`method$$, 
                    CalculateScan`RiemannSumScanner`Private`MidpointValue], 
                    (If[
                    Not[
                    NumericQ[#]], 
                    N[
                    ReplaceAll[
                    Sin[Pi $CellContext`x], $CellContext`x -> 
                    0 + (CalculateScan`RiemannSumScanner`Private`i 
                    CalculateScan`RiemannSumScanner`Private`delta$ + (
                    CalculateScan`RiemannSumScanner`Private`i + 1) 
                    CalculateScan`RiemannSumScanner`Private`delta$)/2 + 
                    CalculateScan`RiemannSumScanner`Private`epsilon$]], #]& )[
                    
                    N[
                    ReplaceAll[
                    Sin[Pi $CellContext`x], $CellContext`x -> 
                    0 + (CalculateScan`RiemannSumScanner`Private`i 
                    CalculateScan`RiemannSumScanner`Private`delta$ + (
                    CalculateScan`RiemannSumScanner`Private`i + 1) 
                    CalculateScan`RiemannSumScanner`Private`delta$)/2]]], 
                    MatchQ[
                    CalculateScan`RiemannSumScanner`Private`method$$, 
                    CalculateScan`RiemannSumScanner`Private`RightValue], 
                    (If[
                    Not[
                    NumericQ[#]], 
                    N[
                    ReplaceAll[
                    Sin[Pi $CellContext`x], $CellContext`x -> 
                    0 + (CalculateScan`RiemannSumScanner`Private`i + 1) 
                    CalculateScan`RiemannSumScanner`Private`delta$ - 
                    CalculateScan`RiemannSumScanner`Private`epsilon$]], #]& )[
                    
                    N[
                    ReplaceAll[
                    Sin[Pi $CellContext`x], $CellContext`x -> 
                    0 + (CalculateScan`RiemannSumScanner`Private`i + 1) 
                    CalculateScan`RiemannSumScanner`Private`delta$]]], True, 
                    0]]]]], {
                    CalculateScan`RiemannSumScanner`Private`i, 0, 
                    CalculateScan`RiemannSumScanner`Private`intervals$$ - 1}],
                     PlotStyle -> AbsoluteThickness[1], ImageSize -> 1.5 200], 
                    (If[
                    NumericQ[#], 
                    Grid[{{
                    Row[{
                    Style["integral: ", 
                    GrayLevel[0.6]], 
                    TildeTilde[2/Pi, 0.6366197723675814]}]}, {
                    Row[{
                    Style["Riemann sum: ", 
                    GrayLevel[0.6]], #}]}, {
                    Row[{
                    Style["error: ", 
                    GrayLevel[0.6]], 
                    Abs[# - 2/Pi]}]}}, Alignment -> ":"], ""]& )[
                    (Chop[
                    N[
                    TimeConstrained[
                    Simplify[#], 0.5, #]]]& )[
                    Quiet[CalculateScan`RiemannSumScanner`Private`delta$ Sum[
                    ReplaceAll[
                    Sin[
                    Pi $CellContext`x], {$CellContext`x -> 
                    0 + CalculateScan`RiemannSumScanner`Private`k 
                    CalculateScan`RiemannSumScanner`Private`delta$ + 
                    CalculateScan`RiemannSumScanner`Private`delta$ 
                    ReplaceAll[
                    CalculateScan`RiemannSumScanner`Private`method$$, {
                    CalculateScan`RiemannSumScanner`Private`LeftValue -> 0, 
                    CalculateScan`RiemannSumScanner`Private`MidpointValue -> 
                    Rational[1, 2], 
                    CalculateScan`RiemannSumScanner`Private`RightValue -> 
                    1}]}], {
                    CalculateScan`RiemannSumScanner`Private`k, 0, 
                    CalculateScan`RiemannSumScanner`Private`intervals$$ - 
                    1}]]]]]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`RiemannSumScanner`Private`intervals$$, 10, 
                    "number of subintervals"}, 2, 100, 1, ControlPlacement -> 
                    1}, {{CalculateScan`RiemannSumScanner`Private`method$$, 
                    CalculateScan`RiemannSumScanner`Private`LeftValue, 
                    "summation method"}, {
                    CalculateScan`RiemannSumScanner`Private`LeftValue -> 
                    "left endpoint", 
                    CalculateScan`RiemannSumScanner`Private`MidpointValue -> 
                    "midpoint", 
                    CalculateScan`RiemannSumScanner`Private`RightValue -> 
                    "right endpoint"}, ControlPlacement -> 2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbinv7/\
APkPiMtA2Q9gEJ6GBMGlCS8r232GksXDvYzjb48+Czm6RZu0oxHaAp/XCqL83ju+eeu96TIxml/\
V6vp69a80Fykt7A02NrhnKWy0KQd6e5olozKdIr+Oy2NTE1e5TDD0q877o176WagfHnV/g+\
8KTgYOhXwzgzjOrJvoI8Y4muPSPFju1PJlwmwNlP+\
nR7d2d368VLD4OxjMAYqoTeaQuZZwo0TXsIdM2atxzEN398VB4/FZzH9HtBRUL1A+sdKyAWRgrgmE/\
wrZebqbuYmAFBQJELp8nJc9j2Am0UE9MxneX4xvlkbbUFBjXVnpt7JTfrFOTDv4kPZOxi8h6XtDs7A\
sPCuGT0nZXVP+dugOfXbeGVPFlNHOb3hiNvYNgx1ct0PmtdJ89I1bUu+jlXFzVfNhrk+VOm/\
l86ZNosh7HdNgw6O7I1Xq29ZfjnbeFljl0/F/\
d9az57Rwm4ajhUgvsoScHnUTRTHniJtk9X59bhMe5UfMfoDKlghRPZOMt+\
cf3xsAKvN4UYazfZgHREPQMimlPrIo7bPTZlZpiBgsQCz6/\
rl002lnUoAXe2rz0ThNkB5glZtzyhOUgX6g4myb78UXEruZxpMuT9QBg6pWqt6G9hfZQlV5CxDIwkx\
guaeg3msEpqBCpY9oMSJM5BMIRkv+zHffMPFyuBVO0rVJfyLA5caU7Dk+\
iXBT6kYmqy5o4dOLqC2xazieRJrbqIpenitNkc0/\
0m040bmgM9lITQkoQP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCS5i/Ff6DbPKuLY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More cases", "input" -> "RiemannSums__More cases"}, {}]}], 
     
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "cot(x) is the cotangent function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/mathematica/ref/Cot.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Cot", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Cotangent.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
             "\"cot(x) is the cotangent function\"", TraditionalForm]], 
            "Output", {}]}]}]}]}], Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "400", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[Sin[Pi x], x]"}], 
       XMLElement["moutput", {}, {"-(Cos[Pi x]/Pi)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   TagBox[
                    RowBox[{"sin", "(", 
                    RowBox[{"\[Pi]", " ", "x"}], ")"}], HoldForm], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{"-", 
                    FractionBox[
                    RowBox[{"cos", "(", 
                    RowBox[{"\[Pi]", " ", "x"}], ")"}], "\[Pi]"]}], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0, 
                   GrayLevel[0], StripOnInput -> False], "+", 
                  StyleBox[
                  "constant", FontFamily -> "Helvetica", Magnification -> 
                   0.9 Inherited]}], 
                LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 0, 
                
                GrayLevel[0.6], StripOnInput -> False], Identity]}], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "IndefiniteIntegral__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution"}, {}]}]}], 
   Typeset`aux1$$ = {True, False, {False, False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {
   True, False, {False, False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "4", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.354", 
    "parsetiming" -> "0.589", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa4446224478ae8ahae93100005569d8c3e75ae377", "host" -> 
    "http://www3.wolframalpha.com", "server" -> "20", "related" -> 
    "http://www3.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa4447224478ae8ahae93100002g89cced70df7ib1&s=20", "version" -> "2.6"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -7., 
    "Date" -> {2014, 9, 7, 15, 21, 54.544316`8.489324474388614}, "Line" -> 
    113, "SessionID" -> 24189925911411440498}, Typeset`showpods$$ = {1, 2, 3, 
   4}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Fast parse", "Fast parse", 1, 0, "Input", 
    "Integrate[Sin[Pi*x], {x, 0, 1}]"}, Typeset`open$$ = False, 
   Typeset`newq$$ = 
   "Integral of sin (pi*x), 0 \\[LessEqual] x \\[LessEqual] 1"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{335., {37., 26.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}],
        Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 FractionBox["2", "\[Pi]"]], "Output",
 CellChangeTimes->{
  3.619067802771283*^9, 3.619068375504437*^9, {3.619117287242999*^9, 
   3.6191173075663652`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"2", "/", "x"}], "\[Equal]", ".6333"}], ",", "x"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.619116837345366*^9, 3.6191168465468082`*^9}, {
  3.6191168801505127`*^9, 3.6191168933892517`*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Solve", "::", "ratnz"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Solve was unable to solve the system with inexact \
coefficients. The answer was obtained by solving a corresponding exact system \
and numericizing the result. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/Solve\\\", ButtonNote -> \
\\\"Solve::ratnz\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.6191168941465073`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"x", "\[Rule]", "3.158060950576346`"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.619116894148623*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"1", "/", ".6333"}]], "Input",
 CellChangeTimes->{{3.6191170641841803`*^9, 3.6191170667575417`*^9}}],

Cell[BoxData["1.5790304752881732`"], "Output",
 CellChangeTimes->{3.6191170671773233`*^9}]
}, Open  ]],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{3.619117265188817*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Solve 2/x == .6333 for x", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Fast parse", "Fast parse", 1, 0, "Input", "Solve[2/x == 0.6333, x]"}, 
      "ExtrusionOpen" -> False, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}, 
    PodStates -> {"Result__Step-by-step solution"}}, Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Solve[2/x == 0.6333, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"solve\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox[
                    RowBox[{
                    FractionBox["2", "x"], "\[LongEqual]", 
                    TagBox["0.6333`", Identity]}], HoldForm], 
                    StyleBox[
                    "\" for \"", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, 
                    GrayLevel[0.6], StripOnInput -> False], "x"}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None, None, None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Results", "scanner" -> "Solve", "id" -> "Result", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "2", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "{Reduce[2/x == 0.6333, x], N[Reduce[2/x == 0.6333, x]]}"}], 
       XMLElement[
       "moutput", {}, {
        "{x == Row[{20000/6333, \" \[TildeTilde] \", Chop[N[20000/6333, 5], \
2/10^5]}], {3.15806}}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"x", "\[LongEqual]", 
              TemplateBox[{
                FractionBox["20000", "6333"], "\" \[TildeTilde] \"", 
                "3.15806095057634612348018316753513342807`5."}, 
               "RowDefault"]}], TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    FormBox[
                    TagBox[
                    FormBox[
                    TemplateBox[{"\"Solve for \"", "x"}, "RowDefault"], 
                    TraditionalForm], Format[#, TraditionalForm]& ], 
                    TraditionalForm]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, StripOnInput -> False]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    FractionBox["2", "x"], "\[LongEqual]", "0.6333`"}], 
                    HoldForm]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{"\"Take the reciprocal of both sides\""}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, StripOnInput -> False]}, {
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    FractionBox["x", "2"], "\[LongEqual]", 
                    "1.5790304752881732`"}], HoldForm], HoldForm], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{"\"Multiply both sides by \"", "2"}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, StripOnInput -> False]}, {
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer\"", "\":\""}, "RowDefault"], 
                    FontFamily -> "Arial", FontSize -> 12, StripOnInput -> 
                    False], "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{"x", "\[LongEqual]", "3.1580609505763464`"}], 
                    HoldForm], HoldForm], HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{
                    RGBColor[{1., 0.984313725490196, 0.6745098039215687}]}}}, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False, FrameStyle -> 
                    RGBColor[{0.8196078431372549, 0.788235294117647, 
                    0.16078431372549018`}]], "Grid"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {}]}], 
       
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "More digits", "input" -> "Result__More digits"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Result__Hide steps"}, {}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Plot", "scanner" -> "Solve", "id" -> "RootPlot", 
     "position" -> "300", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Plot[{2/x, 0.6333}, {x, -3.17801, 4.23209}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{{{}, {}, {
                  Hue[0.67, 0.6, 0.6], 
                  Directive[
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   AbsoluteThickness[1]], 
                  LineBox[CompressedData["
1:eJwVkns41PkCh2dch3CSS20pISW6yYbOiUgxe0glbC4V0YbVKEvqdMpTWGxl
1+UUZUydUtGjMNhKfL6ekDjnUEtaq3LGjMu4zs38zM1x/vg871/vX+/H5kRS
0EktGo0Wvbj/s8drwPnnRANikf3PNJYdHxO7GitHTxkQh7A2yZoNfOjtLLXz
ijEgmnq3zh5HPjycj1mIwgxIhYFervt2PipteFSQnwFZeLQ3ZoU3HxlaQlja
GpCCDMpl5XE+XFvn95f1M8jTlss1TqV8lPp9lVC1h0G4HpsTuCsFkJVrPJoW
9EjDrsI5hs8I4iYi2S7vdUnLTp2uinOjSPbwcS+q1CEWXK3UgPYxMEa7WSPx
2sTPebwz+7gQL9L6tnE8tYiJz4/Z9ksnMXf8St43ChphRa447eUwjYKKhAOv
0hbQalg0xNw3C1Z0a3GtvRrO9Bdvh38RwVDZrrm3Sg2rbV71czdFeFj0Njbf
VI0px2t9xmwRPr35z7YzahVu5orbmBUiBGz5vWNznwp3yvR5ohYRnJRT1ONM
FSLO9CrNpSKMFS0P4wwrUdvTV40IMWI6Er66fk+B67u9Q9t3SuC+8S13fbEC
TbQL3vleEhj9tCGwJU+BeKG9MspPggZ//tW5iwqcex4ybRIiAaP76GRUqAIZ
JcOx5WckeNp3EDuWKODWMe7c8lgCiud68kvKPOrjbn0esJIiT61Vs51J4bVS
aDlqIUNHmQdb5UnhZfvezvHVMtC9zue276AQobC4KbaXIeXqVHS4HYVfTzEK
LV1lCNP/uOyqRo53OsLRx6EyrDOtSnlXJ0fw6dwD6mIZXq771v2MjRxcm1z6
bds5CPyfoEohQ/D1+KEf/OUYsH7t/mxWhrqNvkeXhsrRIxmoqR6RYathbG5D
lByv7hg+4L6XgbpVum7tOTkKJ+JzXlTKENQ1PRR/Tw7vaw6H2sJlmBhMKhye
l4PdWc4bfCnFLfUT1odaCgVlTRGfq6UYOpWR3dpMISe5r/fLQym2dIVtau6k
kLJS9w2vQIqc8aCjvTwK/gmxT8YSpIjL7/9zntk85g3sUqQrpfh6ptLXL20e
Id/c1TW6KMG/ut+uOsRUIJNvxn1+VgL5Cp7OZLACtenZUSfjJOh5brSkMFqB
pQ2sxubFLjMu9XW6i506bT3Ont0mQf/d60npTxXwVP0++EEgxkRpVE7vciUc
npnV3TsoRnNDsfkNqRKhf82ODvQTY/og3adHS4UsgcJE6SFGyUKinq2pCrxV
vPhgJzHWXFr9ULRZBXZOtbW+nhjdya/e+MSpsOzE/muJjSKk+v7FoeOLCkrz
7BNu60WgqvZepv2hxgivv3SVlQhZzvmq+5NqvKt26F8wXfzxsRfHIjVqPAro
9O9Qz8KNiRgjWw0OZxrvCOubRUmSY/HpBA2eSAr1L2bOwmrrl+XfLmhQ/8A7
7FLbDASNL13SVtPIT17D/95XM4PkhVv/bd5AI1GDmXtM2DNgG39Xb7adRozM
O5w4KTO48GDX1wJfGonNCNQQuxm4HjaLcTxLI+YnIu7rXJ3Gp95IRkgHjaRY
p05d85zCRY66be4KnZjv6tblOk7BJbzm/tANOuEe2bhmwHIKlfWbXg+U0Ik4
/1Ogw8wkNEf899Nq6SRJx7e6lTOJwgInf/NhOkkYt/xBTZtEwMQVs3SmFoni
PqdYr4W4zap4yrLRJrSeZaY3nwmx7CMsKrZqE85k4samO0IcLr/dQHlok8/2
NuFLUoQwP/Jr7MdwbRJRnNv4aJ0QG4wXusr+oU1CL4VfHsoaR8lIZlbKn3SI
v59KO4g5hj37aoa7LHRJpNg4q3vHGIr6QpuE9rqExbbW2283BuUFl4O2rrrk
F8keBlMziuK/Jf84GKpLejm5Rp51owh28SnLKFn0KUsLx7Wj6Dr626b3dnok
scJ5vRYlwM70w6+YgfrkUrDPo3SBAN1hH11V0fokbyHYQf1eAFP291bvUvVJ
dch5R6pKgPJO6/Qhtj6R0rFlOkaAHpfdXpwZffL38AC3gW4+btz9mTNVwiAf
Dp3PMNzNx1qT0tQtBwzI/wC81GcR
                   "]], 
                  LineBox[CompressedData["
1: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
0xjCbdjcGG8cwikdQZUyDCXNw/kXDBz+D9DuFjg=
                   "]], 
                  
                  LineBox[{{-0.000544180844187034, -3.1636628330468426`}, \
{-0.0005397536894725694, 3.1295968815192055`}}]}, {
                  Hue[0.9060679774997897, 0.6, 0.6], 
                  Directive[
                   RGBColor[0.6, 0.24, 0.4428931686004542], 
                   AbsoluteThickness[1]], 
                  LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQfcHhlmF/DucBv4sTY/45P7E3O/LTd951Djh/jrtk
1lonBP/r0n+2e/+zwfkZr2PmGl9ihfOLbJ0tpqxigfM5np/Pe5bJDOfvLL9q
MN+OCc7/Ft/Y5/mLAc6ftDLLf0/5//0wfl7ikRmbVP/C+cknsiR7Fv6C8/v+
Mm008vgB5z/1Xr1/7a+vcH6o5wJWnurPcP5vkfYkc7WPcH6JfOnbbru3cL63
+x/mII8XcH4vd7rHpuWP4XymmGvfNrrehfMP3Vy6w/j5ZTj/tHrA+paGw3C+
zOJlXdPWZdvD+CavxdZMYD8M53c/PLdw2YzLcP4SkdMTA5juwvlthYeDQuQe
w/kdv9jf7ZR/AefLPc+Ibj39Bs4/aCWhe/TtBzj/+Its08+Zn+H86SfOqoXs
/grn+/189OCi3Q84/3w0W0vT9F9wvspSyQ1xT/7A+Qn2D5aEJ/+H8ze3Rh08
eJvBAcbXmjJP5JkcE5zfujvzzmIfZjjf+9qajPISFoT8TM/IyK2scP6S0tx9
Vx6wwfmmv161x6lywPmGRQ9E/yVzwvlCzLES5r1ccH6ajXF93XluOH9+34So
+D88cL7zldRfocp8cH7UoSn/opL54fzVKUt3/3ETgPNZzLZzBM9C8OPYT4au
fIvgAwDml7jy
                   "]]}}}, {GridLines -> Dynamic[
                  Map[{{#, 
                    GrayLevel[0.7]}}& , 
                   MousePosition[{"Graphics", Graphics}, None]]], 
                Method -> {"GridLinesInFront" -> True}, Epilog -> {{
                   AbsolutePointSize[5], 
                   Hue[0], {
                    TagBox[
                    TooltipBox[
                    PointBox[{3.158060950214062, 0.6333000000726505}], 
                    
                    TemplateBox[{
                    "\"(\"", 
                    "3.15806095021406184099337630140743933997`7.\
9772948850955", "\",\"", 
                    "0.63330000007265047752904930265825061298`7.\
977294885095501", "\")\""}, "RowDefault"]], Annotation[#, 
                    
                    Row[{"(", 
                    3.15806095021406184099337630140743933997`7.9772948850955, 
                    ",", 0.63330000007265047752904930265825061298`7.\
977294885095501, ")"}], "Tooltip"]& ]}}, 
                  DynamicBox[
                   Typeset`ToBoxes[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = (
                    NearestFunction[1, {254, 2}, 3, CompressedData["
1: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
                    
                    "], CompressedData["
1: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
SU+Iyf+L+D/NmuW8
                    "], CompressedData["
1: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
uE/YuE/YuCfY+PnC/j+0eEFK
                    "], Automatic, 
                    Hold[
                    Nearest[CompressedData["
1:eJxF13k01PsbwPHKdhMJlaJFaRGi1RaeKNos11KWyFVJC5UuiSxF9iuqK6GI
iERiLGHqwYwZBo1hjL2YFG0KoQg/v3N+H78/5sx5nfnMP3O+8/48z5rjFyyc
582ZM2dq5vXf9yDdbt7zSx2oU27lGBdfgvSxrx5Zbh24YE7pnP1JJSiUPyGV
droDzx20sxtPLcGwDTJmccc6cEnvEu2T2SUYJWHK9DvYgeuvrWcYYwnG9pQV
H1zbgYfotv3u70swMzjuXi+nHZeP/6spvb0U6+tN7ZZtbcfMoYykz02lqNzU
zLvEbUWDfWc+JxlT0eOV1tz+my0YzihPyml6ieJnbw6hGQ9vDsUkH/FHLImY
6IwY4WIpm/fDiFaOFrcMPS/mN6GzZm008CpwUixT+IBVI04WpuhMK9FwdP/E
sRu/G/AzvcPy0zM6ljQfYRV4sVHRrIz2txUD3WXNpVpc2Xg+OsRJxZ6Bio6H
7H45sTGUKmvz6QQD4/rhk64xG/kBvc6X/2bg5QlFUaY8G3XvJKewbzNw55qJ
A201r/GgXMvDyEYG5rkm10zKvUaeSHeW5REmPhXorzYqr0OOuZvIrYvVeEfN
/MOaojo00PWP3O5djd5HSwUmn9Zhwkixcuf1atxP+UePEleHr6Yy2+FONfYe
31qw+kId3g5IzjIvqsbVlT7JP1fWYQx1cChtshpvXRO/nHW1Fucf1lXddasG
vSa3KSzUYOGbonrlxnoWHs9tOrJiMwsdluoJz21l4SEnjwglBRae3Wn7UIPP
wlVVhYNGEix0dl+gQR1lIf0fzfKAvhqsGqB+VJCvRakVeg6DcTX4Ok/QzdOj
FrO1D8Rxf1bjT+kbW04q1GG3l+OCxFImLnaMysf79XjpazWvIZeJjumXP+hk
1aPgiW2pwulMXPtq7llGcT1uMhXSuhTNxOfh6Y+mGmfOr3t66sBJJgrLx1QI
ib5GQc5oxZg4E4M9yhb7+7xGRaWbV6ycGKieGuIV78zGkuSxPRFHGLjCto5H
82Cj8RInifJDDDSLor77HcRG9zk7HiurMzBt/mb7xFQ2lvLamuYtYGCBmOvG
f7pnzgetV8srqEJ62NyjmWoNeLGT+l78jyrMe2BRHVzQgNu0YkN+T9JRolaG
HUZtwOFYt42fh+moLdQfdofegF5mq85Uv6Vjb7CWQTm3Af0qA74EFtNRGo3/
uDLSgOGZBsNjp+j4xJm76JwmB9M8qufwq2iod+v5yUI6B505D1Maymg4oL9x
KaOegxtVvQ0wj4YxpyzEunkczOrbdOP+AxoKFnRMq33kYL5dpIi1Jw3NfjPj
9Rc2Iu42XVi3jobS1VE5mnaN2CbGlSsKqkSL5dJp73814p7NnlZ1Vyqxc6FA
npxQE+aYLI3iu1Vi1wZxIcdFTRh402ZqoU0lNi/S7hHf2ITKi7q6XVQqcW3O
kLjE4Sb0k/6Qvry5AhdvfSJbSGlCedmfan4bKnBKZs9KY18uRmjHn74jV4EZ
Y6sDHcK5+MNOO+XJogpkxjEeBNzlYk2irxRvvBxVkmx9Rp9z8dLKuSOq7HK8
ulbfKf8DF+nyoqXdXuU4xnGuuXa4GdmmmmFhtxEfljn6+ujz8Enix/VyfogT
EjMP+p88DOxPoOW4IEatTVBoc+ThzsDJqUYdRGtZ5qpIfx4mFlZ6rux7hVlJ
qVcHqDw8tcLkRP6uV/ji94RLu24LTn500uvspWKIx2nrZPNWbFGX7jzPpiL1
WfitwhOt+DyI7j23lIpZ9ouZHzxb8cTKjYUboqlokmcpk5jQitV/flF216Li
imPmyy3et+Kd4svLhW+W4a69MTe2XWvDTcGRP9Q0SnHPuXX3cuvb0emhrO4O
hZmuUZseb+a3Y0LZk2BNiVK8/11DoXa0HRcMMZfq95WgVYdkmLN8B34+Jqhl
EVeCxk7HFeU9OzBb08/PY+wF3vzxTXBwXSeqfjkvXFJcjI3RaQq2D7vwlMiU
6ctHxXgr5O+zJ0u6MHltVFxFdDHGOXqqJDR2oYTtU0WWSzHGLzRrDhF6g9+q
+g52yBSjdOPZ4YtubzAv+a/oSa8i9PXZZ/DN8C0+s1TJetxRiC1zBf9QWdqN
6FwuvnNJEVj8HvuW0fQWIoa/Pci0LoZf8UenDWXfQL/GI10jt2L4mnQ6IGCq
Cwx9j3S9CyyGBVv6Jb/wu2Ba8OWK1c+KoSORrWef3QWXlkYkxgq+AN1V1u3h
+l1go7UuPjDvBexIyzV44tEJ6wNs/rVfUApVnapjNePtoDCyOTxsdSlIqAQX
/HjfDmvPCfgXbC+FwfCQYOC0wyrrZy5i9qVADxrftWMmkUvVBHdRs0shYMJ9
5W3rdhB5m9sjZ1oG4QzZwHdlbdCnJ6LWEUOFWsOWDQrxrfChoFNBJJ0K86Pp
2Q2hrdCrlL9sewkVzo+uDr17uRXeLnWYF9lDhfx6dbezVq3QOpDfrL3tJRwc
MYnYLNkK1UnHfBOaXsI8R6VVYzdb4MlUYY3tUgSq7vJOpwQeHPn666a6CsL3
Hs7z0AgeCHTqWkkbIISHaefTfHhgX1L1ps4NQeXKvEC/ozyQ8GgehiqEAKF7
TsMreVDmMb5QWrscbHIjpSofN8PaT8u1fvWXQ+GavW0cBhe8e8oS+4bLQfKK
p75rCRfYrQ5TzVPlwM52eC+TzQVfZgotf3EFSLmPH029xYXmtE2mrrsrgPHU
8so1By6EO2qdeBtXAYsNLy4x+tkE37k2UVVGlXDqJd1TWasJDI1obdfMK6E5
Ttm9f3MTxBdv3qBjXwmMi81389c2gX7CPMx3rwTNy8JC58WaIMYx+3vy/Uqo
NRMc8e9uBLVP05Y+Q5XgmXRSbDSiES5MP5ZVS6IBvfKpUlY/B2gXJV0+ZdLg
3aLkqHdvOCDDv0pJp9Dg1YHBuxubOYD0P41X1NDg/lYna3YFByQixv3m/6CB
YLxDfmIiB3IXm/a8O0CHXoGwY8vNOTCwaSTj3ggd5PXbvuyiNYB0wfdVidN0
iIwYsNcrawBNvS+xD+ZXwZLdMS77KQ1w3eJdUOrKKjBYo7nm70cz569yHLMN
qwDbmBNrbsycr8uRKY+d+bx/i06n0cz586dC+3YyING29vjvVDZIU1pOqV9m
wr6g1t1Sw/UQ7S1qJHmdCcf9Q4/qvq+HBbt113+JZMIKqc/qni31IFCf+i4l
hQkqPjc+ilLrYfiD21/i9UwY4A/Z1AXXQ6OsoF2vQjUcEo5JuidXD7cDt5jc
5lTDpcjI8g9mdSBlEb59QIUFYUVS1ltaWeC41UR3kQYLNk3fF2qoZ8HTRZL7
tumzQFQzusiLxoK97Ht2lw+zIKc+d/zNMxZ4GWden/JjwcCIjJhYCAs6jJjs
hWwWCOwPD2zdyYK0XUKuau61EO7J+DSVUAOa66+nXSysg/iOrscs72oo94oL
3byVDbAhUGMwhAGSF/V0AgcboH284JodlQ6H9bjCltsboahlnF5oQoPQOPPW
LTFNMKri6us9UgG1okMTw81cyMjaJpTXWQ4VL1NsrJbwYLR/m0IGByF9QpNa
caEF1G27tlhMvIQHlsPuiymtECceZNJ+iQoB6rGqHpLtMFIk0Hz1RykstjVa
536mA9529sZop5YANVbW1TKrE1JCDorsD3oB5g68UgPhN6C6wzpXw2WmW3qF
R2UOvYX3Cq4lBzyKQOk5J4G+txtOflSvDLlXCCYhOgtuDHYD99eSgzbUAvD5
+GJd0e0eSBMVCFWYosCRJPlPwbE94E6P3zQ4ToGtlmG5h+/1gKpCGQfHKPCR
aq098qAHNnzO3PLXIAVsY0bNdjzpgdDWaLmcXgpoaOy4mo89oM0N1fKqpcDw
jVzOsy898Kqvz7AmngJsLZk4/289AJd+ZRfdpcDTAX9706Ee0N0XKJp+hwLH
bUz7vo71wDoR5YwbURTgKH/9rSLAh2+K+nZm1ymQ16ik+HQ5H9bPy9kjdYYC
UaG3v/qs4IPr/H86F56igIvOeP7B1XzIiWaeFDtBAfnHNbqf1vFhek6cvqgD
BWK8T1tu2sKHIx0+8pLmFHBVbVj2axsf2DarFZeYUmD/O4031Tv5wJDLkZM9
RIFpY5Ezp3fxIb2HTd9gSIGOuRdUNfX44Ls30lvVgAJFRbxhEX0+mGT7LtMA
Ctw+p1fSsocPdt81UnbrUOC8/GP/DCM+eCmZSx/SokCGIPWWxW7p2ftHqUzF
R3uZNJL7h+wnky2dPycqS4DsE8RknyAm+wQx2SeIyT5BTPYJYrJPEM/uE/8z
2Sdmv/+/fYKYzPvEZB4nJvMyMZk/ick8R0zmI2IybxDvsLRYZqBZOGuZzyO7
dyfk/v/3cFQt5/imzzpvzGrRqHjsrG0D8zdR+bpAPKHClXaK/HfWDqtfNgoo
ps+67Wdm9nXz3Fl/cwnN+PGoYNbkPicm9yMxuW+ISb+JSV+JSf+ISZ+ISZ+I
SZ+ISZ+ISZ+ISZ+ISZ+ISZ+ISZ+ISZ+ISZ+ISZ+ISZ+ISZ+ISZ+ISZ+ISZ+I
SU+Iyf+L+D/NmuW8
                    "] -> CompressedData["
1:eJw913k01Pv/wPEZ25hCo3AVUaEk5Uqh+433W7J0LS2WrKWoUJYKbbfcLKFE
pWvJ1kJFZUmkpPdHhOhGWZI0hLGMfRbGmBm/fufctz/mzHmcOfPHzOfzeb5f
r9WHg/YdESORSKJfr/9/b4ad+oknqIRizP0zgRr9aGR7Rf7gMSqh7fqerbau
H0lty9CA3lRCVGrU0KzTj0z0DyhOuVKJPKpUnPHmfpS/upe3z4pKzD/a6a1s
1o8ixZhIaQ2VuBXJM1hxsB8Z1szaZX2VJgqqLhVvyOhHGVbL/Z/tkCZKTDb6
l6xgIG6uyKRyXooo2540LW0+gHxHPDINvkgSVdskGvPCBtEpE3Pj2/kShGKJ
WKht7RCSHmwKHPATJ6z0hxtiDjLRqzNtv2ebihFy5lditGijaPrg5YRdfBIR
6KEcALXH0a08/91vzsyjmkW3e6wtJlHgoZrU51pCpE9+9aHvxhRaNFcruqci
RKq/w9Lp5Cn08PYHn5vyQjSmc61NNnMK/aj79HuwUICS41jvrfOmkO2mb/Ub
2wQoPYvSO1U1hTbMjfEeRwmQe3DrnAJnCg3d/s01u28OPW9uK0LuLORd7788
/h4fxQMz59ptbGS8/kPJ2lQ+qiSdM7sJ2Ujm6jr7qgQ+8mNqzXlZsVGZTX/E
9AU+Cit3GpdzYiPpJs9RL2c+ikzr88kNZqOCtj1o62I+Mqof1q96zEa8XsMj
3SGzqNQ3hd6pykEJQrHizdY8VD3HVBpU5KL6LJNMgSkPva7d2TC8kovI8Gxc
7VYecucrJrO0uCgkYuyQmwYPvTwmnaRkyEWulI6lEaIZ9FmCOfjYmYs05Z+F
fH4xgxwD4nYLU7noteZ+4+DVM6hkdRz5zpppxLB5gp7xucgx3q/ntM0M6lSv
Ni6c5KIX6y09ac4zqJndWVw0wEV6i3ziyrxm0Jv0RTklX7iIl5KhuSpsBiWN
+MW+yueifY3jPX73ZpDZNe297924aKQrKKlvdgZlNuT2dr3moBThk8D25zx0
K6vSnV7EQT3HImNq3vJQ7Km21u6HHLSp0VX3bQMPhayQrOu9xUGxw/s8W3t5
yMbf58mQPwf53vz6R8KyWTRL1QjhrOCgLRP5llZnZpHTrruSMhfY6GPTB5W9
1nwU1b+spPwkG80o90qMOvLR8/AYryO+bNRcLrM46RAf0coCK97+ui4TBqUv
JH9dp4Y1JidP/s5GX+/GB4UX8JGp4FtXO4OFRjK8Ylt/m0Pahcte3NvDQm/L
UhWuc+aQ858xh+ytWGh8D9m8WUyAohl8uTkTFkqbPyG1Rl6AelV6/Rw3sJDa
xZUPpzYKUGZskTpFioWaTr2pM/cVoKWH7a6dqJhCoZb/067vFqA5hZjDRmun
EO/Zzkuk70I00Ps1Q0V1CkXr3xQ8GBWiz0XaX+flf93HB14d8BAJ0SPbBpt6
4SQyskbeMmtEyCFKdqtr2yRKC9JJDfAXoSfsJMqFqEmkqtf92/55ESrNMXO9
+H4CMSpeG5xZSSKuwr5/LYon0Kn5lJ9v15EIr66oHXKZEyhT9mjpss0kQkah
fkN2yAQ6l7N9C8OSRPhE2osIjQlk6LDMW+ckiVA47P5AImIc/Wj1kHaqJxEh
6qFj10zH0IVs4fvpy2RCYXuTZInOGDJwK37Qc51MlLisV+tUGkP5pbrVnWlk
gnXzh732xCgSudjYkZ6TiSAJy6Ka7FGUdGuDjUIfmfAfVjotJI0i25HLy8Kt
xQivknJeYDUT3QnMKwhcLU6QmpfKJxcy0dIOpJinJ05kj55YX5nORA65d8p4
JuIEXWu12+IQJlJweenT4SZOuKfGVTzSZKJ1svONWf+IE84X3S71RA+jtIGo
6JAlEoSNlUB8n/UQ2mFR3NeoKEl4sGSjm7YOodttzpVMLUkiMFNdyk5jCM2d
M9izxlCSuMHeIW0tGkSp509d6XKWJFqz42RMXwwiRwPzrMi0X9/nKSnqrBpE
jZ4tul80pIgTefprxXgMtC3c4Y21PYW46Gj+KJzBQE2uHYaCQxQiYd5RW/iF
geQzj6t+DqUQRU5ndXjPGCi3QT28J5NCcMho07g3AzUbAJg9QSH+crM16mzq
R9fvJmaPpUkT7XvPRi4C/WiVXEbopt1U4lNk+Am3kH5A2i1S8qdSIaXsyCpK
NgN0kaxubC6gQN36L2UyJQxw9YMu1TWVAvd0AruldQxgul6v8FEEBaaKlp9f
OcEAKjCkoWI/BWpbfWoxAAOgMV02vkScAq07DGO8ugdA/Bv/s7GHpWAsnzL+
Sn0IXGwtHbPcJgn/uFSp4rd5CEg7V57v05aEY+TTu5QthoDHXJx5mrIk3Eel
54T5D4GcC6/v7uZJQBXlF+4GpUOg+VG1689yCViw1evD0z+HgZaxSYCfqQRs
CS7PyQ5lApb38cdFruLwCifgi30sE+yZczOl2YpD47MaJNEdJsguHJ+JMBWH
GeEJ7h4EE9QqpW29pyEOjyb4LF2+eARYfHe+8WZcDPKe0P6+dXcECBc9arCL
FYNqg77u0Y2jQJXUcmegjgxdJH2C3nePArEaU6PACjK8qXEwUpIzCnKcLS0o
hWQo4eX0JFp1DFi3xWsGJJMhs8NsLjpgDFR9y1wkcZQMXzasSL+yZBwcTeBE
QWky3FPwsTPGYQKUeqt3KLmQ4NWPdeN1xybA2IWBsXg7EqxmvhOT/msCkO/p
3aKZk6Dhulc6sTkTIJ+5QQ1uIkHVu7nnY7kT4Gly6DkTSRLkWIPrNTaTQO6T
RajR8XlQ9Yfyxvdjk+D29fjqeFMROB+3jVE6MwncP3rRW3VFYHOHW+ZD8hS4
V1JUqK8iAvdDM2VjFacAq1aToc0TgoiiNeN/mkwB9aadr6glQrBj7cbC5vgp
4BQYJwzTFYIa+R36XRtYIHf3eSX1jQLwl5f38MetLFBubFtUuVIAthRG3asE
LPDwdcLiADkByLGtk892YAH3dOc04cQciI6xZR26wALz0gc0+krmgKXQuWSw
gQU+O9YZ5pnOgbqh41vZfmxQdao3KOwgH1gG678yPs0GV3zvqvfv44Pament
l/5ig2HpwfeelnxQIxWxk5rIBq2W5OchG/mgSjPVQf0FG/i2LzHQE8yCCq+a
kzYiNjBK+ZhUnz4LCjtUCx7c4oDE6U9Fq/p4IKX+37WOFVzwNOsb3T1xBrit
LFt5+D0XEPOiI+ejZoDqqSyF4CYuWNbuwr1/bgbcVwkSi+/jgi+Jnlx5nxlQ
EEijVy+eBoGWy4VHts2AGgWHfww8psHaZKPETsY0YHl1iC8TToP9PU+zMy2m
gf1sb89nUx7QbGaKLVHjgo4rQQ+2WPNA2y6VowxFLjisIDiSspcHTnmaK72T
5YIwPcURDx8e0L18GCYIOSDriBV3MI4HbNfnsoJ/cMD45ydUUSsPeHK08lyz
OCAhP2SzzvFZoLXC1j5OkwOa3KWiIlL4YCCKukrajA00c5cXHegXgGY/ieL0
8ingBXpy9nvPg579fSu/754EJdFuVVXfSXBEI7nyx4FxoHM7S2FATQx2tvhe
tDQbBdEVfl0Pfj1nVrp2PyNjmMCm/anvmRAJKLygWdxOGQbRabtcXUslofnR
KZNv/wyCnNCAt609UnDLn/NWqocGwFY+M+aAljR0Kb+uvXcLA+if6lEUeVOh
ZovTyDadfrBU3FPZ6PoiqJx1yDDcug8c3W4QfqlpMXQuVTGk+vWC7IQbbgcF
MrBnKRKfyPsJzFuP8J005KDDm5fn5YQ9wO3dbZGb9xLYVbnW69vuHvDEJ7dC
YEmDHKW8kpMh3cCQLRuYsosGbYKn1/kHdQPictiqzbY0GBhDGPn4d4P2LKvo
Y3tp8GZ32VpPr24g9m3Y/os7DSZur9A9bNsNXOw29T4KpsGPvpv1yjW7gYTh
S2mHOzSYRnb+mtBOB4k16hVjGTT4QDzF8tVnOljhEBsQm02DSz5kbGN8pAO9
YNcvlTk02HFZ7bFZNR245c+laxfSoPI7nSSZIjooVoN6omoavB/hIsGMo4Pt
zx7/TK2lQRnBBXfdaDqo/Z/8bYMPNGhXaLgh+G866HLp5fl+okGXi6X6gjA6
kE6KetfSQYOr/2qo0/Khg6TVYyGB32mQFp/cfPogHagVOa2j0mnwhWm8bbUb
HRj8uzbetI8G/ym2SD+6lw7euieafmPQoIFsyYnXtnRgzZyZPD1Eg/lmmQVL
rOmg5azXA7kRGqRruHkdNaeDA5QPTnljNBg0BS6/NaUDlRlG2Eir2cL5s7K/
07i+0Azh8wfvJ/afb3qIzPsB3iew8T6BjfcJbLxPYON9AhvvE9h4n8DG+wQ2
3iew8T6Bjed9bDyPY+N5GRvPn9h4nsPG8xE2njewry8+Zv38Ud+CxTzap4st
fiz43bfccoPBlgU3rttTGPV39YJVHzy8mlxwHGBvGVF6eoNSveBrPz/de5ja
suAchcabe8R+LPjKyep9jmp9C8bnOTY+H7HxeYON+42N+4qN+4eN+4SN+4SN
+4SN+4SN+4SN+7Tw//7Xp4XP/+vTwu//r0/YuE/YuE/YuE/YuE/YuE/YuE/Y
uE/YuE/YuCfY+PnC/j+0eEFK
                    "]]]][#/{7.4100990743759745`, 
                    6.293259714566048}]& )[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     2]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     2]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[
                    Part[CalculateUtilities`GraphicsUtilities`Private`scaled, 
                    1] - 0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt]}]],
                     TraditionalForm, Graphics]]}, AspectRatio -> 
                NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> True, 
                AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
                BaseStyle -> {CellBaseline -> Baseline}, Epilog -> {
                  AbsolutePointSize[5], 
                  Hue[0], {
                   TagBox[
                    TooltipBox[
                    PointBox[{3.158060950214062, 0.6333000000726505}], 
                    
                    TemplateBox[{
                    "\"(\"", 
                    "3.15806095021406184099337630140743933997`7.\
9772948850955", "\",\"", 
                    "0.63330000007265047752904930265825061298`7.\
977294885095501", "\")\""}, "RowDefault"]], Annotation[#, 
                    
                    Row[{"(", 
                    3.15806095021406184099337630140743933997`7.9772948850955, 
                    ",", 0.63330000007265047752904930265825061298`7.\
977294885095501, ")"}], "Tooltip"]& ]}}, FrameTicksStyle -> 
                Directive[FontFamily -> "Times", FontSize -> 10], ImageSize -> 
                300., LabelStyle -> {FontFamily -> "Verdana", FontSize -> 10},
                 Method -> {}, 
                PlotRange -> {{-3.1780076485114566`, 
                 4.232091425864518}, {-3.1636628330468426`, 
                 3.1295968815192055`}}, PlotRangeClipping -> True, 
                PlotRangePadding -> {
                  Scaled[0.02], 
                  Scaled[0.02]}, Prolog -> {
                  Opacity[0], 
                  TagBox[
                   RectangleBox[
                    Scaled[{0, 0}], 
                    Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
                TicksStyle -> 
                Directive[FontFamily -> "Times", FontSize -> 10]}], 
              TagBox[
               GridBox[{{
                  GraphicsBox[{
                    RGBColor[0.24720000000000014`, 0.24, 0.6], {
                    AbsoluteThickness[2], 
                    LineBox[{{0, 0}, {1, 0}}]}}, ImageSize -> 13, 
                   BaselinePosition -> (Center -> Center)], 
                  StyleBox[
                   FractionBox["2", "x"], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0, {FontFamily -> "Verdana", FontSize -> 10}, 
                   GrayLevel[0.5], StripOnInput -> False]}, {
                  GraphicsBox[{
                    RGBColor[0.6, 0.24, 0.4428931686004542], {
                    AbsoluteThickness[2], 
                    LineBox[{{0, 0}, {1, 0}}]}}, ImageSize -> 13, 
                   BaselinePosition -> (Center -> Center)], 
                  StyleBox[
                  "0.6333`", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                   LineIndent -> 0, {FontFamily -> "Verdana", FontSize -> 10}, 
                   GrayLevel[0.5], StripOnInput -> False]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{0.3}}, "Rows" -> {{0.3}}}],
                "Grid"]}, "Labeled", DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"], 
                  
                  ItemBox[#2, Alignment -> {Inherited, Bottom}, 
                   DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  RowBox[{"(", "\[NoBreak]", 
                    GridBox[{{
                    StyleBox[
                    "Right", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], 
                    StyleBox[
                    "Bottom", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited]}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center], "\[NoBreak]", ")"}]}], 
                "]"}]& )], TraditionalForm]], "Output", {}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"title" -> "Number line", "scanner" -> "Solve", "id" -> 
     "NumberLine", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{
                TagBox[
                 TooltipBox[{
                   PointSize[0.02], 
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   PointBox[{3.158060950576346, 0.05684509711037424}]}, 
                  "3.158060950576346`"], 
                 Annotation[#, 3.158060950576346, "Tooltip"]& ]}, ImageSize -> 
               300., Axes -> {True, False}, AxesStyle -> {}, 
               PlotRange -> {{2.210642665403442, 4.10547923574925}, 
                 Automatic}, AxesOrigin -> {0, 0}], "\"\""}, "Labeled", 
             DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"]}, {
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  StyleBox[
                  "Bottom", FontFamily -> "Bitstream Vera Sans", 
                   FontSize -> -1 + Inherited]}], "]"}]& )], 
            TraditionalForm]], "Output", {Background -> None}]}], 
       XMLElement["dataformats", {}, {}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "4", "datatypes" -> 
    "Solve", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.149", 
    "parsetiming" -> "0.449", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa25231baf514ee7bbg87c000064e9igf00351bg49", "host" -> 
    "http://www5a.wolframalpha.com", "server" -> "34", "related" -> 
    "http://www5a.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa25241baf514ee7bbg87c00004d6d8iagb41de40i&s=34", "version" -> "2.6"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -7., 
    "Date" -> {2014, 9, 7, 15, 17, 11.351536`7.807629616956691}, "Line" -> 
    109, "SessionID" -> 24189925911411440498}, Typeset`showpods$$ = {1, 2, 3, 
   4}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Fast parse", "Fast parse", 1, 0, "Input", "Solve[2/x == 0.6333, x]"}, 
   Typeset`open$$ = False, Typeset`newq$$ = "Solve 2/x == .6333 for x"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{252., {37., 26.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}],
        Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Solve", "::", "ratnz"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Solve was unable to solve the system with inexact \
coefficients. The answer was obtained by solving a corresponding exact system \
and numericizing the result. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/Solve\\\", ButtonNote -> \
\\\"Solve::ratnz\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.6191170228580723`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"x", "\[Rule]", "3.158060950576346`"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.619117022859521*^9}]
}, Open  ]]
},
WindowSize->{960, 1013},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
Magnification:>1.25 Inherited,
FrontEndVersion->"10.0 for Linux x86 (64-bit) (June 27, 2014)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 4941, 119, 696, "Input"],
Cell[5502, 141, 247, 6, 58, "Input"],
Cell[CellGroupData[{
Cell[5774, 151, 182, 3, 35, "Input"],
Cell[5959, 156, 219, 4, 25, "Print"],
Cell[6181, 162, 6564, 120, 452, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12782, 287, 211, 4, 35, "Input"],
Cell[12996, 293, 89, 1, 25, "Print"],
Cell[13088, 296, 6474, 119, 453, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[19599, 420, 134, 2, 37, "Input"],
Cell[19736, 424, 730, 13, 73, "Message"]
}, Open  ]],
Cell[CellGroupData[{
Cell[20503, 442, 4524, 105, 410, "Input"],
Cell[25030, 549, 224, 3, 25, "Print"]
}, Open  ]],
Cell[CellGroupData[{
Cell[25291, 557, 602, 16, 80, "Input"],
Cell[25896, 575, 126, 2, 25, "Print"],
Cell[26025, 579, 329961, 5424, 452, 210956, 3471, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[356023, 6008, 391, 11, 58, "Input"],
Cell[356417, 6021, 123, 2, 25, "Print"],
Cell[356543, 6025, 282284, 4640, 467, 207477, 3413, "CachedBoxData", \
"BoxData", "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[638864, 10670, 220, 6, 35, "Input"],
Cell[639087, 10678, 130, 2, 35, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[639254, 10685, 218, 6, 35, "Input"],
Cell[639475, 10693, 88, 1, 68, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[639600, 10699, 31176, 609, 875, "WolframAlphaShortInput"],
Cell[670779, 11310, 959, 30, 74, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[671775, 11345, 340, 10, 35, "Input"],
Cell[672118, 11357, 567, 11, 72, "Message"],
Cell[672688, 11370, 580, 14, 35, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[673305, 11389, 206, 5, 35, "Input"],
Cell[673514, 11396, 171, 5, 64, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[673722, 11406, 6835, 146, 543, "WolframAlphaShortInput"],
Cell[680560, 11554, 309, 10, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[680906, 11569, 54555, 961, 103, "WolframAlphaShortInput"],
Cell[735464, 12532, 299, 10, 64, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[735800, 12547, 370, 12, 35, "Input"],
Cell[736173, 12561, 2655, 54, 280, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[738865, 12620, 922, 28, 80, "Input"],
Cell[739790, 12650, 14243, 250, 463, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[754070, 12905, 168, 3, 35, "Input"],
Cell[754241, 12910, 85, 1, 35, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[754363, 12916, 416, 12, 35, "Input"],
Cell[754782, 12930, 129, 2, 35, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[754948, 12937, 275, 8, 35, "Input"],
Cell[755226, 12947, 611, 12, 72, "Message"],
Cell[755840, 12961, 137, 3, 35, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[756014, 12969, 552, 13, 58, "Input"],
Cell[756569, 12984, 264, 5, 64, "Output"]
}, Open  ]],
Cell[756848, 12992, 71, 1, 35, "Input"],
Cell[756922, 12995, 3137, 70, 300, "Input"],
Cell[CellGroupData[{
Cell[760084, 13069, 445, 9, 35, "Input"],
Cell[760532, 13080, 20303, 544, 155, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[780872, 13629, 266, 5, 35, "Input"],
Cell[781141, 13636, 159, 2, 35, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[781337, 13643, 313, 9, 35, "Input"],
Cell[781653, 13654, 7865, 139, 280, "Output"]
}, Open  ]],
Cell[789533, 13796, 190, 5, 35, "Input"],
Cell[789726, 13803, 103, 2, 35, "Input"],
Cell[CellGroupData[{
Cell[789854, 13809, 556, 15, 35, "Input"],
Cell[790413, 13826, 2653, 54, 290, "Output"]
}, Open  ]],
Cell[793081, 13883, 8441, 212, 916, "Input"],
Cell[CellGroupData[{
Cell[801547, 14099, 106670, 2086, 1767, "WolframAlphaShortInput"],
Cell[908220, 16187, 260, 8, 35, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[908517, 16200, 69537, 1308, 83, "WolframAlphaShortInput"],
Cell[978057, 17510, 171, 4, 64, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[978265, 17519, 265, 7, 35, "Input"],
Cell[978533, 17528, 525, 11, 72, "Message"],
Cell[979061, 17541, 162, 4, 35, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[979260, 17550, 123, 2, 35, "Input"],
Cell[979386, 17554, 90, 1, 35, "Output"]
}, Open  ]],
Cell[979491, 17558, 87, 1, 58, "Input"],
Cell[CellGroupData[{
Cell[979603, 17563, 53768, 990, 83, "WolframAlphaShortInput"],
Cell[1033374, 18555, 525, 11, 72, "Message"],
Cell[1033902, 18568, 162, 4, 35, "Output"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
