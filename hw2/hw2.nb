(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1038219,      18706]
NotebookOptionsPosition[   1033768,      18563]
NotebookOutlinePosition[   1034133,      18579]
CellTagsIndexPosition[   1034090,      18576]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "montecarlo", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"montecarlo", "[", 
   RowBox[{"n_", ",", "f_", ",", "xmin_", ",", "xmax_", ",", "ymax_"}], "]"}],
   ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"boxarea", "=", 
       RowBox[{"ymax", "*", 
        RowBox[{"(", 
         RowBox[{"xmax", "-", "xmin"}], ")"}]}]}], ",", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "Because", " ", "of", " ", "a", " ", "bug", " ", "in", " ", "the", 
         " ", "Mathematica", " ", "function", " ", "Random"}], ",", 
        RowBox[{
        "we", " ", "must", " ", "first", " ", "take", " ", "numerical", " ", 
         "approximations", " ", "to", " ", "the", " ", "input", " ", "values",
          " ", "xmin"}], ",", "xmax", ",", 
        RowBox[{"and", " ", 
         RowBox[{"ymax", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"nymax", "=", 
       RowBox[{"N", "[", "ymax", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"nxmax", "=", 
       RowBox[{"N", "[", "xmax", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"nxmin", "=", 
       RowBox[{"N", "[", "xmin", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"count", "=", "0"}], ",", "\[IndentingNewLine]", "randpoint", 
      ",", "\[IndentingNewLine]", 
      RowBox[{"pointlist", "=", 
       RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"i", "=", "1"}], ",", 
       RowBox[{"i", "\[LessEqual]", "n"}], ",", 
       RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"randpoint", "=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Random", "[", 
            RowBox[{"Real", ",", 
             RowBox[{"{", 
              RowBox[{"nxmin", ",", "nxmax"}], "}"}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Random", "[", 
            RowBox[{"Real", ",", 
             RowBox[{"{", 
              RowBox[{"0", ",", "nymax"}], "}"}]}], "]"}]}], "}"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"pointlist", "=", 
         RowBox[{"Append", "[", 
          RowBox[{"pointlist", ",", "randpoint"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"randpoint", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "\[LessEqual]", 
            RowBox[{"f", "[", 
             RowBox[{"randpoint", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ")"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"count", "++"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"count", "/", "n"}], ")"}], "*", "ymax", "*", 
        RowBox[{"(", 
         RowBox[{"xmax", "-", "xmin"}], ")"}]}], "//", "N"}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"In", " ", "the", " ", "following", " ", "command"}], ",", 
       RowBox[{
        RowBox[{
        "the", " ", "first", " ", "two", " ", "graphics", " ", "calls", " ", 
         "are", " ", "given", " ", "the", " ", "option", " ", 
         "DisplayFunction"}], "\[Rule]", 
        RowBox[{
        "Identity", " ", "so", " ", "that", " ", "they", " ", "are", " ", 
         "not", " ", "plotted", " ", "on", " ", "the", " ", 
         RowBox[{"screen", ".", "Then"}], " ", "the", " ", "Show", " ", 
         "command", " ", "is", " ", "given", " ", "the", " ", "two", " ", 
         "plots", " ", "with", " ", "the", " ", "DisplayFunction", " ", 
         "option", " ", "set", " ", "back", " ", "to", " ", "the", " ", 
         "default", " ", 
         RowBox[{"value", ".", "This"}], " ", "results", " ", "in", " ", 
         "only", " ", "one", " ", "graph", " ", "being", " ", "shown", " ", 
         "on", " ", "the", " ", "screen"}]}], ",", 
       RowBox[{"rather", " ", "than", " ", 
        RowBox[{"three", "."}]}]}], "*)"}], 
     RowBox[{"Show", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Plot", "[", 
          RowBox[{
           RowBox[{"f", "[", "x", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"x", ",", "xmin", ",", "xmax"}], "}"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}], ",", 
         RowBox[{"ListPlot", "[", 
          RowBox[{"pointlist", ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}]}], 
        "}"}], ",", 
       RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}], ",", 
       RowBox[{"AspectRatio", "\[Rule]", "1"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellChangeTimes->{{3.619119633637137*^9, 3.619119743556432*^9}, 
   3.619450358449986*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "f", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], ":=", 
  RowBox[{"x", "^", "2"}]}]}], "Input",
 CellChangeTimes->{{3.619061427436977*^9, 3.619061442352462*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"montecarlo", "[", 
  RowBox[{"100", ",", "f", ",", "0", ",", "1", ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.6190614460977*^9, 3.619061460365301*^9}}],

Cell[BoxData["0.33`"], "Print",
 CellChangeTimes->{
  3.619061461446684*^9, 3.619061506169589*^9, {3.6190615876715117`*^9, 
   3.619061612820325*^9}, 3.619119354307084*^9, 3.619119481620069*^9, 
   3.61911972737733*^9}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
hyTnP/0/O4G7FA==
      "]]}}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.01388888888888889], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJwVknk81AkDh8X7yd1Kq9SEUnZKRuVoadO3dbxJEilbu8i6ErX5kGMLsSuL
1EdtWW9ZRwYpFo2I5EqSGeVsDMaYe+Y3Y1SKSY7t/eP5PH89/z0bA88dCVFV
UVEJ/sL/zXfu8VS6CZGn1nVjqEkCSpAg48lRHg7PUDUDpggsb3st5rnwwf7x
QO16SznsRlT1bCr6wKiPEW4fl4D8lpNlHt6G5qqVcQ2jQ6DllRYK1aUwaGJe
YNJqEKBVwnxI7gTtiFQt3JQBi2WCdcmtrfjJvuqEswcLukxuC+sZH5/kk/rx
cQqMeW1TW/FJjn/0ijbHiVnIIVNqbguL4Kk2VrLZi4u99y7yQyvZuH3mVKb9
5uewIF2pbS9lonZp1arDNyV4H8kSz6Z86V9Ka3xpg8hmxEQlXZWASe32twqV
Y0htmMN+wIc25VJ00kUu0nodXk9bCaBkfF98LJ6LTad2QllMQD/CVUM9cxxs
UrnViiNs/PX2mnMsZxDDofF2w9EisDuDG7WmasGrizpBERIoXU0zTnvLxOev
D9l2X5Dist58h9l9IcIEJ/8Z6JRCLT3xtHEZgYYU4z8orkPwtw0MXPPzBEoq
be4JRKOIc3SnXcipxpuCiHoH5zEYOT4yoxp1wTGTyp0OEYJz9eJ49MNOGDDY
n/fFEkjYpLhFXBGg9U7EN8t2FOPSar+j+20EmA6uaHLtnwK9nrw/j/Qcr7bp
f1Jm8BC2Z1uwYcYAds2f0uA29aPxHjFAcX0E+fmCAjpVDK5+k+kBxiTQ3/O3
+wsOzDJUZS0LLKRm490sexLTPh9eHtvaAN0if8rexQ7YfGXyZ9ffcgRGu+3W
HuJgbosnpc6sCMeHi6oijcSobK7JOJkjwrmq5CfXUwkYmuyKaA6RwUmng7a9
TI4rrPX5Zd7VoH1cW37dS4pA0+Cfxp4z4Fm2ZlY0KMfeyk/cq8/kuEU2aQ00
piM4/JmAODMJ23J+VGwsH+TjCeT0dQSmy3s33HYZx+8/qLcXFU7hgYrIJCWn
CVvJM0Ge344gtmOLyZAzFyWMLo24i3L0rynJ3eetQMB/xvI5iRNwrbDboKSW
wKB7uoR0Wgbxgg4VTAZoLuYGyWIpfM5qr5v1oSOd+GFySLobZ0OTwvcZDeG3
+6EbtdliuND7dh/XGEXIXcEmUZ8EPWsOJ0RFj8Jp4QwS18ow80vqo0Pvu7HM
biM+B8tQw3OiOzoRuFz89eLd8QJ0dCp9O/8nRuLE2sQTHTLkme4vi6oWIf36
R6E7nw97zX2zHd4vwVrldZ7nOoVurbsrrPwksD/NsAvf9gTk8Z1TacQzkDyI
qF2LzfCk55sFkrmQXBsPGvncD5u8Ax/5mxXYOTOf585vRkhAUpt6UDfe56Xr
8Qq5uFE3wawvnEC7Moaz3OANrHXsHmpwJKgqIPUF/yHCPdulQdeuAbSlW/+s
d5CD37Z+ED2/o8Cfc+YN59KF0BtM0/V344HPv0Sz5PKRS6pddK98jepsH2vK
kfv4vfhsAYtgQrvXEu65AtgrDQId13MgGCVlPYICnLDywxYyOvan9UVefjwB
xo4z2i2hCkTetPixq00A9YTvHV496IPq66DGbx+zQMvVIS30iDH1xOSQlXoD
otRb/7vdVoJlD39hpq2tRHLWYNgHhQL5VXrvVK1Z2MNKfmxwdwwt37D36Fnw
cKPFML6QngoHP7+WlSvFuJbb8KpiuRxjjn4ZXDcFDH2tHUdPSWD1gSxXRAjB
6FRdwsoJFAt9b5qHDEDZ4ml6ntYHD0OdAHsLMbawdryRWvQjU+7L+mpOgpP+
8dozwkFMGc9bpnvTYEqVGUVvSoa+lo9S/N0wEnKqiAUqDwFZ3zVlHpiCg8c5
7aere9FvHWZUnzuIec3RFM06Pq7b0Jw0q3lI2R1X7t0ohfn0G6+DGyRYLJ1b
Ggnk4yjzWOpsvgzTRU9HSmmTOFT9a9fpISlEbi+eLs0RuJJVH2DK6IJHXUx9
j/MoEhwOJg2aToAg8itcNvJw/5ZTZL7uONwbM9pfbG/HO08FtWOLGIQi8455
wysorqYGN9mxoKXyIDub0obev9K8ir78sdfMusldUwjLGF15ackI/gXFiz0K

      "]]}, {}}},
  AspectRatio->1,
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{0, 1}, {0., 0.9999999591836739}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6190615952300863`*^9, 3.619061612942965*^9}, 
   3.619119354371644*^9, 3.619119481675355*^9, 3.619119727459299*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"montecarlo", "[", 
  RowBox[{"100", ",", "Cos", ",", "0", ",", 
   RowBox[{"Pi", "/", "2"}], ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.619061624848662*^9, 3.619061638140601*^9}}],

Cell[BoxData["0.9581857593448869`"], "Print",
 CellChangeTimes->{3.6190616386976557`*^9}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
      "]]}}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.01388888888888889], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1: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
JzX4H0kdSDA=
      "]]}, {}}},
  AspectRatio->1,
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->
   NCache[{{0, Rational[1, 2] Pi}, {0., 0.9999999999999994}}, {{
     0, 1.5707963267948966`}, {0., 0.9999999999999994}}],
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.619061638745764*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Problem", " ", "3"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Clear", "[", "montecarloprime", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"circlep", "[", "x_", "]"}], ":=", 
    RowBox[{"{", 
     RowBox[{"x", ",", 
      RowBox[{
       RowBox[{"1", "/", "2"}], "+", 
       RowBox[{"Sqrt", "[", 
        RowBox[{"x", "-", 
         RowBox[{"x", "^", "2"}]}], "]"}]}]}], "}"}]}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"circlem", "[", "x_", "]"}], ":=", 
    RowBox[{"{", 
     RowBox[{"x", ",", 
      RowBox[{
       RowBox[{"1", "/", "2"}], "-", 
       RowBox[{"Sqrt", "[", 
        RowBox[{"x", "-", 
         RowBox[{"x", "^", "2"}]}], "]"}]}]}], "}"}]}], "\[IndentingNewLine]", 
   RowBox[{"montecarloprime", "=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"randpoint", ",", "\[IndentingNewLine]", 
        RowBox[{"count", " ", "=", "0"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"i", "=", "0"}], ",", 
         RowBox[{"i", "\[LessEqual]", "1000"}], ",", 
         RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"randpoint", "=", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"RandomReal", "[", 
              RowBox[{"{", 
               RowBox[{"0", ",", "1"}], "}"}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"RandomReal", "[", 
              RowBox[{"{", 
               RowBox[{"0", ",", "1"}], "}"}], "]"}]}], "}"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", " ", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"randpoint", "[", 
               RowBox[{"[", "2", "]"}], "]"}], "<", 
              RowBox[{
               RowBox[{"circlep", "[", 
                RowBox[{"randpoint", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "]"}], "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], "&&", 
             RowBox[{
              RowBox[{"randpoint", "[", 
               RowBox[{"[", "2", "]"}], "]"}], ">", 
              RowBox[{
               RowBox[{"circlem", "[", 
                RowBox[{"randpoint", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "]"}], "[", 
               RowBox[{"[", "2", "]"}], "]"}]}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"count", "++"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"count", "/", "1000"}], ")"}], "//", "N"}], "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.6190619699645233`*^9, 3.619062059936006*^9}, {
   3.619062199977601*^9, 3.619062328406123*^9}, {3.61906242726789*^9, 
   3.619062428062541*^9}, {3.61906246270119*^9, 3.6190628134840918`*^9}, {
   3.6190628478021708`*^9, 3.619062874830408*^9}, {3.619062975811948*^9, 
   3.619062983267879*^9}, {3.619063188695816*^9, 3.61906319367449*^9}, {
   3.619063237302219*^9, 3.619063241897728*^9}, {3.619063349805641*^9, 
   3.6190633967803717`*^9}, {3.619063449845117*^9, 3.6190634617653513`*^9}, {
   3.619063777856955*^9, 3.619063849754505*^9}, {3.6190639463099403`*^9, 
   3.619063958105073*^9}, {3.6190639917261963`*^9, 3.61906401601593*^9}, {
   3.6190640706104527`*^9, 3.619064070835445*^9}, {3.619064112587391*^9, 
   3.6190641238177958`*^9}, {3.619064167512919*^9, 3.619064226978079*^9}, 
   3.619064692737056*^9, {3.619064746797011*^9, 3.619064748799539*^9}, {
   3.619065028909173*^9, 3.61906503408286*^9}, {3.6190656279821777`*^9, 
   3.619065648786007*^9}, {3.619065711227359*^9, 3.619065746792715*^9}, {
   3.619065782618104*^9, 3.619065838568042*^9}, {3.619065901228572*^9, 
   3.619065950559091*^9}, {3.61906601413043*^9, 3.619066026225963*^9}, {
   3.619066107821072*^9, 3.619066124301807*^9}, {3.619066984055366*^9, 
   3.6190669927077103`*^9}, {3.619450801758987*^9, 3.619450822727459*^9}, {
   3.619451475760659*^9, 3.619451476148884*^9}, {3.6194517411231527`*^9, 
   3.6194517824622097`*^9}, 3.619451907424294*^9}],

Cell[BoxData["0.777`"], "Print",
 CellChangeTimes->{{3.6190658394906816`*^9, 3.6190658521866837`*^9}, 
   3.619065906531348*^9, 3.6190659650715857`*^9, {3.619066017844781*^9, 
   3.619066029955619*^9}, 3.619066113704794*^9, 3.619221630443067*^9, {
   3.619450809198634*^9, 3.6194508235140553`*^9}, 3.6194514768152227`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"10", "!"}], "/", 
    RowBox[{"5", "!"}]}], ")"}], "/", 
  RowBox[{"10", "^", "5"}]}]], "Input",
 CellChangeTimes->{{3.619455148076519*^9, 3.6194551554737043`*^9}, {
  3.619455194089012*^9, 3.619455198715723*^9}}],

Cell[BoxData[
 FractionBox["189", "625"]], "Output",
 CellChangeTimes->{
  3.619455155973111*^9, {3.61945519565338*^9, 3.619455199271761*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Problem", " ", "4"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"montecarlo", "[", 
   RowBox[{"10000", ",", 
    RowBox[{
     RowBox[{"Sin", "[", 
      RowBox[{"Pi", "#"}], "]"}], "&"}], ",", "0", ",", "1", ",", "1"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.619066978130691*^9, 3.619067017433085*^9}, {
  3.619067100078209*^9, 3.619067173823403*^9}, {3.619118316863123*^9, 
  3.619118328714551*^9}, {3.619450369848474*^9, 3.6194503733359756`*^9}, {
  3.619455121858128*^9, 3.619455122304167*^9}}],

Cell[BoxData["0.633`"], "Print",
 CellChangeTimes->{{3.6194503514694777`*^9, 3.6194503764515657`*^9}, 
   3.6194514817314177`*^9}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1:eJwd2HlcjN37B/CSpyitoiJtsoQULWTpE/lGiBZLoUULIpQSLVQSSkolS0IU
PZJ2W6S0UEiLUk0zc98zraaaO6Wkhd95fn/N6/3HzLnvc871ua7XaLoet/WY
JCIiIiYqIvLf52aP7rqS7ztNRYolv7QZ+Zh2Ze1ypVQMscByfsOchO2YKdUY
k6+yAW+l88Sb452x1ETx4R2VHZAdcCrLjT+OVbUGOfEq7sgocNGLiw9Bye0y
oysqfjD1tVPdEh+L8LDLp6NUzuPkvLM/rOPuwd2PUYlUuYacH8/OnbqSjSnX
LO/3/0iDeO6RF5kHS/CidvnGjWrZmNl/+GLJ5krYh7NZZZcL0DvgyX4nrMHx
XF/dmz9f4ddDfidLsgEDV79ViooW431Goa5HeRMq370vrllTCqG1iMuW/FZ4
BlhKO/SWY/j4S1R4U3g3dfnfzKMf8Kmo02H1QR4epZb/mTXvI9ScJTzsF7TB
bGbRA7usz/DKa/SRed4O3Q/sl+8X1WCvmtNiEZ1ONJjZCR8La/HmTIUgOrUL
XpJH6hv16+GVzVrf1tuNT827i2RivsLcQN/Z3lgAOwt7Xnt7Aw4tbdp2cV8P
jFMu707R/oYl+64sTLPrBf0noeFQSBNKqdGEBrM+TOutvXzqfBPGpttKTtvQ
h5Ut0uYXIptQl96dt25jH67mX8xNTWhCbuDUpHSrPpgdCorhpjehiHu90HFP
H+7XuW7aUdsEr9L5Kr6+fXBNW/YGms34slPnp1laHzosa1JnljUjqyqwxElE
CO3LC2LjKpsher3BbJ+YEO6fQwKnfWlGVYtu4m5xIfjb9G0mtTTDflz01cZp
QnDt4v70CZtR2KvXJa0sRLOjnUPFrBa0FGlkLdMT4qNPk4zfiRb8LYo70bhX
iJxbVECdJgtzGovfnMsSwktHlbV8AQuSvfKbunOEWPjKftW1JSzIeNlnb8kX
4l5z3eiuFSzcN1aWn/ZSiBil8iD2VhYUUarq+06Io4n/nuk6xcJHiZX6rK9C
LIrzCZuoZmEsYeNiqV9CdGpk8Zy+snBviVfH4t9CPMgRrCtpZuFqRaD/5jEh
ZtW6TQpvY+Hbm7eqYX+FmCq7K3zKbxaa4z6cbJBg0B29KmK6disiNaJMpisz
eHhJLFInsBV7kpZI9xszUGi/dHZpSCv+nN9w+clKBqGQ8TM434qa8PnaHqsY
7BlWdl4b0wrxFM7D+rUMZN2XGtk8aMXeQf3O6xsYBMCBd/pjK85+jjMvt2Fg
NZxlUjmLDbmU0yW5hxkU2hjqVauz8c/YnAP6XgwWPn2lXa/Nhnep19ynRxlM
ci+XZS9lQ8Isoz3Fm8GLupYOZj0bZYrzQnz8GWg+nRyvdIQNT/9gkRdhDIbc
9ggOvGbDaQ37Tv11Bv7Tx6Y3l7Ax+GDaVL2bDIZLb6+1fM/GOCVtEHmLWJNz
dXEdGyIrNMqMkxmMUM4r+jvZ0K5h1frfZzC61+N8gAIHMXf5V6KeMAiUEs8S
KHFwZl0nqzSTwVjho6a9czhIqlnfMfKUwbhK9yLThRy83pW1zCmHwUTT4bpJ
phzse933SPoZA5Ed3mrRnhxMfI7q/1tE9lNMftPEMQ7eXVSeqljMQDQ/1+eY
Hwdbr+Rw5pWQ91cYLLcO4cD4dG7h+lIGYrUnj8xI5GCkibNu/3sG4luDXt4t
4eDCSIrfsi8MpDZcsM1V4iL3mO3AHDaDNcXH5d+rciEzZDTeSnxslUMtS5OL
OQNPJW9yGNTrL9k2eQkXEWlLjCQpBklz6i13m3EhqzGv+BuPnMevOesmDnFx
vejIHbkuct4nJEQUjnHR1+fck0Uc3df/dr4vF1ZGa9Zu6WbAtJWtsT7DxXTz
C71nvjN4Xuu5MjWOC1/W7tOfehhsyHimZ1nIxannimsl+sn5zLsndCzmwuK6
WUUE8b8pl56eKOeisvKD9aQf5H1u7F2c/IWst7HKZ4i4Plx0AcPnQinyA6ts
kMHkv4IOsW4unMbGgpf/ZGAc2JCm3MfFmtU2WveIb3mna63/RZ5/lbn/iSEG
Lo5WaolSFM6Ux64X/cUgvtmY81iOwlNbxQln4nI7jeS3Myhsm36x8A3xgs2D
Kt3qFIZWaJh6jzAQGt+asdqQwmfriweLfzPQyDvXsN2EQss3/kqZUQa2ul4J
7qYU+rmi0nuJn82FfMwmCu3+p4qExMFyHdN4+yj4F5ea/hljsIiVZ8beT8H7
s6dw9TiDltRQv6YDFATVoQWniI1XqLKrSY7PCu0P/07cLiKQrTpJodl1/RX1
CQYJH1+YlwdS0Lk7nGlH3O9o96TwPIWb5QF6z4nvLtCknkVSEH5aH99ObPVD
qJAbQ8HS3VVK/g+DjPNRgek3KUSWJpm5E9tvs896cIdCa0zWeBSxuPJ8/p0H
FOR+y9RkE7s9eWd5LZPCtOHM54PECidjz8TmUggO6Pyk8JdBialjbtRzCurB
7r/0iI9NWdwR8ZrsN+aZbCFWrR9RDiuhcEBrQZw78cfb77cGV5D9Sjn0N4g4
wONa6KmP5Pd2dIfHES/Ucy04UUMhdzBN7SHxtxG97qMNFEJs79Q8Jz5fOjHb
s4XCHNfa6++JDaI/bXfnUpBZttavgZi/81a4cxsFlR7+QZr4qvrBF3u6KVi3
lPgIiE2/G/bs7CPv4/otboC4L2+Sus0AhYEpcytHiJODa223/iLnceyR4gTx
Zou7FzaOU1hk63LqL/G4hLHjfREaS2Os+/9zQ6/qLzUxGoWzT4X8IX5SJxaX
/A+NVrkG7THic88Fi2ZNoSFIOUgPETvcriu/IUkjXHV5npBYP/Sl0wxpGjE/
DJI6iCU87o3Ey9JY8+ToTRYx1/JCvJwCjckDVGY18bOlR5fEKNJ4fPly01vi
6Ok73ksp0Vi+10c5i9h9ZJVLpAqNQZf447eJV3M0R8VVaUQUMuwLxAqlU66d
V6Px8UGUizex4BGjO0mThtDHfXQ38U3vov0T82i0v2B5axIf35k2FriQhq9P
oJUYscWqy4kji2jsveFs1kbuw5CYQ9WgHo1KRtTzDvHnbrj5LKexcXvZ3VPE
adXzJ4SGNGaerBdsJ7a98VNfYELj3+y2ilFyP3WCWz8eXEPjfqtgRzWxyP5S
9w5TGrbjlqN3iLMXXb1Jm9PYET37kgnxtLeLRZqsaDjvd81xIPXRt1WjIMqa
Rm5PRIES8ZdWxUOmdjRqmNDTX0m9xf6eqHloTyOqVM5sA7GCUe09PzcaYuML
vkiS+hwsK7dbeIAG/8H1uuekvhtsX0mwD9FkzpNIdCFO9H5w3PwYjWc/pux7
SvJAOdMPCgE0EmTX9iwmefF7ledgRRCNKikfpmKYAavKMT3gLI0ZO9j5jsS3
uyxkeeE0OBv9z1wgeaQ2V4XKjqGxTD5WsYjkmXZS0VmrNBrPCxMc3jIM/tHJ
Wy6aTvbf4B8PQ+LOF486Cx7T0NhuvOxfIYP0xthtqtk0Dkr+lYrsI3ki76rW
84qsV7Hpsx7JW/1L4m8v1dBwuGEQJt/JQF5pzGdNPY2FsTfuuHUwGHjIzOtv
oCH7+0hQfjuD/LLmK7tZNN5wbwRtbSP58zfDcX4HjZUCl1g3msFa/+0TZaM0
LFzc5eazSP883B1kOUHW47s4u7YwyHEOG/3yl4b5+6LC5GYGWpb5v1om82Bk
UXVdqonBFFWlAUaGB05VWEfdV7K/77ids+fyoOaX1y1SzcBL+lit7xYexH21
O7tJf5w/SWL7byseNikPsTrfMKCG71WftebBnGnn8F+T+0PXfYzcyQNL0lWm
8RWDlflGFfecefgUe2P2A9JvJztMvPrky4NNYugQl/Tr5LTo1LnJPHROldNq
J/3f2dxgDXWXh7svdOQiyXygxW9pSLrPw74uqZeLb5B+pL5AXCGdh23RMUaH
rzEoSHp3SCSPh3yb3YJPMeR+Xx3W5Xzg4cjerzZa4aTfB7u8vD7IQ1dhX9Ns
Mt+UzJawsR3mIZ09uvz0IZJXhU+/S//mYbWxxZb6AwwkR0ZnRfzhYZehfEGI
G4OZvolnfKfy4dTf4Fm8j8FSz4/rrdX5kLsWGla/jYHTTsPqqVv4qH+3+3+b
lpF+Ntsq5aUVH6YqQREeegz28zx8D1rzERBVejtUl9T/0RsqFTv5eOyzYUuO
DgPPiFGPUBc+OG8+vRrSZOD3rOTP8Ek+HM9pDiorMIiaYaXfnsJHlUNs7bt+
IZ41eiS8HebjyYOfoQ/ThbgqOncZfvNh4Gtn6PZQiMO69JfiMT76/PVk1FOF
UIvYI/lOpA3j5j1GcXeFuGC4PaxMsg3qh6wcnBOF2JWw8nilWht0lIZkUs8J
8ctaaku9RRss9/saVZH52eRzzqTO620wibeuujlFCI3/HRhK2NAOu5k93xxX
98HI0CiuoLMdOa/Ug+oce0ENXKlKjehAcHKSgZtnD3oNbCJUlneCMSnZV7Be
gPk9ugLRr51YbjkWbzLjO8q1T9Z7h3XhT+dYeUNeF2IbGt1stbtxiX6033k7
+Z5dSdyk8m4EfS6QB6cdeTtnmJv4fMcXry5pXaM2pFaH3+ErCKBW1ahUmcjD
rw/7ghRKBdDVV5ttHUqBjisekjvWA3uzuhWlpa0Yrlutck6mF8pTM3vjdJrh
fU2rJOBNL3ZZmpq5LmyAUrWWXLtTH3I50Qond9XCrjFzXPVPHziSJp0jslUY
cL7vxc4QIlhCRetxXgmKXbIjZLaSOtxtrsh7lIvCGq8t3P/uRah/8n6XXDw3
XSSfRebsxLmv62iVXGSqPky22s2g99GQfWt0DpKak/KjXcm991nLO9eRhZPW
F3iSAQwMdWV/ZAZnYLGZ41qJR6Rubp6dlfD4PuZnzxJr+pfUmeJp8x2q96Gl
1lz5iMzBmz3z1BRjU6A8brvDIpf0BddeXY3vdyH+ctORCFKnlxqXnv55Ngk8
PcNbYqTOTW2pi+sy4sC++8PpayODN6MmJmmxV9Esna2dSnIix3T2dilBDL70
6OSs55LntzyvFRUShTfp6h/CyBzpZf+4yzsjDC9ncqJteslcbJF5z0pwFvkR
SbaaJBc1aLEZL0ICkeE2g1tC5r6w26Ybz2f44GF9fepVksvXshtd6kIOI2Xd
VU8XkvO9IduW3szYj+QcKz190kcunXK1eJ1hgxvqUkP/9fGly678//8D/wc7
Bo1W
      "]]}}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.005555555555555556], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1: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
OekpnAt3nbPBrqfHMav3c4FysANv1Swzq9je1x839VcpfxBTKcL3pAZH4Cwv
eEriawveLU1vzwwoA2dZ+u3CA6NIC/K+O1Wdi7NHeE/8bmuDKJuc41s6cedT
4tiNcQaiHvOMaHGOQ5RV7HJIcRRTB6/MUTkpmHzlu5S/rhuzW/G54ZUHTlcO
K++ua0RF3b1781WteKfrt7VOs4Z9D+evPTuVAdEglzNLkgRsOlDTfXTNIDh6
euZELXJx3dFqvO1kB25k9ekrrWzGA9rqAgszdo8qEEfpLmSUWG3fdzFvAj42
WYf8Qlno3hl48+ZeEgoSm/LKW8uQdP08z4eRMfSWp4o/Y687XJTv1sHoNtC2
7JZcu7sJfHTDndYD7H4wLEyR+/cDl5plj+b+IMHP58Qzu2MM1F1fHaKTygRr
q+aI9ikWfnW08ro3s+fSdcLbLXcM0TNP+ZzZHJ4p81bK22IQkyefbhK/OolD
d9bF/aSRQC29sHHlehLmQg3mW3PrURn47/HUzjoYnlAs43zAws4rqqNJZhOY
Weu9WGrbiA+acyzDTiIsRn8bderTwR8/kutSlw0Khxsl8cYoYsxGXcx5O0Hc
eKN+/SIJaYY+tu6TRdC1WONeNNiBWUtD93mtMVi933Y09TsVubd32qdWV+La
xsjcw0e78JtaPezJvm8cocEyL4VjsfUszyaOO60wv+/XMHqbAanThcn6pH5w
Op0/GqTYD4XxtJl/8hRIns96pVhNwX0hz7boD01w6Vos91cfAEfAA5HzrXSU
y27f8sd0CJz8Dn4fgsm49Hy1gKsxEY+CY7X1TSfw4K1UsskhJhzKWRED4l24
d+v9McsLTKwJFHz7Pp+CS1c/uMyx+7/UN9X0//9ndLTt4am6Xw9zxlMPpbpR
nEyPkku17ID/lpDW27/b4Vg6zUFwr0HYs5VdlyTaEJ4f8obm0Y8cqnNI2FoG
ehfWS6kEjGOrRYf7bjsS0gPECurusvv4M79U+mcydKR3POjr68K2rgtX+kOp
iKTxmL4PY/fX+vAvkUJXULt6XcbDyHHEH82VCdFm4lNtPSdrYxcsv6U1yfpR
cCbU3Un6GA2abobbZ7nb4MFRL/z44BjGFYQvU9U+Q71w+ZrrFxION0ltbiqk
Is54nuPC5j4MfP7OP5tLRY6o/xmmwCAY67WvwHwYTxsz874ZsSBfZHjfOpUO
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
GZ+J/NDqzpOVrEFE9GD9UcI3zbmP/T0XUXG3/4yr6s0UWGuYeDGj2Ag79iNo
9ioL2jli6ZfcqDg2eHKhu+MIsgWX+6bt2VjDrI4JJjwtODv7QFgsGalNe3lh
hH8sSrf598afjuz7pBJHi/fY/tza2Fe3HY7dFlM7XnSC8lrYO+dJDeIGXHK6
kIWEX6tzT8zn4tpHzXPuhnwcCD1G2kLspcN517nNCj3wI63sr9/IgtoVsRMb
VlRAd6Jp0ry0kvC4059ld3DQmG5nttmzDi8cGdfLZz6Dptr+ry+xG48Uwhxu
lKdjrv7zZFrqCB4N1xvv0RxGuYpX4o/vFNR92i++6EAfnh+izT4yKYDC6vfb
n1lwkO+mnHTSiUv08pXfnit70F2hWfRcQHjw59v618TJ8Hppt1+9loFo9i74
bOmE7jexBXpsHm7PO9gz8Y2CvEDnPJXkHqysdFDqF+cjr+9zbsGfGlh1ic23
DuqDnrLEDcGLZsx9YK+nnlSCe4sse1ViBNhmEJy6MbgTUbcjz3yT4qL8pvy8
G0bZ+BEXfP4uh4S+jBGtW4T35aXquRSiEzJh/wrX02lE3/TE95LaYJIdJzW7
wx/GJRMqYs79mDgX6tWR0QZ7sXubSiYHMdDeWOxxhIykI1ENVgKC879+WJXy
leCl/I8S65ZS4NDsQ3/wgI+IpY3Dwdu7IKPjvT629xXePwiovJ7ajS/nvM6Z
6xFzLi711rGsEEH12yNF+7hIcxqU0rxCwn0Z0rbJkkb4ayj1T0U1QaE/zMqq
jQObkUTC7AUI1EwoCr3fgwPb0v7Zi/IgvfKEV0V2LU6+LRRx7mRg4bJVjZUV
JOzPtB0sfD+EgFeHyPtleXhz6vvn7WdbkFJYuY4dTPCF6NI1PvYsDPTElkUT
vLPBzniYUcXAf1zscZTm4dz0acdbgf0wHT5T+n/PzNm1cNqa3A3JpT6lGz6S
wJwI/+/0ii44fI5L2PfnDYQ5sr/DvwgQJ6110DqxEs/9Vh29qVuEQM5uzco/
tUic76q0a0qA1Rk7fi0m+mcD51zq5vv1SI/+OaW++xyiu6/qxh5qx67/LBQt
Q3tx6XzqPS0JJrK+37VpYH5GwPHEItWBBEw4MBjl2ykYtQ4/mZ7OB0NGX+Ny
cAXmcCmv86UJz76blGClRoP+kOPqMQYZBRE1mqs5jVh3kmuWoSDAGWp9QEBk
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
00HzfCv1RnISlXVPovZuZcIy0FzkeyA3H5X2zIhz63N7baPvIb1R5PeEOXcf
p+MP6dDY37cTaB+XylKRpsJv62kpZds4yF/eGmDH9a+nJ/a6DA4z4Lmk4mzV
CRokBauLXTVI+Cibc4x/Ph8pdJ/tx6vJqBFVVnrIYUFeLurnegMKrmy6mXl1
SRFMa9uKbx4iolWtkudaahUSvdZ8KYhjoPMDZYPLYTKkh3xaJROIuDtYr/mX
0YMFvrVv3+lWQbz/ppeWzCSKTmyv2ShDxuuaDCX2VhqU1n8e92FTcImvS/w2
N99LbNkUeS82/mypr/kdmoU3205q/UycgGZ8kucfQxZoU0Vuhsfz8eBLtsGC
fzem1Iw39/jnou5KjuxoAB0K1y28/zaPgvPp8rxIOpdrxcbWFRoNwexybe03
/0kcsrPyDUtiYaXYwnRWRgvyn/f2xHkQsenv02D61koYKmQ/EBQcQGvYO7n0
fCaYvB+sFicGMd3B0npoPYS7R9N+WdFpWNDPHP6tUoW2q2lGs/yTWEeNE+u0
JiB3pExC6zodv26Hf/9dn4vp4vm3woQcTGgv+nZz9+1SLvR5pmQSuuKuF/ly
aagU7w30pnOwftzg7qw/DXVrMsvoqZ2IeBZWvFA0CBsR6l/lKhIM1+q/NOP5
hBNgp5SZ9WH99O7nutV1WPVYOOYqLRYHq+L4/bnrfR7wcc2IMgczx6159Wc7
USJUNb/kxAS8c80bPgiN46RMow+TtxHsE2sUQ8oqwYqVSpbQZyHhx8tet/Uc
VHbd3OBa0I8Wc43CCzaZyLxTECbOpMPz+ppwk2UDoCfvuKsvx+XylO/X6ry7
wDYnCvvxMhDXfWQ09xEZK/anrU9424d0KZVeig0T4vGzkl+fdmDc+Kt6xiMS
NK/8GdOcuQ2bi8S8VQVUXNqW+uwafwtiX69R3VRDgcRaMWGBTR/Rf8PiJvH+
MNbWKFE78kh43p+hZszfiFblU3/fZ9FhVdlpIh3ehZ0bJA+V3+HOY2H/0Yu+
LRh6oTZSnjKKVkbv4wiTVrjnXkrIcKfj4Yq+bWlrGfCQZj6TLqDDdcsis0qC
jaDzjz/8/7nXZzkn9hP92/BrZhvx5eAYWhYJTzrTUyAi6B5ci0nMTvWsOb6V
wuVxO7tPMWNouzNY+2aqF7v3h+YytQg4Y1ZCU7jOgZMMa7t9+QievCjL6Ndk
YbXLnVZZPxYc49qjzmyewp0rSjKymWS0xJgInGCT0ZGas6F4fwf2ke5sXuQl
YfHZ/iSmTTWyT35tMtw9iA7d+W5zzWFUdIXNnaZQMS+uZ3LsWA/K+Oq+1YqN
Ij2UL3LlgRH07Vhikuk5Bt5XAZrj3P1tJm+tXFY8iFY93uLqUSp+pqm8Wb6G
jraNqYLrW/qQluMx1M/1KjuVLKlLj5sQe8YpkZpLR7qAJdNUiIVSUsqB8MIq
iGz7d89laxeEyfu/aM8n4cVRu6QHGV0grw5riiwn4OOP+pkexkdMh9u17ZQd
h8jyT0l8s5VQrhgOaY+swJ4PyWVZZmRozkezj3Hzss5VkGf0Ih1p7G6meDQF
Dw1iaj7M1OB9zT5fQnMXapkP6/585nDP2U1mtVcnNq45ZV//dQQ5t4Zv1kaO
Ycw8tprN5eWyJeb7NW43o5ef2bSbrx0FVxdEFyMmsOu8bn+4xiT4jlv9OXQj
Gw63S1w7U9nwzjPlvSlCxvgNWaGir8O4/F3q50k7Inq2SXU75rFgq/uvw32s
BGZXmrMLqrsQL/BVLi9wCFrr+pU9c3uQNPbPVDyxF+23K7IXV4whQXLZpsbE
SQhMiwbdcqyBRce+u08HE6D3tm0zb9MY1uyI2PGkaRTZO9cyNcqoSO+/vzt/
Awl6rOo2CSUG9iffEieu6oDL5SpHk/lR/HJ+vKXYh4WYrMWSdv9yOO/YIr/J
pR6G1fFfB4wIILkb6H9e7MEWksPMupVU8Fx06t5vP4EH4W8Y19+T8MZSUklg
aQs4V2X2elkNosDMWMwjvgVZEsfTjnl14A3Nc2xOhYk3v1OP6HLnn5j3ysM7
+cdRZC322mBXMfzMY35ZVdIxYu1r5eM9gguv4/eq+gejVdPfP65zAF+WnPc7
f7gTW2vdiaqyZIz1+/BOBdGw7a61qNIdFlrXWYGi2gdlC76ee2fHuHPo7z4r
bt9WnnOL+qgxhKQ2W4edJsH4duL1z0jpKTxX87++RZeNW5IqV6ee0hHk4u2w
IWIK0xpCeRltA+gemY2p+W8Sb5eKBOgdJHHrmjdY0ZaFDmSoKDwdxa4bBYJ5
1m2YfXwq7+H2MXwJ5h1W18pHqEVUzeCPV9DLrxw7+aMZccLLY41u5+Ndhnrf
f0vo+Gy0admByiFMKhsze3pHEN88IycsWIubELEzGhnFwUdvoigabPwQVj7k
V8CAyEutL9+3/P/+kt/vL08cgUq2QISKWw0cez/2WzuyEO0sfkEkkYX0IUcD
m5IJdIv/NZzh8sETUnSfu0Uj/usRi/Dp5fbbCYcCrTOT6CWetK2a7ka3xX51
p69srNxOcPAxYWLPfxKyD1MmQBDaGrVpoQsvpn1Loysn8cfv6eV1iVOIuj2i
ezmWDrlhPn3ntUysLaoKuJXehVUXnp8bvs710/DMtbdu9YN8xTHtFYUFjYS7
K021hyHacSSKBiaSXC3OZlxhIWKPg5BOHQ3JbhGqdTsIsDPfrTMewcYs+iXf
nOjEdT8DqvOHS1i1lPjLMK0bVtPKD2RVyDh91vWsiAkRw2otXnZSVNw9cef1
9Z19OFV7XDBkkIr/NG33BSUz0Wt1z75wF7f+1LcvkzQlw3h/S6LLbhZ+37Z5
H62aBcNedfvJxwSczg71LfnbjUc1oXEakZ2I5N1D+f9zE286VVVfCCMh0Cu4
ZLclE1c3i9+9vub/9+nuCzLi0NBxyLhMqmMK9StmJQevDuClXepkwuQwflLp
PsIGXC9ZM8ZXXzmFttUm9upDObCuTVksrKUjMdhe/d8MG+5bX9Oar5Yh9pJJ
XbDOJDJ4eErkrpTDpmc/4Z55DurUh2r+cHnLFocHBe+UY5X0aa18ahNMdWLX
vzj1HFNuoWcucnn96OnLs/LsKfiS9f9IsFigr/Y/6kLrxkom6U0Z7wSKGxv3
f3vFwoVO7aOWVkR4CdwLogsQoZMR1J2oSkdvZVuWx2UionsuBFtYl4CY7bHr
8JNw8J6ibFef88cvt5d6rgJjsEpxT0082Qnvj/uMd9xNg3BWzFmfaiYuku5d
Sv7KXafJ80fl9Cpc2ik66PyYg6WsdQcUvtbhzpdjMUqdZJx73fKKj5eNU5+D
OvZrcNAgK7/fSZoDhdv0FEHyFCxaUj2Cvl3D0OoT6f8OU3Db8umZ29v6YBez
wV6KW5dTeV5h8jdGYWLgfM9kpgJOz9N7l08QsKs89ukmVi8qn2VOL33Vh10J
9W8jREpxgDkvsMOZgPefAt+bzDDgfa5EJpA3H4Pppj388alQO3ghOz6LjOXz
LjzpfRUIlyqsec6t1xUjjRuHZ7NBfL5Rbx/fCAb4+z6+4PLUEW/6nmcTHHxo
PPhBQK8IxsdHO4y7R5ETwfjx5DkV94ds4l51cJAnUNhyOHAYoamP5yOjv0L3
V5PHjR108PJsvvhnLRFLCYsh0pLd4Jl5bkvhkHBx5/eXqXZjcOdRfT5+vh6L
zFDC1Y0N2Kylvbl6NBfiDxiKz4+Q8Sg1YUo1oxjeh90ZG/dVYlO4pc2WsFG8
c4hqT10zhqv/ZokSh2vxJ0Ej/+ajLGwwIUp2aUViNu+X/tkkNsypJ5ZKZdYi
7cC/FwFCHDy6vivpJIGIl/tkUtJOdsD7SfbDoTt1OFMc+54BIkQJvF15MiP4
Z/Di8+j3YWy0FNbTfDoB9S2h+s8G27Bk8ek/Zy7HnF3eIBpZxQaf1sPGF0aj
GCUsRjsQUnBkZvZd6ScavLYXN+7k6cemYLHTsxPc+VMmF/3XkoUrxq/az6Z2
4/6o2J/DTkxMKCiUDr1sQCvt4ctOIwbkDhpl2Eh3wV1JOo/N9ZvjAk2vdrSF
YWP6I0G940yEF/3KuL5tEgdFl1nKxFHAO23Qtl+WgQ+TqZ05q/ogH8TyX63V
hen3insTUtrgfkxoi5BzE5abeOW3RH/BqkhOwHbBEXTn8vNt7OjEuKPX5oqZ
SWjVL29WtEyB/oB76uAVChJ1tryfu8FC1JnFeV+BQax/rOvSLl2JnZZOPpYy
/dCuayF1h33EmaddezXdGzF7e1eKLr0T2gEB1mT+PASz5s/jVDEaD817OSXU
IV/iUPSXc4MgZas93pHC9eqrNGnLZcMgl95UqFnbizIj3ztawing95ApM8/K
Bl0peU76Tj38rcNOC3Dz2I8ubeR3go0+nW2q99UmYGyv5PbzOxPWuUNN2vP9
WC12ozs8gYlXt1O8ojrZSNnOT1z048B6172b5q4cnOb0/oy1omG25FvlbT0y
HtYxDx8NY6Pjjet/J/+bQqLj48P8/WO4q2x5jlNDQN1LlunTOwxYHF7cl2VP
RpPH/Et5wQL81JOyvFpei48Z30M/tA5joPa14fuaTgwU2MYL8X3GpPBKXtu2
Ymz972NkkHQHbl80uVdQXQ1Zn5+dWe8LELjAGs0UHYO35snoBG5eJ5fe0Dg5
Q8MefwvZ+dwGFAedsC1VJ2A34ehommw/dAPmWqcfTeGPDf/nvIhhVPWaJxpx
mDhy1u7iBs4g5Eafjm+f8sG2BZ2sASs2kkznY6tMBjC8obFXwp8IFWf+n7TR
QeQ0brZU/8SA2Y1Rmjy9CdYnnprKyJch9dLkmcjdFdBVaZuR5HJ6a21Sx4hg
KR6W8mi5RjDQUTFRVCTLwRW310NuaZNwkl2fes11AvlyZuyEZ1z+FJ8RyfjQ
gOChwuBnz4iYUji65MPqStz7OvT3cH016jjCtj/MBpG0L1tKObIMhPY+W7OL
rfgtyHNWe2ESo3OifClRA0jKbTDYbVDL5YVH+j+3MfAkZHimuLQRF6o8vQkW
HDjUvbPZZd2NtozDr+44TCB0ZF+w+fkC7GA0qe4/w8CU7d8nwtZjWBW2fSbr
GwG3nkR21jS24LIy9eFzDSZCCjnXvL0mEeMqZnDShQkbiB5tyqFij4LtrNQK
Kvicx7VlZRow+e3gkoRdNDS9Plc3X0FE/KVGj31cHr2UufyOaHgOOAfr75we
IqDd95xTcd0UJlTHtOslWeD1XfE7hIcFQ/VTm80yKMiKWz/rd56MgHsXv1C5
fNu4par+ySky2s83WA22xWK9b6FHdAAB8/LOutZSuTCuXsZFywrYcsZjDp4g
YInJ54+X8rogcjNGKy2rAc8dE45P7BhEg3PnBU4vGR/puiLWiSS0qmGN1DoC
eBzsTNJ1mkD0CDE2iGfgoRnjsn7re9Clbl0m//++w5E26xXnKkAJfNf4I7QX
Ero3tKqftkAlcW77tdPdOHFfaXf3zxYkrXxWEb2WApPtjwe3NJCxukGvKJTS
D79f9QJzXF/aFuionDNORs6adRm7R4pxoVwp8eCGbtxZvvTX37hxiLFDdNOi
SqH2yFHoAnEKJ3ZYyb2TK0Ha7VfZt7ivnzF+YSn6eBzn9hfMtE+2YLQzTXns
KBkaDqt5P6cwsSZ++9hBmQkItc/RFE41oiYiLqFp9SCITU80I+7QcLL063ev
d10ouxpHH1Dj4GJdJvXDukK8Sv9+Z9NOIp4ZEvbF7ppA150z8jb9fahYlUug
faNCoED55jZtFoRC70XpHPSEjUKzy0WrDmy9dei/UC6PvrcwHDw/PIS3G4a9
HpcxwaNOtU3+wPU6i+tvM+a7kV09uf2QdQ9UOWpp9H+DSN2xevzF2Ra8GvVa
P59PxVHiF+V5sWG4n2E9KJqkQeEnPWtcOQIX5G+EKZ7rQVU8wXziPwpyaLJ/
6OrjKD+1U4XYnwSPKy6a7rKt+Fh578ESi3IMJaXrddlyPflrMW/zRipiPFJ2
/DpHQIXwclnTjCZ407GXKMPAJ9OkgIPkYVx1thC4nlwI0tt176YOTWGm0Tr7
ujkbRhJXghq5HrdR7uL5c3M0SF49uyRMegzmXcfN7c2JoHhFDdICaYgSfVdH
XJkDO6GaCapuEkaeXSYXOtFwUGXVSFDLJG5kRds1SNNwfE//5p6uAQhKRzd6
5nTCSFO1URJUCMkcsaR1EEDW/X30zO8OGNXqaBHGhqDU6vqgXt8Ozmso10+U
vsJqgYRmzY3pkJ8jTr4yJcHt9KbnKdtIGKpdFlTjxUL5O01BE6VOqKi4aWz9
TYaKVhWH8JIEwrsmaumeKpiu/fHX4uUUQsbeDtb9yYNBkcLquYUpKGz9LRRx
gduXwwlvxAVoYBcmc3gv9MDGKKRD1Skbj22fKYTa9CDkhcviiT3cebrk3K6p
bfFwjakixo31o/D9H7WrV6dQM8vspU8WocWO7HSKzPXU1O4zknH9MBa24XPg
Xk+HKTVCVEYcPptJV8w1J8HR+6iSZcIUHh4xc0i7wsA+B5uS8gIa5l4Jp27f
NAzJjRKkufstqIhK3HuohwqSiVOplQoHZ/tjZ76QezEnV6IrqjeEKI0GDWXf
CbSSVTO1k1twfjbm9JuSCIwvC+sArRcl/BLHylN7kLI3KD35NQNa5Q8465w4
2J1v+6BVgMuRFL97bj8I6IzoPpPmSAPls9Kvj3L90Bn/11q9m4zekc12oqI0
7DfrCKlSnERQ4ZZxOaEedFwojrcO4PLnu6bflty+45uyHeRzYONEiNi7Rw5M
BIjvsaPeJeHhgr+4/4V6bAiZXfv5CAexSaVy77lzHnwW256r1oK/wSxw7gQR
O2SVp41laPgWgQ/lxQR8cg24qn2BjnAZg8RrI83wIEfoJL1kImewPj3mKBF3
a+UZjmcZ+Gd1zDWKn4pGZalqzvkKLG5oa9AfroNpi95+i8MdUPaUX/76Fwvf
CFOFjiODeJD26UhVLgMF/3WzQ5RG0fD+qdR0VxyYYqsF7RZGoCzzNkmfu872
J+pLrbcwsZOhflL0AQNpVKVmpftjWDGeInHRaxhYvFTOz/Wm80fznima9GDr
hVvOR+QnEdEXymAKc73yecelancmdtC0svrCi5Hg3LnrXSQdLfNRj8M8+yFe
Pfzfkt7PEJ1zL/xqMYSZraLaHz2oeN9lqzKxowFCfX4mMaJTKOIc+PDp3hh+
Oao0NCp348qbH0F2mT0wDTryJf1bD+TWBrge6R2G0O6AKyrcvha1atceUe5D
UfhgPCV+BER5iW8hTiRYunF+qZX046n22/DKMyx8aH8tyXk0idv/7Kz4grkc
axPoc57rvyGP/vunfP8F/p4sL9g2T0elX+nNNWY1IE6XmJZtpIPHTuWurw+3
3oIk9Iabp5CScPevwuQkNw+f5s99K0XON8XaDXMjGHnYL641GY73l2Ms0y06
4fAqYvcXYTpiK27a2ARVYK3TdUnyUSq+fvJzzK+h484l0U7/b2xsct/9iCE2
BZ4PJN7K9nZ8+f1d4PDnDpR+WNU7vZKMeHwibi1lILaftp3XlcsPH+ZEDNxO
QWOvz8l359ko743dc86RgQTfrS697hQ8MJeck5mmw0Rqx7BTfwUWPveu25na
jMFf0qoLeQzcTtjS+vp0EQTS7/GX/nqL6/ZE65K7NKw8GKRd8ZO7X6Eegygz
OkZKlhWIHWzCIe1jzVeOT2BoU2aec0kVDl836KeEcrDj+JDD+KM2rKlYdcbl
ALe+NuYymV+4fDnZblKrO4n2mStLvP0n4OzubH/iGbfvQkKe9T8fwCHbQD6F
Q5N4VzZUzFCjoj/lCGNErQJ2FZ8MVldQUbfcdenyE0zoPVxRLfaXiF+HzZ22
ybMQ0vBSZu0yBuYu9IrLHpnC6MIPkpENEceOTmpWtFbhwfOAX/3m1zF/hrf+
2SQbLdKkW+8yenEuaLeOmC0B/tXNKU9tGChkFXIijTnoaequT6krxsHOddPh
OyjojZH5GpTKRoJox57kNR2QFlGN/Wg2inqjZHdDLp9UnT/1N/4WCas/mEVk
tBPwva4s/NojGiQSBvRMYog4F56e9zqFAePXhMAYjwnk7i8+c5bViP+s3bqU
nk1AbiDS04kdjIsay9y8D3M58eyXaX4pCiS2LHnpED6Ob8eSvOaOBMGKLFIg
ZMZE7+u3D+0e90CNt9M95SoHXQte161f1SD5p3HdHW6/Yf+BQC/JFnyztJHb
cqsHz5w22a0jNOIcx3ZbxO8JCB4vkHh7ngbVcZEV9d4TWO+1cOnK8gn80T90
IiGzApIec49UxjiYb/A1CNtWiEbWiaTOqzSMel1e+sZoHDbqx+MHuXN+acoN
VnDLCITllEQtqicRFrDpZaXNBC6+QJvp3ko8OZK1O+gdG40jC8eOak5CI3lN
1xfu/EyLOPprvTgdBofHs6l7OVhlEamSLkVCYG79slMCDKxt+hV8aBkZxhLb
5Xv4KLDli0kwPNCPcfEHz/vlGyDtfvhFai4dMi8DGnT5X0N68ZyL7ptJ+MtN
9tS0pEPgj76wWy/Xl+e/GbwLY+GkmEib4w4OlmbK6Xuqk0D2Ze7UUE7E/DHX
hE9WY5Aq81hyNqkVzvKL5VWtLAjT7ma2bmbBnRiwoTyUALeV1EdtuwhYmPAt
lBOoB8H1SOX9+CLs+5R+d+AyETfzThhulGXjqv+eGqdHvdD22rXZQYSAyVfP
TwiYM6GutvjgsRsJFMEZIfGOKmwV5MTUnqOg7pKl5q8xBtbtTeDdy6JD6Ilz
bFlxATYLJ0Tqc/2h9tpdziV9rlcpfVCrKWfAhXDqTu5nAryRqBG/fApBz67u
W7NrDP6apQ6Z5ybA9/VM2rceEp6e3+fTT2NA3yLu8ckXbOx7f2HcI7gCPr6E
J52KQ5AXFm9X6qFh4xPWGrr+EMKbtuT8VWjA27lUkktxDmoEy8/dC+2E8s77
FfaNBDgiUF03gIxIt4gh5VgWit2+CX93JsO6S8rnEX0C54Qndy+PpkGGvVXh
RzMdofeP30vmelj03cTwtZ+p8Bo3+Kc/zoSObIHTszM9WKERu09gksubJQMs
KLXhp6GsrJpkJz6dfrn8tMkkAmZM/a9Pl2NtTOw/zxVdyP49akp6W4liqV0f
W9x7MJ6WX7PEpA9PVw47niQzcFRUZWrOjA2lnUubR+Pacff9UMmVhRwk1TVb
F6txvTDysK3th15cXWuya01AD5JTpS7n9Yzim7jRtms7qXhWU/w8cScJu7V5
JnbPjAFW2uVZPykw/pwUfDSQw73u915YGFEwahBCsNGpxS7lD95pYlQ8dtod
ocFPA8/TminfwEFkemmek5ofxkfD3b3PxLk8ple5izY7CiX3c19lajowWL5l
RJ5Yhi89l5s5kc2498YrXkGGjKgb8wwFMS4Pb6+iMbu4vOptz/q6tgp2eU9b
FOfbMU81r7TYxwHP+ggjQgARrYadAb3vKdj2vr2e2kbED13dZ3clhqDJKZ/R
CMvCK8ab1s2JHAzNK6h/OkzCs0O7yy4UTcKe4ajAqmSi9MVk4Ldd3bD0nomy
1aLj72L0G0UuR6kap/2q8RtFxf1KhzmfSUzUKS5hePXh4o+tBgee5OEA8bP2
k5V9COKhP30SQwD/WbGxNmUaPvop/XB6ScPAy/X3Pt8ZA7FM1idSfQC0eDbd
czsB8bEtqlJGU7ij8Itqn8zC5uBSjQduVJSKyG36eJkNU75zEyWvBuClZCmc
EsZAWOI22zN9VNTKfRv9vXcAaTpz6oKvJyB1iEks7WHDoeWebt7jIXj68p8N
GSXCzM9okLS/G09WrbYxW0HAI3uXLGI+BXoRXw89vtUEYVlRsaS9LXB7vVLa
QaaGC1WqdSHGNViXUEWKHh+B/lzeBubSUThZ7hFrbqfg15u/djILNCimOwoZ
6rDxbCBwzGoPBUs0tRTNFGiIYK/4IkLJxa3Ys+Q0CgfJGXUDgiOdeCE+vj7r
NROuadvffzjRj5fB5jMZjWQkSd4u/GMxAbvu7wd/fGFBwH4s1fkmGzqf3KVS
KjMw+94rVMajF0S34nTV88OQ+dc+u+V6J35co3U+Nmag4dBfzZUfyrBJY5f8
/PFObHEbOXV3uhSNG8Uqz1cPItSQorFdhYKPJaQX2b0kmP8pLlTW78WTeqW8
yoOjkHI6f6F5joPwF3Hm5zPpyOfVMKCd6kCS+3PWDYdRVMrO3G5YOonVjrUH
E+XY+JjiabrlORMt26/zCXLoaNDWjztnkY+tKYkz/7b7InJ/QkqWDBsN8suv
0Pmm8FGzjltGkyga/6kkW0yC2AGtzHU23Nz8uvn13WwWKA7e8u81JnDKt2Tn
IcUe2KZepXDqifiW/iGjipuXRgoxjHvCHIiI/F7F4uY/K2e1wq3XLQgxPh4n
5p+NA7kGwXErOHDwNi0OfcUEMZVubbPIxrhvw2j6QzJmVFJPFYl0wHxV0BP2
XTakl+5yEh7KheTla8NJvjR4HtrdrGddi9z7X5/sX8rN8f/+vTrsVwnD/aau
X7058E4VXZkwOoSf24IStT73YZ80vy1lbhSXC6Vz/5qkY4z8jKqxbwqHpNK/
LhuIhRphffsLdRa8WoMPBgoS8apsbKFuJ5fP34yfVPzXjQdqkXpJ4lQkCEl1
mCaN4uzS0BvyGxjI89g9/JvInbc+GYTDqybhPH/Yz82cgUFHaB+VJeOPmThp
vcAYTLz1u3giJyBKnnGJf1WAb3WUd7aew2gpNJjp+UVAavnLu/YaBOSL68Rl
X/gCLbtNsg4DntDzEXjR964OLG2nT8PRsRC7dTfU+lIiLiXmPEi904LZwxff
dsdVwv50TCpDisuda6pFNe0JCB6QravvG8TulwmHYmzpaNT+eDx+ahj+l3wN
hyqS8Yv48PHhZiKyAv77dHR6EG0Rn2reEKg44zBkq83XiPX3NA/8zmRjUEZw
PHiWhbbgirfPDuYg8l/5peH7JUjwr7OrYxEgW+XS6/ZnEO1n2j3kJEg4wG7z
iepywPSfi8nW7wiYXqQpbbFqRcX6hsaN/QQcLCxijaWzoZY0FOb0twuz9+V2
xLpweSS0vOxk7CC0DzIqDR+PoOOGJa03mIk1rQunbZZ2wj3ljWbPCBuZ4q4P
d+kMIm9Z66BSUC/2bPjW/zqA209HK7qXT7djWdYanw2ejXi4w+zabtUBmC9h
zP0OZYG0aLm0rasOblZO2dffFmK1P7W6S5mBUwk7xQ6FE2Cb1vA3OJabhw6z
cwfuF8DwvzV7Rjb0YnMb3efG0y7o2wkkBV0rwJh5hJ68RwUq3vyY1pWMwUmi
3iO3w42ordpg2rxAwcBD+yx5MgVs3X/vHv2sRL2Eicb2Zhb0ZN6s/bVuEjxE
G9oqjy5cNRycb8ybwpsAuR+kmWxsWa59+obOGJibbgavFCiEoe2FN1f2DWMo
iRz6/HMV8sXEj/MMdeFuhNb7PWwOXifrCVg4kEDTMTh/TWIC02ZQuNNIwYEm
uXWv5FiId5hIKPdoR3pxooJlXC/0W7Wm5xdJ0Mkt9q/9S4NL4I1bbK1mLH8r
0qO9pAoeS9dHqfCxYNFtMLR6tAhiQR0fp97m4Mfx4oXXQ01YaNi7MPqmHsxG
qRsyQ1NwD+R1VjjQiVTPrc/XEyqRxmD1eVRRud6atCpsngrZtz0OV3kZmHHp
3H+jnevFDc3XlqQOgWfHrYdWyyYh3bluWHhDJ6RtxOuXPOmHlW+Cv3TAJGqv
HjfvYkxBx7PY9Q0pFPF1fkJ+rh9w9dtHW5eDVTjyTep7ZMwH1NIOTF0Yn0LO
tKqswC0mTOoU/pSotWH1/WMztp0sxPZdyf/Nfb+fHz3WWuVScPNnybKH/ik4
fzHQNuBLOerkqmY7xkbRdEjzyYUDXJ5PjDp7o6UXrs0S0y6/B9HgFiAixCaj
r+7G4enbRFzkTP7KfMNCWdF6HvPvFLgq/97LX9oH5dNPH+QX1oEcLph9ZWUD
fp3riXspxITG29O7hi73wnQ2TcNauBqCH9+tSz+fiPsJOr2P1zBgSmCohHDn
ZH3494mtWR0wnHvd5U+bgqXqIuH//++SK+L3KILrPey0n715cST83Ndj3AMa
1L2bzlZwczfmh/GiZUIPtL/XRdWGJiCkSdTocO4QONoeBSIJAxB+8n5m63Uq
ooySd/UtjIPEOGhFDBpHyaT8cLIVFWGth7KNxPogtJXu/PtjD77JffHJetmN
6qBTGhu5PrjmTv26DjFvFJor5r7dU4ddLUITXz504BRj6ZV4bQ7yXVdvOiUx
jqX+Rl9O72EhcpiqFcv1BuZHBs8+30wkqvFGiHH9d29pfsOejb0YUI8+6aZA
xf0bLy8knO5EhlOWWhmlH5zRg1Jup7ogG61qWBzZCZ1gPuM2Eybayw7E5wVS
kFJn4Ni9dQofLrr+ZPBPQT7jaX9QRz2WZGhGyizvxSnr5HupeaMwCN5/TfEZ
l5vV5J8Jqfcj0dFQ5vOlHjgWSK0mRXZB7dWNvwNVzeBcEi0ryRnA/ON3C8nx
dFh8co45snOAy0cKn6z9uF48xS4NqezBsY3X/eyeVkJj469aG/skHFmyP2S/
XC4mRNU3Ob1OxWOxyobSOzSs5a8k1lvSYObATlsaPoXtBVWesW9qYeWlvPbw
XAEcDz64N7OHg4JfL9h9196Cn8/4toA9B0mPaH2PL9Bg6Pe58KM5AWva+gT9
zxJxiFa+jbePjBR3r9BzJiM4VmqRU7C/BWt6HwUk1/ZAepKqHvi9FZd0lTrc
PckgW4yai/6io8V5tYL9APf39arYA7IsrJpbN9xkMIZ2phtH0H4KDTfWJ0pM
jeGewOtS4lUGXrNa45SKqNgf1TZM4I+BX9UnhaejFEyYWgwX/aWA/F7/+YZB
Mtb1mE1ExqWjJWX7PcvjFBBNltvnvaLiwCarlDh3Bn7Jx1JTnhIRTsk4HltQ
jnXXb8u/q81HS+3+8h9pQ2iaXO28MN4Dxe8ysf+CpzCWI/lrxUEG/NbfXzHf
OQVB5UulxOkxbn+KzBxityHGzlh47wY2ePRadBTNeqGmlMWmC1PhYuCULHSM
hmADSYsUej6+qcv8oc+Q8UzrByFtbgJX94as1j2Ri4+bGwj73AahsTyi/XHT
bWgFpR+5tp4M7SJDxTNaQ7hbZspD4/qBQXeZXvidKtyeSKjw+p2Mob/RJslG
XWgyEilVf0AGU6JrOlV3ElcX/m4s2TmJwP/uiqUojYP54WfN5gM0XP1xiZTj
yIJbqM6KrcNtyEGX0upr7TDcFVfK+o8OUoeLdnQtCdvLNpwbTyeCFfCi0m3T
ONbUE+0jLk/ie5SFTl4HG+lPdzjvzmdC6tloyR2jIYTY/uaZO9QLCv/r+qk8
Lg8N/bv6cUc30nrqgkL+O4NLvxR4Vt2bwMrXcrPVa+j4vNh7znyk/f/fX4gu
4ua3ZleeB+33R+yeui1fkVSAek+XXPN6AobMllx7pdoKQwmjv86POiGuWOUT
4luLdi3DcfmN3H0fDRT76MRBXtYSr0idUZCKHhFr33PznOT5X87VSSTwRJh/
rR7HYYnPxurcc/m2VvajRAsZr66dT3iWToeeEP3p0dZ8cIr0P9sfH8SyNQF9
itIUyLn0O2etJuI7/fP2Ec98yF7/Y7RZg4Y53zuEa3/oYLGqtdTQharvGs21
0f3w+zouqqc1iS5RuRFDJRp2OjIYh7h9kupno/ZneRUabt+TleIfhZiHyhcq
93zfxPvPXXg9Bs97qvOeqIHfqFpz2TgHx1dfN7vzxhkB3yquLExM4pW5uzgf
l6eDIjb9WLm3E65mavfXfxnA3wDbEte9LNT+F6t90ZmEznt2SsazDOwOWW49
qTeJrzs2B4YcHkCb6zqXxz7jyDjnXmLD+xX7l8Z4eOgzofvPXdNLpAi7NrxL
7ftYjgsRG0Lb+Qfx4eeSj2PuFXA093WhGPfCPCbypTm37/XDBg5e5mHjoutZ
lpEZEdNDf7WOXmHAVe/kcVcrOr4WxTlEc+t/R9bHVbtUiVA4y5myIJUgO1Ft
ktBYAxfmyjkpLwrKl6266WFUjaj7xj66ko1QbN86v/4rCfFP4ttrXk3h8Sib
4bh2GC+PHhkW2kzHv8CBbyLdheA47JkLb6PA09r0e74eEdEKK9X75CfxpTXx
prcQl5sNj5tbcefl/rak0MXjQ2iZfjdd92MAltvFCMphHPxcH0mMj+hDDdP9
8o5mBn5+aNP8IEPE2yj+81V9NXiUfvqvzfkhqDyqCVpQ68WGGxuLP3M5pqFy
Mnq8ShNH6at8PiRM4gPVucRBuh7xF6bpPBat+GweUrvbbwif7e4VDkizQW+i
zH3eS4OO3MzX7zZD2LTPwsA+tAfXfzk9ff62A2GRh/7Lq28G39SNbbFcLs98
L/bw2ss+cHpDgt5wPcLg35eSuy1T2EdQv/6M2z/TOt8Ll1/qx/2jDZ8OZZHh
tXK/xWFeNhS7mh/KP6XBiEmQuUhsBPHrc2+llU1g956X0r1Bhsohl32fq3tx
b048+UFPIyaWSu8ZLBnFq30/T7QfGcZdndllPmdKYSju6iOwawod0mvJknUE
XO4MSa+xpaClSOBFvykVjrTQ2oimURzcV3MsYb4D33qXnsrkjMD5u1qiVOBz
iO9cp9ErXIbLAe82e/F0I/P2ccbN1AlkWPLFOWdSMeXR1CT5g3ud/nlOC3RQ
oHxRPFAxhQrvQI1tZ1TZ6NV/61nmSgT/hsbon2FjGF9TUyYr/QWcu7/Fnp8m
w0nqvTqW9YEce8Q08Jo/flIPdT6OoYD/5LyZld847i10r4zqJeIp5VHczKlx
zDT79QQNP0Y+60HqhbtTyFLVd7//ohBeZreL36e04FNK7JPxciIY64ZNNitN
wcRKT0T9NAdOb5a/t05hYVrrYpDLKhY407XebrW5SHFgzLvbt4J8RD7lqW07
1oZvkjiY3IixqperXdZVIjSYVnyVSEEhT9zQxCsaLq7ysL50oJhbNwkuI1w/
KpTYA+/CXijNHo833fj/52THuYwvG8advJi3NcqxuPOqTlRJaAqdQmsTin50
YLH5zE6H90M4WtDgckqiHRovyy4NSlHxoGW34ZkfcbAoEZS9+IqBE3IZQRb7
uPNO8eHZ+DoqEknb9TwVymD3JM2X9IiNjs+LO/8dHQAnbGHr0t4xvF+2bsy+
iYGEsGtewStoqHphb/DSvh3kwlXm8r5TUDzfIGs1UgxZ9e45RdoEaBb5UXoT
VIhZzLh8NRuF69ZLpbfU+yBJ4pslvOTWvY7/mchsCqI+5arsTaQg3o/nYgNf
PnzO9Mf/k6Rj4/YcW/+hYVyXme28HMRBt36bjdbKeGwN7/RL8GLjlhDfndXG
HAgSfy/ah3Zin3795bNpLPg+2HOc7+V58OXz94TtIGNZvLutmtUUahpjFxTX
Z+CCuBCn8ls7YpVOe0xx/ViJdVtMop+DQlXVJ6YJbPw+zX4hvIoM2z3ft+y0
m8DGr9Nd2VuJWFjLv35jABkslWG/T9f60TBt0x1awob3Oq041xfcc1lGXtnA
IOCbblh0xwciCocD1xu1ESAvqN+1dpoB1VPMC/p7xlGfXrNKWYaMk73+OZpu
3Dm0qumstQIZhLGMNiM2EcuCoyVtRMkw3PBy7PNpNkLuGdB31U1B97PA6bui
BG7dle68vaEP8/6EtSp/SbjzYnRYjjOFQPvuLmkb7jq/clbtWJzEG1P27N83
bIS+7JcY8evE27MdebODLAifFoguDhlAg7XPJtteDnxPmjdSvYYw+HpI5/LI
IEJIjJ0BadzzX/lDZLfYGGJjrr/tMyaiZ8OD+35nWVDvfn/npXEbanLtzoz7
siAQGKXluI0Nmsebk05NfaiK8Vmy6DOBR8EUp4P7Ofh6X99YMLQSWdHV55sv
MBCx5ex4AKcLPCuWZqx9OIAlGlPfjjC53GlBELlB6UZXd7FZ5GMiCFd2VKw3
Hcbr24FzGstSIV+IT4+4Xrsve2z795oaGEWsf3QidRg/dw4vreBep/jg3Sqv
lDlwDg4vsBLphXR16N7ANjZeOaZVG44XQXhHof8B+3TcTNzM68jtZ62f7mfG
jsdhn+DNyZHKaozu+iHR5EDFeaqmQ1zHCAbGJP38z2ah+/FiVqlNEHYE7fzy
V4YBt+etm3ZWVcPc+dB/17h5MqwvabeK218iV7HHUIGIwADNu///e3Kf90nn
xKMdkHf0+2NlPQHSmqchmho1eFbBX3fbZwQ6D8Ld0k/SseNI5vdPsxycbs4d
5gmox7a8rEPb58q4P3mPbnjGwEiupmvhEBPLeermpndWQFRt13daXyQG4gat
HPfT8SrHUlubPomTH58MWKsPw+7VjNh1GxL+KIVzeHbRkNnWb7bUchILZWI5
as9JkL3EF5DDGIJofGsKWzQX2pf1Ryyi4yBU/rPFJyMe7jH1/VQeOjSmd8se
16LDWtGZsLV5EA97M6XNTjLx4oX/1BXXfsw8ivrw/hsHIrFSvydHBxFHqiJc
vEUFJ0UrL32uHRulb1hM11YieZ2xx8FVBMRcDbp62YKEwLi50I6yFhAPu7Mk
7/ZA9vb0kcWtNNBOnhhMFa9GwTvf1SsaJzDzS2mJyBISXgaq8R+yiIT7OV3d
X0dI+Jyz8Uj/iVbEe3+81nd8HBGrzy38dufgzbxzvRiNAKOw59Mf4oaw9sz7
1RtvUEDlk116I4oEmc21mXnvJuD4MQsE42RsHeB55OlCgU+t9u6W7Do4H+Zr
N9vFxjZLRtj3sClYrbyxUViQiGJJ+P6PgvMOhPr/43i21jdkpVJUKiOppDSe
QimEFC1EGUVGVCQplJKKokiyQmVkr0T2Hmdvzjk33FIiEf3u99fn38+93q/X
6/l43OfuszdyHMklo71zH3ogvNf5hq8DCaXV71JmNRoR8+nkMU0XFmxVPHtP
aDTB9N3YBdcYFu7+ubdpuoYMtRV7rI5/YKLvVp/aQAMZn3dcfLrfgIIPvV9r
tgZW4e308BVDeRb0SJtOX5H8Dt7aPZu6frRhTd3m/LabI7Aff5zTwPW9y5mH
b6mGDsPB/t7eXSHNIAeLXibrcPlToHVP/bVKlEi+Z3yTGsXQLwdWztsBCE2d
8Su81w61i/THng+H8Wkk8++CZDXsq449umjHQJzWuszJwBzM83+8x9M5ipfX
/1vK0mBDYvsVRWYNC2rrl4+3nR5A/az7hqKd43BjXfuyqb8dX+gbHjSwm0HM
TOcpFWnDTr7w4uv/0VBCP5Ijsb0GE2+c/6vzZ8P2ZtWWmWYa5jfGVf63agCH
5dWyVbQpOHWo5cG8LBUPaNmVok/ZOBezb7vihTYI7DCRqfxchapHe8R1Etvx
10U4QN1gHOHxH036HOmI6HDQyyJzMPs3eemzvgHQKPzOZ/tJsHPnNbx0sQXX
3N6M6zSlwMHMrb9vCxGHbBboReVVIHx4niPLnQcjt80O2eDydx7hptGZNozc
/3Rn1Scm4uL+/M46O4GR6dNz1/NI2PRk+mypUSeGL26MbSCU4ujG08pmcX2I
75A/Dg8mygOVU68Ij2EyuEpLVqsafXzqgubPyrCh7oVfy3EqSh5v1n54vQNL
cretbOcnovpwo42XWxee/FLQXG9LxZXqw+t86hmQbt4U563I4vL6No788iL4
PW+eP1cwjt8j0QG6ej2ov5m4ZcUcFX+szqYcLSZi9/rP4cmeLMx/3Hmgt7EA
9F/zqX9PMXC+1DI77Ao3v41S9ng87ALbxGlgbTsNLnSpc2OeVLhYXN3XrtAB
+4+2ib/eDyJ323wZUaEW7jWU2oGtJG5OvnM0Kq9GWPAHgpIgFUaByqtur2bi
Wdhk10npLAyfLL8mVTiB5RE+b/5L4ICp6Vbs4+sPe4lrjgdJlZAwGFye84YK
8dVW6k5dHZg02ZB1NpkM+XgGXWChD66ZqwPznBvxpXf5CllKL34cKPo8mDaK
jwN/jgdyrxUqWzP6PIlQN1lRbL4yFXyMky1l/TRo/hydTNjD3Y+LjQYVLxth
csN3zYANd69uXBUjLDqG0LMzp16sIeDz5vKHrUc+omS8/3jGRSaeRJFevFqg
4ILdr8Lp5FpkiyppSk42IMvIKjuuiInovl/vInMoSLh/4WbDlhhk/LQQSNIf
xtajGVKMFhIsjqaZCzlm4jpfulXqzzF4yZzWbggjQPtK0jE313oUG647YmtN
xLbDb9O3qWXD+xKv+/J2KtSNSREyaRUotGlx//CICkmnhBP8mwjgXFo1EsUi
4p689zOlE6N4zLdg6tReDv8VW89xGNo4/i6wef7nMMoOxur4sMjINSwKFmH3
w3ky8vkC16ddxW5kTnq34T+21suB3TSUNlE/u1ZS4LpuZn/rdjqIq552bYmk
492HY5TysGqs1hX7viOfjJW2m51DBquQ6G+dq2U0CkkTmoP4Ug6sh3p+bz9b
jp9BGcozjwugtMlKW92HjhPfOOUrrSZwRMlY0ojb7znFVXE+IxPwCnxfs2d9
G97uZjhWbW+H72fCdekCLsdnsRPL+ycQeSvYZ50EHSstu3/YbSXD7kvwZAB5
Ao47Cyf8ZyNgzTTdnHiWiEWX19ZPpxiICgyROfWwDMbhvrc6zrbgwWCdke93
CqRr+KhvX1Cw7cCmVY1c3nxknSvyZCYbbg7x12aqqsFze+39R9y6ehlqrN6r
2I32qAcH2505uOIsniky0YPCIqUSz60svBO5uTily4avD8fFfH8FUt8NJLnu
LgZjQ/7j12JkDBUvr3Ogj+PShSjWVocOFM9fmkxI6MRIxchrVQYHXisf9Izx
c+eqh10aS23DPdGh0+l/6OCNNU3ZXvIdbUqDoa1jFDy+5iOXOZQE8sf4bV5t
RXi59nm0ZHs/ZvYpbvk01ownmjxLlv1jY+NAquOPOhbqpJRaH42Ng5f25V/L
FSbyYh9UanC51jUxXozeMQoRq3+i/32jwb5Hk2dAlo03ZVVbSbwMTNk0HZjp
H8TL2c3bSUkVWK1h5U5xJMA+7PdOI+NRuDf1vkl2K4MkK6lt058KbFpnVSlr
04+bxks+/M0nADrZH2Z1O5HCJI95dkZCi9RO+G7I9aeH8YeezzTiWfbq3erx
jXj/ttct0nIMAp9EQlI/DsEhKvqQ3VwrBDbtqio43I4uv/R4MW8WeK731Qq6
kVC/slmqsp8AcWfPVncDKiRCCg+LzVbgXXhMjdIpMt4/06lb7OzHHi/5K5zi
NqyOH7cVeGYL+Z/DMjc0ekHbpbhbbS0T05uuq+4T4vKU47yIjjkDS5zKlLYz
2NixPGU0+/sYrKg8X0/FTmBGe/BUbMgE7osO5LUf5ObjmYDNGx72oXjuoDN/
wRjsk/57uLauCSV77MLCGuhoXOm4vG9lJdza9SRPqXZhqXGaL82V68Pyqjt2
Ozbjxd+pfHFzJrb4pBWrG45h4b+40lJqJeT3sPhtlo7hwfXEJMWeIUg+2Cvu
M9gJL68Vn1+8roQOc2YoPr8R5/g+bbAlkLB3cMmf71x+eOQQsuuIbAfk47wj
FvkJ2D67cChLhINLsT5PDsp04+1o9wvef0MwrW2dlLDlYL3Rt9R4IxKmz/D0
rDGnoml97Fu6eitO66fcWmpfgzOvK9vMJQfg3fM1guTTB3as6NZACTZ664df
Th9mY10LK0tSfRSRnJ2hB9zpUI2+5vlmLR3OSmNrtjt1Y6h0cHaZYTbWXlJa
MS80DFFfheZde8mIdGw1y9xQDuHtVF9N7t5Z8iNl1dqMdrwPL3HYbNSF10/z
668fZeJi9C2e61eJIGyL0HHVZ8P/vAcz9CMDOpWUXvNRJg4bFZk1rGHD2fhs
tllbI1a9Wh4o2T+GjJ0+dzv1qAgP6GHGvCBC9mrhRrI61yd+/rEKrRpHt/17
+rAwHXfy6JpPznNQIcIREbsViZ9modQ/3DxGwtmi8OQBvF/fMiAowsKfuhvL
Urm+XZbRsefFOAFTTNcX3yQ7sEssb1+HygB+xO0TOEAg4NXKYEpuIwv1Pbzz
pOB+lDLJUfd2sGBivMzX4kAn7saVEDbIZSH+U1RilC0RD2KUjuaIc2AX4x1W
o1+EJbrSNJnwQUx5ym6vWUdHr/qnzG0rhmDR43yFTuHygqqYxL1HNDxfJ+oH
6hVQGzo1pc8Pw4RipR15iQB2n59KwCADC+giRWuR0KMXfeTROhJ2ppRIyrlx
PZhXevW3a2MQDtPUuOfYhtk5wdcukhVwydHeJiQyCJ9fz5SFYsYRO7RW9qQr
A//0PLZ7WTTDO3T0U4rpdzhr3do1dofbp9d4p2wluvHP/vLTrocEmNa9Mwvd
EInsO4l/zL9XYUXJZRMmaxRh0kPXzb/REf5zmvC4mQqZoXTTrDN94KSOigj0
j4ILljHhG7rQu/jskueBEa6Hdt3taibip9OKHVffcnDCqXvlUQ8aDnUJv41S
oeOVWMnVNbYsuMi7vtrO9frgtPCrn1lcv/7dsnSHQTfMvcomj0u3olX39M3B
mwxI5rl+k1TpQ98Wle+CrCZ8Hvq6VNWQDMKq9rntjkTsiJax9TcpR2vanVxx
ej3u+H54k71vGNWmrimHfNiYXHf6XDh3bvHDpND7/BB8HnWvEgjNQerJtbtv
6PZB1sZ5wP2fMXb/sUnjWcWByLctCkqJo6i9xdsTJ9qPQ2V+BximLegPsT0Z
/agW9z9fLRHVIuO2tFhf8mYKHlYa2It+HMONTzf+IxRPoF3yBu+/qV587Ci1
bciYAOWD8UZp7SbMWyVbvXgwhrL0e54EFRq+PO7r0AruhNsqRy+lsTy8oK66
8mpFP4SGzp5jy7djM2nOt/pVD27njGm/20zDtruXuoLPs2HiWbWt/14DDjVw
tihu5UC2V9n+3Toapv0Wtj3V56DKZrmtwTwZ50Ncvp6XJeG/q4YRxMfc3LRM
lNh0jY544bOdexwiQL5tMZr9h4GniUvUWolMPM/bJXQ6nY1BZcctmkfIqNvd
X/84JhGhxcxtJwjj2JIufSrofDfW3WemX+Nynf1Ipthxfio+3BkpGls9hsbL
/J53Fdh4G1rm95NnDB8H7ZMbbnVDpWb+9nHOBD5QE+M5TRwEjctyflf1Ysfx
xxdub+2Fl5tn4NXX+ejIY4pnGIaCR/Rh2E4HKkrFu9xtpungCfS/06RPQrns
imdL7Zrw7dwocyaVgv73Xi+/zLPgOep3fOHaOI4lxhUM9xDwz6roAMUsBzFz
/eI1WUxQtrzekMvtw9B5nRxFsCCSo2hvaFkP4vVPwrN5NXhyzqkxbnkfqiNx
MEOaA6V1DRHWZmMgp818iXSfgBSliP34zSjks6Kivhtw8C5p4sGrxka8E7Xn
Ky4ZhOhkV3He4yF4GEzJXahno2mn85qrUiMQ+TX0n881MoTdr9r+d4eJSp3J
UqlMKlLQtaFkhIa95nb3mp0p0NGOctU92AStMdSYPBlGw2qrc0tuURB58elV
Ie7cpaQc/eHR1QyRmYGMBX4SBB06DqevJ8Jay9o+6D8yHErfvXnGra+BZbSH
EZOEAf2lHw3rmPAJu1Yw+Y6O2MxK46XZ7diextP3Im4MN+NbBK92jcNCwtlJ
wbsbesSZ+u2vJ5Bv/V/Bnh4y9m22prUq1CPmTa9CRAcFcHlht3YdG1PrZGfX
cbmo7tWjXFZHPyRkCBaO7kHIGPp4YtlKKj6a/91Orx5AVB7Zb+YXBUfCPvAt
/dgAYUpa1AXVEeiqy4/PDDFgrHl0xRbLRrglPunfx/XpmNyv+Rs/kfEzY/mY
yVgb3IVE9v1Z34lpkQ2bjv+j4X1h1vp9Md0gKD2MXHNqHEcv738dvp+M5yva
+v//+w+hv6O6P4uIuFXjbrnvzgu4ZGvvLR8ZwGdOSM17NgV1z0+PdL8nYc+N
En28+Qq7uba1+0pCoZWxbn3nEwrWZKa+bgploMP//JkO13F45E7do8h1gBju
ULipdASK3imhh3/2IOSkhuvgSzpULHVHjJvzsEQhladPhwWvJ1EvF02oeHMr
a2F3HBGsx8RL6Sk0qJzZ6a0jVg7TcwEC1Xy9qDmhYidjzODWNVrxSlU5ql5s
+nHRnwL5zJFDk3oMpPkWBKh3TcCt6ZHqPj8K1sWGKZaGcZCrK12yi+uZgYRL
Uc7+VLw/+NHFaH4cBSMsmU6JdviRy16+3dWPCOddO9vDM1FXdeFSfmcvnLbo
qPUq0VFkmiPcy5sAvSUx6Xd5uByaHuRw2aYD1/9FqP6jMnD1/OiQZUwHnj9d
3xdEpKLdiNzBJzgK64nlp1w+UBG8RPW6YTMLtVqTHq4vmThj6i3Wvb0PZUWP
FreIJuB4gLf7qGIu0uWe8cVWpuKrRUFf9moK+OsMzHS6PmHVjspW7QE6FMey
UiM9OvFq3UYRJ9urSGoa2urozz1fz+qVzIA+VOklbbA1IqCo5PKBpV/GsP9j
1MxLcw6OrsxY8VKnB6Uf+PbfTOZguvnAqsy5Drgeltj35mYx6DHOt99uT0eV
beT9z1Kt2B5ZtPvMbxoGvFmM42+452Y3krZHogydmYye6avdWBiaPdPO3T8f
Ktcpbz7ThdSQJy2r/n1EjLL3b7/JdhwVqzbJN+J6nb5H+d397chwep1b+KoF
XzeTk24e5mDbz9zxU3spSOsdKDwdRcT6WG2FQtIEeh+IvtGWosLnw0vTo9q5
8FA7UlGuM4qZnd0Y8Rvm5uZKyxY3Km6dzE2YfEqD/up7M5YpA5C+JyyaNtiP
tsfGc7VmIzDMm3OJ5p57ic1hxTMmmTjVEPlVtL0dc+m1uol95TA65qu7W43L
qY77XWcvUVHgFuJ3KbEVql03JbYtTmDpnqIpHxITik//rbsVOIgAk7jW6zJ+
uJUZ6prz/f/vhRHdl5bZgGvMD12UTyy8esLZXRNYjZulf+0q4ytQq173Iiik
DIxb1Qr6Db1IqRdhlW+kQCiJNKvr2o8/9+f9xtR6cEpts/RMCBsHJNfU99i2
4d2LE/dLn7FgLSGYmLKsF2vsBl8xHnG5fIuW0JUTHKz7IOViJknH5aqHK+U7
aWicCH7RFFGF2hODCgbWVLCaE86pSLNxPrRxTdIP7pyob3pdSKLgUd17j9G1
VJQwQo+3VmbDy6h2uffRcaifuP+9bT8dNpR4iurXUQywXq1amsmC4BGJTxFy
o7i/bv+585/7ULDu5R/ntwycfScXZu9FhAK/VXSEfA2Giya3OgcN4u1Lfgle
KgnfVvSu/sQg4fxt8dcmAXR0/17L01g6ikSnqpWx78cQd60sybSLDubhmR+E
8dc4Nvfja4ZaH4bkaJTTh5jIebf+5JYSBrwDRQq2zFTgUa3Z8Q35XD+0295c
/6gKB3yX26ba0nEy+U+l7CSX93y7n5z0YeK3+6dn2g5jsAn1OpOQy4DcK2qR
pzkbckSPoiPGI9Aylwrr5HLX6ol0f0+vbkiJEtrbmmmQ2LXmWeKOZESLGcye
eFcJI5pvepgJ1+ujig/5cTkgYq9ByOHjI+A7b+S2+8QovviWCh25y0YNTSnf
9B0b2j9sTx24UAgFDfugkeXj6JES6hqazMO2Wofj9UN0HEtP1zFJ6Ud0sYZy
f+cI7tcrphO5OcJL62ryaOzE6XNL3vb3EtHj6BGkGMBE6af9/NEnBlBeKXj+
oWwvlB/aV71b/QEXTN36znZVIGVuh+Ar3RzUm+ScdzsyBrmuhx7GLRxMGp/w
CuBeRdjPFRZUO7Ei//dazswYuvePKO1UJKKfNb0qbtkQcidFpO7u78Gx5ka7
6Ivc/NKwC2g71I/a7+G+bnfoKFVsjdcpaYOsoO36jnsMLK8eiC2r52Cq8gdB
kOtTsTtNvdUecX1J7M/eNdKjcOvLX9k0OoSj7GWlWVL9OGKh7nWFOIqfZd3b
LTZVYUJY8fW5+9z5rDZtE0gnoPvPsEsCZxgelyoy7WtH8dFq45ci0gD2bykj
Lq5qwwuphFD9+9W4+rkh3JPAgu/0zlTlWhYy1tpdzeCdQNDKOGmJSjp0Cxcs
8+kEEM770nU+EbHk3nLNoa0voehVqOdBJkI4TX2TCJvLI+EJJwKGieDcOet3
YI7LyXr2zUcujYJaGd/PHubm1QN35c6+L4gUSNStHuyAPmOn2bAvB6mrlQlS
3Vx+2LRrdlKFDH7+p1Hz9z7jkkv5+pVCRAwTku9VaVZBrO3xQ5OfdUh8fvwE
cRUdvwlqUze53qal5KNImW3Ci4VRRssEAdM3xog7V3Lws3/Wegv3/r7siLto
xeWc34nuzzZx+3Kl5OrfPwLYqLustSb7Hwcp5wT0zdtHUaeltdzvayOX79jd
fQot8N6bG0HUGkJl+BVXh6lxhMVtWrKCvwqmb691nH7HwvglU9YmnWFI+2nE
Gq/n4HlVt5BYBxFif8rW3ORjIryc2vtQhgNiU/P9mP8m8DLuWvO8checL1YG
xEQXQLrP6JK+BxkiFTum/+/TK5/JBuYIZ6G28aOP1O7vUP2R8XPrnW+4HPbi
raAQGRLnE+rGP3Yi67kQqTKoGj/607ZF3P2Gsq4TPv5JWagmCa94rVgMI70a
/6+9LMg9OPCWl0MGw8Cg7KV/L/bs8Yo3tmVj26L5l7M5vijSOvG0Qr0WxScG
/X7q9cNoRHv3XfkBpHa4mDdQy+CkmaKQ0diAhbMbyy9IjGFmzjZioasA7RF7
TJl2iQjIu+gYDxLO3LX7637ID4nFa45uU38HfpMXXfOXWChyWd47az0EKYEa
2+G7vTgd32OZ/4h7ztdXDD1doGJBg7hytXY3PobkVN8T68TcQ/NvVzaOQX/L
sQuEzRMYepfLEtxFwbBcLu8Mty9rTIZlxL+RYeRJT7lGpSPDQN7gDddnlyxU
l//9QITPwyn+C6lNuFJxUsIzfRzbvTm8Zlc6wJeUtCThBQs8Qkf2XywrA8VL
0UTagYxXQuuklrpTIbEqd0/aCRZkYg/YXM/5itFt0d7rhKhwilM2XxPQhqcr
TvGWLB+FXFKshUt8H058C3n/cikHGnsUNgfEsTAoNnRvdmkTIk7+uXE6k47F
iworBcIqYWdT0zdZ1Izso4H7RW61Q2fKyWKBUIkrKNuZMdeFFENjxvhSKtcT
Fy4Ev6Ehe+1w19V6FowtxQKIxuNQ2pDRcTuzH90Pzl6gCzHwo++5kOlbOjY+
/2shuOY9+J8Um+6ijKPsxocth0pZ+M/e/i5Zm4JVnhFuZys7EO2qb2xwoh/O
DYnHltj1YV5BJeoCuR0+i57qezK7oCq0KHhUeASLftdXCZfVoDlYMz8nYATz
cfWWV5pr4dMtE2WoREDyghT1zi0mlF/xC6u/68Lz42LgmZlAuGypTRm3Ls6l
3dY3f5ei/sJxiyvC3LxN+8fxj6zBT88937dGl4CTHnhl2Zc2eJx+kzziOAaz
tdabL09XYHqluX5S1ABcGiAdqtYNO5aq0jyX140MmghpAxMIGS/KjJV4DZ4H
zTQ9ezZo59cMN+eNQcRQJP8VHxGvGwW9n24ehd+ln+Sj+TQIxRGl4mK/I6H2
QInHxk58Kft5vm59OwZs+hcatZhgNPzxPa9Ax5O9UrixZxiVRw40buKjYeXT
7zeGbLjXA6nxxrq9WG4tVatKa0d19pmOGGMylOxn72dKjEBcH4rHC2goT2y5
ttBfge0ZyYU7lzbAW+NGq1ZdOTIsVv0zDGGgutho9Zb8Dni6h1T42NfitsYB
ZTnVOqxb3hvw164VHaIRHfd76Fgq+j5fPI+MwsF9Tfyp/dh1u5VzTvk7+C1+
0oNfjOCKjd5qG8Me+K3QvpovPooCvSWHr/h2oepsdnpK/GuwXa6WrvjA9SN/
/5nebBrMAhVblr5no4g0emN6HxWK31YznE9z8C1mhTOPSTsEfqSFCEbU4sl+
F6m9/iRcEpn4JtdGwz+BT8sqeiqw5XvBCXpaJwwLnq/VM2pD+e5jz/x/k5Cw
+53GtpT/vzdkx4Y0ag6Swy7d1IsdQpH85y5nbTaOVfu2JZ0ZhQCbYecYwUbb
u73VlsIcCLkLGB6KJuHcZYuY3N/3odjAqNnXO4bVS+tdTS6ysYbv/fOdf9jQ
6aM1nN/Tgi6d8tkdB8bh+Db6t1NQEzjHghIqkrh5SNn9TcKOu7dWpX3uTxlG
O9OLsjmODK1+nzcBpo3wGA/avyWDDsE42nfSfCXOydtm8XL9p4X3/HnZoTG0
ZbF5FvgZyDyfYL1GJBfn9fxjLLezIEnMCMiMGodk34j1F+sOBNK11WrOfMeT
VIO+fxvZuOl2uuTtVAGeOdi/aCW2Qyjs4L9LYlxvS/C/llHNQU+q+qdlXE43
6wnRk1D/gl3GdwXVeiYg4/PO6cwHGtaGisgu8S2HZO62isEfxTgYon/lMV8P
Nh56Kl66ogyeLLLcyFMWNl6+XaLM9Rl33zRB5eUNWOfrprxjGQ2nuqRe+l3s
gO9iZNGu8CFEnbpovoGvDJV72c8JxAmELRvUFVlNRru+e5awQxUa1D1dVqna
40BwQi7hOxMPo9VWvuf2Ddtqu92FzwyoktVEWrlzU0PbYCA3x8S6K8drcmX7
cccmU2RpDR0L4flLY5THkZUt6rv7YjlWrdUqyL3Uhhl9J69mPQqX0+Qzc806
IHzeM9Kc+hDyWrc9Zk50o3m39W6XH71Y7aKW461VhNBS0sXhVwQ8MZ8S++jx
ER+jxr69/8KCxfnWB3pbOVh2SlDrUFs/0sySz52p68eU0OPQgXAaFEjWN6RF
OdB/b81o5nKG6Qu5Dc+NmeD/bKnkx2CCPW9Z8UpmGA9zteLSuL71uGjO0+7B
MC4edOwqUyrC3FWvs6lEbi6EePl9zxjG5MFbfjZHGqD4J0DXrLgP79Y6/COo
E0HpzG16KDwMJdUEBUsnBhJTvTaTDgYhe4DHNGAt976UE0cNGQ2o/OOeJ/+L
jgNa7pZfsvMwt+2Kya+mASST7CL3mNLR/x5iPzb0YfsDo9u/tLn7xjbeuTJl
CIVPl11oNuX6hdbiNSctIjbuCNvw06kf1rnxZtJ1HPSGVq34OkfGnUP/EZ/y
xWFZ7L4JHrlOvFFJms15Xwv+zXI7rwXX4F34h5NE1wlMmvabdu9ioUG1YvFd
1jheDKePR8RQ4GbHszWAn4MjbscbSM1MjAX4p+bqtaE6OehCUO0I8r7sr/E7
UgXNbVGLz6QmcDM9RMW6ZAIlk8PioS8pKIt2oTk8oMGAMB64hTmCAzP3WH9b
e1BhntNqShiAfiHx7+x9Aj4/0X/fvCQfd59rajehF0EyEhddWTTsHS05supf
E0J5npdGZtBgzWoNJo/W4UnbilWv9cdgWxshUBvbh7gv2U4VPgy8aFTbPBRI
xNxPq+0Lqdz+/BteUPZmAJcOO8aPfGHjhkLF/uXPuF6IPbNuody6bvHq/Her
DeHntIL1LStgUlh+5KhBP/p3HHD4xPXZzlvNPJGa3PzfYTmCeDLSRWQTtPs/
YEqwcnEhmoAS+5srXSZaMTGYo6QwOoqTUfxLS9ePY7Qt8viGimHsUs61nLkQ
gQsDCs7P1ehgHJJrCmoYwrUIvPaWZCKjRG7nr4kxfFW+ydOYy8LVjuFyBys2
XBKJTvccOchfsDhl7FuHi+yl1gwBDhpPuEzZ3qWg52ENRzeBhD7ltRNhtizs
7d1fEukyAb0BmaSHqe34axb8JNqJiaUu7wi/T3M/zyd3zytcDlNb02NycCcB
Ae3bg9avJ8PsVkWYX0kVDJu3Ze9ijsHgp/0G6zkS9JNvhWlMVqCVs7xOvr0c
P3/wHE36OoGzJ8+PXz9ThjOJB2IVDNqge3jULzyIiH3Vz3X6BVgo/Dc01Nxf
A8+L3rVKt9vxZWH1RZ7OTgx1B4yx/7Fw9LqY8Pvbwxj/NDNFiKTg74ehwL5l
/dg7bbwr6+k3LMhxqne+qQXN1Mlpj8oE5mTkBtwGOHA743x8oZIF6gGRpS7N
LITzCAZd1KpD0r2dt0XSJnDivyDl1xkd0Agz7Vib3IVtzke6Q7SSkOWnUvVY
gwI7xUcJ+ppcju4zKG/43YBPujXpt77QkLNSbWlzQQ3mW3NXGkiR4G9X8HzK
Iw79KmLh3ynDeKNbEf5ThwHZPzsVLaTI2KvVnjvZOAphF7HuF/007BxPTlh+
bxCecxQ+QW7fOXPSBOubuPt37UfHC+lsHMywZW6vGYRQ8p1i4QoSYj2f/WKq
DaI4yu6Jznsa5vp4Hvz/+VrNIUd9n842xL+kPtRV/QpaAE+w5gkqTpzrLPa5
z0Jm0M8O6WY6dz+dIE4/ZkILB4aqotgYFH9yJ6iNim7KjLRGTwvePHL5mP+A
gWQTW4UGo2EcI1ST3zxnIrJsRfSNmDGUP903HnytAwZfNxzqNqTAspisIB8z
CF61HeUWlYVIaT7qatPCglKsV/vdWCpEBLXW/2VwsGZj2uBlcyLyNv2jdzmO
wI1/tf4+Xg5Uzvlocq71op9/cOhVZjMMUV3HP9ILWd5jf2fGWhD9saNi2nEI
KzjCtVKHB+Cmpya8pnUEIf5plTcOtuNn6ajDjzEKtH/L3JpNrIW8bMpglz0Z
09KJLR0zdKSx1wZcMJ/A/oX9fv//vjsga23nBtsuGE/LP2Mal+Cv3OmRV//1
YpfLtvZy22GoSoZOW9T2YdFXypdPohcDEh2JUXt7sUTq6orFATYO3al7pLOD
BdnbP+ivRPrRY6WUZ0bhoF7ix5k+Vyoi+uzkykuJkJ2I7tlxqBpLg8s7+neO
IvBgHykqvgOjxcmfwyhR0Poj0immxoRU04gT3ZDLqXyq8d4Hv8Nb9ZhfCbEX
53gdlGbbsuA4VEl7McPB/jFGe0X0KIo4p6+xyKmI96N5HAllw9lQ5s5Rzhj4
bUqMVp3OAXl388W4fjLkKwZzvz8i4a9AZRTRuBVCn30Ysh7f8PErf7dFGhWG
60L/9U5XI+6pRE1QfisyFv+KSBzqBR7ebXfJb0TNUftFXQlPxPZUvq/9RkGi
cEghzTkblWnHLKPP18EqyiqjhPYdQcvJasOuTCQsYVaocPn3ZtgXc+FkOlbs
5AgFq6RBdsfGE8Z3mGjTXELsetUHrzNrHhRRqfj7NIdcFF4E28rlcavF2xBK
MlkhVtqJOH4b+fqrhTiUUfS4J42Ii4KJiuoVbxDtNpYQrt2I/sYX0V7l3TAz
SQ2psOpGcEmrhmsdDa0WmnEy2RO4vTrB3r+pHIcLsu4683bDQvUS4aBlJorv
bguytKUhvc/cv8iCDUO53A0+Ik0IvhYbt8W1BmvuHqxRXaSDLB3/pYrLzSfM
Ci3XCFQj6Nyqw79022FT7JUWdK0f/mPrz3Le9+HNhpJur1uZMDfdT1z6XxiO
Xol9MJyejwsJj/4rCehA3q/1YT02o7BOSUuyInGgLXLxo6QAd+6c5vfJ27Ch
vEtOpa++DmdyPApKHJqwSWO5e5lqEi5TTGN52HQw3VyfQ407h2t1jTfsr4KL
6+T8waE25K/4u+74SwbeXvV/tFGFjMfKn5183Tk4eMfTdYg4hHs1p3+86afg
efI2i9yeIWg/iDfkN6Gglz0tFfM1FZ6fg4IPS3Xik9UdBfOvfcjMi10IKxjH
I3cnUfY4G7ljD+JU3fwR+1X2wem7DJgsnzqr3jUOGbEAk2LBAvx8eO0cLegL
xF269wwdH8f0QeXO4NtDEGHN7cgf+oTc2pZID26ebVuw//iem+fyqk+V/57v
gIznb/LBWBpc9V1ffW7vhabpq8e/PtdColvD7N/NTvy+6Xkh2rIDxcNjPSUv
xnH8CGEqYZGCOsc5y7vcfNvv8mPHy6ZWLK4+vPmQYA9om7aWc7g8sybvgjV1
Fxur2+NvXpdpB3GF5sdi926kfKGXHTccwqvTrSK2xQRIr+U9cjerDtqDytG+
8e3QvhajpGdJh1HwKdnrCXR0XtLJW+ldAZ1KJV+Fy0mQua7x8PNRDryp0iKD
EyMoKM8Web7YgwXJ1JhmJhnPekwvK1+ko0G+4lYRowYLu1i9FQHZ0N5XW7PK
ioMN2eI3DcjZmFh/+587YZTLvzarzlhOQGfHpz0/+sdgws95LnqAhvara2OD
34+hzkaka73JKJKNJSsUdLg8e/7Xhf7tHRDzdVDJud8N/vzYpb563cgu+iXW
acJBUeUAT7IGEcW7L3s5vx/FnhV/LdniDfBdEE3NmmMh9mzivb8/iBj+d1Hg
9/0U7ErYsmr60QR4mpul69a2Q/zBqbWEN9w9oDEuJspioH1eKNdHnYZ7Fgj+
dKkDBHpL2jHNcVTuGlY4uL8TPFnJidt6WZi//1tkrHMcD8ZHZNX/MRGaefqm
2H0KbsQox0qI9OFUZu+lWPt+PCq0+6HH9ej/xlB8w7cbV3Qc0r7pJoN9kLP/
d9UALJKNfVa9LkJTySG7xng6tt/Q2y0yMoGfRxrHwrj7Xfn9+I0kLRJaFqi/
Gv9QMVziIVx/LBAk+tzrCIdGSK8PN+/6PIGAGl7S1xVMGCTvJh7UI0BzxUis
qCIL8s3iHzVLqyGXHtaybnIU+rqUN4w3nZjbGXPg65lmvHrXIJFDJODVX1xY
doMBVvvgvCOXDyT3zA8Py01A9/X9t6KC41i+PM6nTY2IfCtJtQ2XmDisJPSw
xrcXd+KmP7t2jAInL0sJhlLQ0cse5Cz5hORf603enmXCkE9kX8MrLncYe8tr
vuF6Kb0t6pBrAlQ0Yx1z7o2jNZLzqONDJVz0vvHNGeTCzSDsmhkfHVMqZQ3x
p2lgZOdr2N/hoGlg7Mblt0REmGod/O46hLz43gMei0TI27WlrVhKxYGRD1Ln
to3jkrlOws1fRMQ6D1mED1Iw5fsiqlcqE2Umq67L9Ffi02/lG2avyViSmaN+
WbML9qoW14JViRhbqSPE0zyItcusPI5JjCGvxvO1avAgZJQN1cqjieB1Nap4
FjeCQEbmW1P2KFQ+r7Mm19LQGBwXG+nQAwXLS0dePO+HRNz6nQsTNLi1yJ5N
EnmO6S27dzbd7EVte+MX23Qmwllzmw7Yd2JZjlBODGMYvSrHnc6rjUOtJdZi
l3gLnDZ+5Xw6TAfFKfmv5lsu11jOnLXaMQbS3MZR1Zu5WP5hz9zJpAo0bn1b
uXp2ALE3225GzBTAKdLfS2AbGR9lVZevDB9FcKaIlHs+d255jUpEL5PwOcDZ
8q9VOeR3+974yvV0r/WEgb1fG3H650yeRFEDzmanzvwWoULN0F9geqIBL3da
BSrT6xG13dZsxGMCoSMjemFXJqC97kpGLJeb4rJX193lp2Ipx/WT1LJq8DML
MgOHSSga1lvI0/uKr8ecG7Wc2Kh/v+XVVnESPjWF5S4xIUKiY+2RD7FsdGbH
0fe6EnFtWFLvs+IwDu0RPTi/lYn+q31OylL9OMEb2l5VSMTX64co2jlMnO7I
23yQwOUK3qEnBY396J7W0HAJ74BC5nevBX7u3G3QLX9Ei8BCocYK77QGqN/e
RLh0/yuCAy9ukuXmRLrA58hKl3rMfTD7uHCsE0Zeo1eIb3pR/xT7I40ocDBz
V1e8N4aIc0ImGx0bMTAh2GxVNgC+XIfoCnoZFo7+EjS8VgR5waak+lsEvK0g
+cy6sdB07wXfui3jWGGqvrpIvAmJRn+ijVQZiHuQdMbBrQ9ioqfW992gwYZX
VYt8bRhZURJZ468GsF0p/xbZtQDWQsGbh+xz4FgmQ77IGISdz5TZqTtNiDXP
DheJ4cD/Wg//jEsjwg7VSM3tJmDdyna/rjkmvKLKL8eZcu/XeEZvy3MiLte7
dbdHk/F7L8H55EYKtofPTlbWV0OluvDItaRefNB6ZfbZdRSNDp3qbQ0DIFXl
L07yEtBAPvk+UoUK9AbJzXD94sj45MKafBLkEoS7dE8wUNTx9/73YjY4jumT
T9QZ+HAp8nV0diW+DZ46dvwiDc3uTgNjRkzcktBayLvfB8I+eqspl3vXB8Zm
aZTQcD1S/YKCxziqMqYaPCMqcPX2eMVn1yhEfPE8YJlSjTObFo7zR1YiRN5w
3fKlRNyhPy+7ZN+F6JpYU4VZDkC5fMMwjAbmaFGNzVs2esosjtZy/VnRVrcj
fYYKXSmTI4cuJqN5+lceZQcZygU9Ly6odmJpxYHFq9x5G3Quj0swzsPQU71q
yz805P4n9UQ6rQrqrz+O+B8vRzEjm3Tkej2OLTF+LuDRi9tK7seb3ZthXRq+
on17D/zlPWUnqETUmaQYhxm14LOPhEjv5gZsb8kaOvaZ65M5rtLtfNz63ogp
ePuUChfH0k2C3QwU5+wKS6+rg+tUZ1S0yxgKQsiTGj9oePPZZviwMAdBL0U2
zd8exPyP7zU0Ye58OpQydJdWYknL9JuXk2QUBxqGib8Yhe8T43FayTBkZE0Y
lJc9SBYn0iWDRzCoXZ1P9exHnNjMVK1QOyZeLMlwC+GAsZh8NLONgOFND0+l
u6WghRIw8GctDYVzEgON81QU8JOYcnPpyG1JXV/E9fwjMpExcnt6YXKUNPTE
8Bm8eg4zXRXqUC03UvhcfxzZazz33Eyl4c64QQPtXzM2qBW63xRoAq/txfda
B5swGDOYr/K0AXHzMiV6rDzoHS581ChCwlHTZeHzD8bhdWXV/BsdKhxM5v3y
flEQH3skcMmFbGTYGN9Y9ZQAk9xtvPb3B3GvfK5d144K39xfLAcSHQ5fD72Y
8mzABY/QLUWbKKiqIf/2usbB7nCF1mpeGppQG/xYuxseTU/STFZ3IuOQc+ex
WTbMhiU7t/8ZhZwv/8r87nE8MWyW22M1ilO6/fGGXlSsTWxzecvpwhH9i40G
IUNIOKF89ZRnF4bIe1M+fCWjJixTjYdKw4Dph1Mpx+g4Xy5YJOo1htvhB7ax
q1lov0TbWP6OAv6E+cgEnlFUR9ePeI9WYdyAzyzJvx5nUqd2nS9iotO+19Gg
thNfqJWbDbYPo2On263ywUb4W+wJOcnl6odhTzg22hzc2nt78pdSFaQ0izcl
z7eiaV9+yLUSEmoUhavP9rRD4oiJTH3aGNSfilOjuV48G6Vu4yHZCm237r8C
iRN4su9mkxapDeeShg7+aWRgMmn/SY2SIXh0q+V87UoC48Lu9P/ujGNMJEF8
uSAbCh65j/q1abC9qyFWdJG7X6e0pjO0iKAfsvluk0RFe22ZqV8QA5QNKh4n
ibXYschRSS5LQJ6awGW1L0RkZ06xWe0U9LQty6vubsAx93KFlXJMWNYoZ4dY
teHtyLSPqHkZVseWPhXQZ8HmMkn6CY2AuV6enynbaNgmOhlINWbi4e0jrn9V
88AU10jeFMBB/O7NeVkWTFj7JJdFkPoRLnlK6fDTRPDdFPq5XbwT3+X945LN
2VjWGHPhxo5xCL65R5hgEqFXU8FnV0+HWVjAw9XVDdjHNyw0mUiHdLQt9Qu9
C3Y1Y3EX3tMgl7P2/mo+ClTDTWtFQrl+Yl+6JvJvGTackff+/3Nycuwyw4iP
/YjtTyu6942NVROVbL/ORrDls5yXCpMxe5svd6PSOL4aUF5n2eagecemgoCD
5eD9z7t2/CEZZ3VGFl1aaNALvmaqP0+Gcfv7c7TdheD5xIyOn+7E242WVnWe
EzhU1vC7t4kD3c1vNF+t4ebl85wGpywiKg8cvBdQMwbxX9nfP8TWgXguZC3j
VRPMalu3i4rTkPBk46Irl8vmTq8u3JvxFSvH4/mSlQuw1yM9ozKCgcx9a88l
cvP0PsxvJdpVQFa7UvfmJAPrj/wQoh9uQWG5VGKALgO6u2vORNhnwen2nPnp
eCqOavt7dy7jevNU5fakzBzo3LbaKXqlH3LfKAbdUWQEDUqdE9rYho2ezmvV
/rSifrpO61J9PyilD59uXJaLYOtzoxHDVAjIx9bXaZBx//dwucxUE5LKr+sH
WTCg8fZJQWADB5ff+jaeu0kB37uUxsW938H3aDbo120a+CKvb1jRWIZ6/+fN
bWJ18Kvc8O32SQ7GtdWPPghkoqhruFr4AxPThyJibB50QXohsO3DRhboaozC
nPBK0BSK3lzd2YE9RxTO7AsngBWQ4b53eATnRc4kmOtz58V02fTSgDj45U42
z07548W+qFqL07n4Mykov4Wbw8eDJu+qnW5H1BG13f9t68WuoLu0xJMM9Oa/
ORZ0nYQB85EVm0vb4SQkY/Qldhzt6oKrqu2p6FKL+RY+TUeuhOncgawq3Djp
nDelPoJT7hRTozU0TLKveoq7suBwyenGM7E2zMqmqWx2qsT+W5f8UmYncEt+
RxA1iAatdedZoj/Y2Ew9O5oWysQj+1Whsqu7sX9zbrPcfQJEPIWNRmksmG7e
uDioy8Tl3m1WeosExL3tNvO9PYHru0RCj38n41HAY3LXTiIWqtWeL1zuR2j1
fdmJ1QT8XXlktXNZN2R8nN9sfTkBlfRXBUUN46Da6CSVbRuEruBO5ZjWOlSm
OHteZHZhUDPN1imLBf6KfQMGSUQMnTI3jU9hIWSvavkr5zpIqNjLCNXk4UXs
MlNbbq7EqC/YhhSxsaSZ+t5VogPWYkffqWVQQZax6U4uGMG3tojhCokoWDz8
GJ8X3A8rQ5vetdbDaJ86L2FmNw5d6fqVjfK9+HzYkMkvwYLwbp/zP2kZEJff
s6Isvx/+iQ8+jWx5gzviM18mZHMhpLxsMMWhF5LWXjn/jnEQxrfPXe/eBHaw
tkZlPKfCJD9LrJN/CFsO3s900BlCftbohuR2Jp5uGKTru49imZK0oWlYDx4u
7gk0DqRA2of8VXING9vIcU6GMa3Ywlf71FOGjONVotcnPzfgaQnnw9XjLAze
FtcvjJ9Aj8d57+TPldC6lyKw9egorqotX8+nMYrd++osc56xoNjyq7bDqgBf
bAL+ahh9h65y7YbOR0Qk3qILdQszUBHwZ5lAIQX3dlrvXB9cgaxtIenPhCnI
1lnhsruvGHtOHeHb60TASpdej9U8FMzfTn9OUaeDeXU8YIDLCRJh4QM/nJgI
cv3AqvTmYGyurr11HQNVl+baQrU7QdzwLv5XAgGeizHtegQazh/q2+HQycIK
97ZDG/8NgxBR9PLRvmIM8rfvDlBuwZhU9KY6zT50PNhYPvhzFDtPKhi9aH6B
5Z82OrUsK8GXEcGfIVJMqC7XKBKcoICi6GtxObADJGFDv1eLbEwPDIuuPFiH
Iv9bBkQu54Q2U+ov931CqjpVZnGuDQIPwp33Z/ehPprnjqF1MkQdtuq+/P//
Cc3jcFugAxuO8pANv41igv7K6psuFZ0nDi5RJDDRrax20iObiBqhbXnj1DG8
rPy0mCnein5JAaM11+g4fPbOkiSjdphwHJ4LKjZDNDPI17h9HEn3msTHWDTc
vnC5kSRVA8N9yZfH7LpBSjStPk5jw44g03zFbBjsvbtqItc3ICHcOacopAqn
db9OEX52I2dmyENDcwCUn9KbqUEsKGwRzW/Tp+GrSJRtrUInlHQa2tgzXP6v
Pc6vLETG+gc4vlqzAR6yX09/bCHBP+NUW5R5D9Z1fyusTvoK7V7quthkEtYN
bNg2I9YNatkHmT3aJGzh9O+1V5nAQOHaKc3Cbtw7FPhaSWMcR3R6BE6doePx
Od6Hzh/JXI6zXk9+fRNRkbsJJK6nyOaHHT58uhMRrxmJ/2kNYsPFSxcPCTBA
Yqal/UrpQt7IBbuAZ0xQeix2bHxDRG3GDUXLjjwEVqj4dWpHYmPprb/LRckw
FBFX/PWCiZ9mhzsoSkzoxMbEDVMGUNr0duu9RgKCbv11P6BJh/V82vWQZR2I
FpkfjTcugNeW7XeecnnMNlDuYNcKDrTj6w4qbmdjxwn3ky/tBqBBOuWxv5WJ
rxcPu7U2dGKe+Pzm4j8W/gY/6h6/QsU2IeEzUUkkiF75bGd9lImBHTfrhbsL
IKlktaRnXR88tqazJddQcE7yrcsDqx4kzq6etZB4ALaRQeHnyB681i9+eVYr
E9+n3WQitYZRRX3s//VUGbrOdgeP97Iw5e9oZZhAx1mBg1EiFG49fQwmFEIm
UDH9xvgHewK9jGWKq2aK8dNXxupAHwX/+v3T/9oxYZ5QfOqUVz9EWCW1cqUN
UEqYMfhI7QX/3K99i3ZsqB49167dO451N6nr2UvJ4Gef0vLYQcT2mzUbDjkx
oHfJNPFLWDs+G2qq9kyyYB0ssbnpbzmObaakUhUZUHnCd9v/HgvmY7yHmmgM
/KE2zVOsxmGmqLv8jiQVZ3eqTEQnciDNV/lrcXc2EkihNt1eHIh/md1oyvVt
s4lzjl+6K0DjPfunpJaNS7VMwb1oQ/lT+teiFDc4Xiv84X+HisTHDo/VpWmI
ErtrWcs9V/GXKz955KWiQId3hkc8BXJGS5LX7y+DyglTzU9zPYgPozte1apH
5K+9zVfP0nBvrRS97FYd/giGmDycbYau36chW/1uOF3ffZbSNwGx2kdzetc6
UdNnLq25gYSTkqFXiv4jQ/ygoPMJrh9GrEjxDi1sxebf1flXuH2/72qEtsNj
Ku7zuLW/v0+Bz5KP+k2G7dzcjrV/ubITm17LtYpy81QisoAoI8hB1Czj/c7/
RpHL8zmVN38AYt/iwr+mjKPP42x5vy0Lmxp6rrb/64NGVd7Tjv50nP7SNKWV
NwyBBT9CrXoVGrwiaWNBjXgU9Xjzs0sTWH/huHJhVxnStvTvl3LoRIrm2N9O
rhfe97ORTnxAwIEl/h9zFYh4mN586eHfITws2Decyc3T6HpHM/bbcfBGTtie
jKVBp+u2ZaIvDc9cGm683tUDk+t7dQ0UejCrEmpRFPYBOw599wnyoiPt8B8Z
meAJGOUdM9xcyEL0cxNe3vU9MKt3KP6ymgn1HJlmG8kBLD//brVnPwNJnCOP
ibu556SvV3tQkIo4VnTWSEIDztIO/Pjy5SPW96n6uC9S4eOSe+ZyUh98eIRH
qqc7ULNAIkVy5zP4SoHpb6tW+Fh7zLlw97zmCQPRXQfGcSq+3OmMQAnK/QJH
iG7DICv/9FA8Ww36pqbMFp0O8C5aMB6upIHX51fOtcUBSER7a/l/7cHL5D7v
KJVh5B6XjLU2m0BEUUhNzKMcOC5Nrd8cNgJi1G/n6qJPSOF4B9O92dgvq3Xs
5FQd4jVfvDerpOHYYS9HMmkCm9Ucohf/MUGyKEsp9xlEjeBVyvHRHjw59Mub
h0bEryi5JhWlUuw3r+d9FlWPlqN+Pxz3DeLkr0/XWtMY2B31T+CNpTu+iHNC
d+2gwkL1SUHXszacJ2mL0paRYMtr5Xd9BwEX0unO85btSKwPLN5OZyLQKzOm
O64A825qOqkBA6DdC/ba+qcBQ0GX03egH0rm11qpj5Px6eUB5d7nw/BcuPCq
bUcoTi7bVHTEggx3iz8nrko2ICMi/w7rGAl3P+8qkNAhoXPlcLBmDwGv1zyN
iHw/joQ62wer+IbQ93GJ83hhD/hsdzQ7GE9Ab8uoSv0kHfsbDLe9LRoE8HKL
1hcyzAwdf/x9Moqi5XfcH0a0IiVk6OR5yXpsbts39HCxG1n+Y+odsWTcbt24
aU1tJZxTh7PKAmiw3kw5QuKrxPLfdT6cJS3onnpmdVj/G3ZV+2l8vtOOrKqo
VcKLZbi9e5XC3KYxWOmdLkrnY2FCf5k8dZqCLKFcw+t/RyF1XqusyK0LCgWb
H5+JbIZac0ZlKdfLVre2nKPcr0NQ3Q+x6atE8IsSqBET/fDxy2p+JTWBwJsJ
bkU3RrHH57Hc7AgbJpJbLVMP1eDVek3vv21jIKhKCw/W10JgSq/nxINONO/d
RXiZG4Yt7hfrDhhxeUelTpoq9QGLQ8+vHP+Xh4NTGRUW4iw8C4lSdhAlIbMt
yfnvDybCRaqbhjRG4DKUarE0wxoJuqHLHqxlYCFs7MhGRhfmXJauOf6iEuK+
YdS3KTQssyr8tPEjCbRzs4oXzCuxN8xkKtqbjM0Mc+o7x268GBQceB5CQ278
WpmhK2PglapvS4wax+z3wBvPImowOb8r4OhMBR4oKe1s4vrmP039pn+53ZC9
80BjbmMVMt6SdqYOt6Nui9jJ1vu9uF9pn6Oi3oadaWXKj1tbYVDS7cT+H0Vn
Hg7l24ZhRUirFEUUWaIilPqVXJVkqYgsJVFpQ4qkVFSiqMhSISKhUNn3fd/3
fR1mzIzZmIm0Ur73+3/mnfd9nvu+r/M8Zo5nzjBw5VGta2/UCG4NHP+W+I/g
hLljQk0BbUj2OHzu2sEJ9AzX2F09V4E8r+WTa6Ro2LnwYba66wiwc71rlFYX
Zs9qBlY/4sGbXfLbI5aHTapmkVuWlWOVjh+pbAkFQffVxlv39ePfR5ZJ0pJu
PB/SaLx8host/27+tnnbDz/lhae9U7iYz2k7YP6ZC90SM21lCxamQwzl6n7k
IkH8TvYb5zHsN19/pWTlOHaFyrnqn6NgnEX72r2gD16fU4fd/uaj8W7TzTWr
JiGqGGOrPNeJl7+sVH95jmCPbYL9CSJvlP7cWTE/2QGu6Iqee3psJD+5fbcg
oBb469L74hAPCgr/pJaldOLik7vc7QfH8SZe3PtaOOHN+07ZJypQIQaRS5nH
eRj6pC/fQGNA0DBf+GFoO1xWWwkretDwSM7Ur/rzK0RMzjDeBXEh1nDk4dvk
Glzg8mLOm6cj2UHb44ByDypyEybTbQZh5hWb6Mli4cxmg34Sm4vVNz+8EF80
hPKDktoyj0ogupC1cYFlDw6K0k331Lhi6JvlP1XVSnRfZdKCejrh4WVdZ7CB
8La3p2rdRqNw4VOY+iIivxal/+YP30xFzWxZur0LGf3SWe5JN4Zg6hTQZEbj
QGVR5miLLge+qXUn9Y3b4Xn3kYbqARb2jZkmzuhwECpR8nNb9gTYSn7nafQc
pHkmjLzXYsAhRZNz4hMZFzx6FnxeMgrLtrMNDz52wMzcRrD6CJOYh0Ib9HQK
kM1ovbHpcx/ix/eaYzMX25/lh/y3mYkrWkdo2m+5eMB5s8vYMgt6+hflnDey
cLTk8bd9hgxInk14XfJfEXolvz2+6DsCvnAj6qqzBB/YnHTt2tBF+HXs25dL
WnHAX5964R8VuX6qSfnrQ0DPUn5SZEwGx/PLA7JfP1JdnnG0jBjYH/R1t3Lz
JHbuepy4bi0Ly0LizN++4WC64/6nx6JteK2035z1iwZrm/UK2c/eIDW6Ir3L
lYn4/bsz2rjE6/YL8H1qH8elDLLMboMOHL58qzmshwVNfj32Il8WUn7HkLTT
CT+OYkuNWFOgO1Sxzu7aOII4YcYffbqxLfW3kyYfHeuyfwd0bGmDnLvmxZle
Evwm+Q9d0x3H1//yPx67TYNcwWrSbk8GRshSYSbaOej3vHNy128u0j7VOct/
HseEd9DODRe42PfFxyN3VzNs6gcme3YwEKfuEZGx6TNE3l161RA+icrI0kHN
3SQU+L3XFjzMwXFfQU25qh5YHf7hm/KNBqlx5kafWhouGdQrLNr4Bd+D628n
EZ7tbXXG4F5tMfpElITkT3JRtlx0y7aHDByLZLdtVGeCva9l0VALBwGxkskn
BkbwQKzThdsUj8mFLw3ftJZAVmwszv9wBSySXlbh2QD+ykXf1F6fiTNOBHBI
D8JlSULzktw6OCfEL28YroVwvtsBe+lebL5Yq8sgvOFDnW/Jjc/tKIwytFwr
xcDrpO31liGjEJeak4jLfwFP6eaBJeep+Pdl0efkhEw8fXd7k+WyYUwn3jv6
wpAKCfpDikfoKA5Ztrg+pZZBsOLTuBfhxQnLQjyd13Lwfsc3x3OzVDyy/nKq
LoiG1nfR86WGdOin2J6ItGUg087d9/6JUditezYardKGa7OLXXcJUqHOY6j1
vevGn1ObYjw8ukBjNb9PjiL62Gv/AYmRNgjUrPxx+xsXqaEzAmpXPkKAn1xU
8LUHG5p2XR1UZSKiO935tQfBuVaC27jCw6gJlzEN0u9A7o+f2bbHu3H0lOPB
5ba9kC+o/LBnLxdXfC1Zp6IrYbGnwy3jPTHvNyQkvBEnY9Hid+6ZD7oRcTh5
Y5AEGf6RmjenrbgoctUznc9j4lP3q1/rwth4+DDQtO1NOzR1Tgjeiu/F4Zm4
G0rtw/ii5JNMGiBjWcCOzgZ6PTz/NoUldxRin6P3k12sEfCXXL6RMz4Cb9no
sDUHONjooBuYY9kLP3KQheAcGfLblmzZw/2Idz3LuMeix2Dy8nRlrkYsfNsc
O+Y063Cj5TpDP7oAIg4uDC5nCGV/k75+qxzE6KvcoIu5dGx1l6ls+8bE5OTy
E1dGJpFef0B4hdgI5De56lz6N4FHsU8bcog8SNlm8OlhCB3TyoVCF0pLsNAM
Ih+2kvB5aun+dKEhmK+55bQ+fQS59q5+XRf9MPZtpCJXlgfzyM5LXiu5UGZJ
v/slTsP8Sk8/bQ068hRj+s8eGcYjhmz1m/cTiNu9QPRzZCIarSylRNVo+F7K
vH4+ox1dk5p1X51ZWDRqtS/Lh4pke6EAG60mRDXuSzoSN4Y/yrZ6B/xfYO2U
AdvoAx2hM+SYFdUM3E5sdqDH06FWYTt8ipoOsmMV3/5Ge5insaR1l9Iw8Dsr
9IhWM47bPZZ6GUFDRb6eSHERGTWsprbPqVSYqOx+7pLWhrnqzOw1/uOIaFNy
qkqYQG2/icF1Ty52/7yfu6X2/+csBn+9N87C8mKJwrVbCO9a8O1UcWQ3SsOf
3b/rTEEna69Vo9wLbLo5P/06uhUv95eY7P5XBLmWo72qTUSu3tKXd/zHwxTn
VqjkwjHwXd7We+12HyyP8A2EGndiIKaI+Y8yiSebb5n9/1y0rQLbjt1MY+DD
f290slvSserB1ci+0E4cnRP0OaQcj0gH3++y/OV4v37RxUHC/wPv+qy1rBhD
1kO5m7q7CB4R1Ou+IFoLVeun7z9znmJV9LTS4CAT++opei41nYgvlxCe1eLA
Uuqn3ZUZEhxTXv8zPs+EnetKexXC80LWbvynmcfA0/LUU4vUyHDSMh6k2TNx
ROumksuNUcg1rlL8/aMPHk6F2TyZZoSGh07RvdmIndatYDROgn52WE/4KA0f
Wp1fr8mvwuKTNvJ3d1Mw9EjszokIwpsO36vHETJEU7/wWT7sgSepf4n8baKP
x0TePhJhomRxt2JLYA9gHxv/K70byQveBCm51mLDX83pVyYk3PJPEO/bMIrv
8d2yBrYc8Cm+b/zuNogZbscHXv8APm3RCMzrZ6C/9kjwY6K/X9ssXCLeS4P5
sGoZNCehEWg64054yi45kpNUTDn4a66v227ORg6L/dfqCg9ZF49ma4QwQO+O
cvf+j4fvA4psp12daNUqUpR/mIsuz0NpTRItGPbSc7e8Q8NfGffOTYbEnBd+
08H/vAeWkpdPLn0wgTsR7MPZB7pxXNt0zUbZarx9nHk9T5rwty/KkQdGBhB8
/AC//GMSVhfzbzzWysCh9S//e3B+BK6fxuAgTseYYm/Tnchi/J0VScqvyENL
RiRp/i8F6XVuz21udMLY08e23omH3zs2/Vxm8P9ztNJGE1+PQf6+c8hsIgWc
7C63m5vu4NG2+4Km/jzcr0zPOfx8FKMlu4+IVndD6sQhBtm1DwIxutJlVBqM
b6rVP+arxo6njpG/aoYg2tOy8KJ3MkajR9S4uaP4mpop0F3dAWrbMgGXezFY
vDPA2LdnDEOhnJ/KhAdaNgRdVMlgQdr/3kMasb7WZDkVR4IjbDTZY9Or6dhk
273hU3MrchZs6N4gl4MShpTzwJdRlKpntPZR+uFiopf0SJqOVefFHQyIuceK
OBp1xGAUhb3ZFTs7BlCTn7XTy64Gz5Yyl81facRuCdn2T6fKcKolrGpIgAkH
/UP9t3iP8bT00C1dYi6nbS00/hWRie45Y6sGs3Z8LBAaOOHOgMhx+R+Xqwje
kQ27tXN2hOCFoqw968k4/vW2m3L1JH5ItDhxmvqweHv7+q5ML2jmd7TrC3FQ
1/+I84/g36dWNbfsfTrx6Mtn3q8LZCTqTHfmEXOyTyXjsv/1GGQaHjVz0GMi
bsGX/RckI3AFnKcrhz9BMar9+9soDoIPd75Q/kyB4r4F9dE9E9jTsuJZo2kX
hJ9dlxwluFDIP3DtODGvg38ql95/xIamj2DY4l+JEPXRWWJ9sxTDD14qjgnF
Q6i1ZFH9YiK/PRPoevYUGD0s2+WnXA/+L4+u+hvRcTjQqGAutAc3qjtX/zs9
jvDlg9U106Pw5Nt/PkW0H3KRv68+vsDGnVeXUvzF28CetdVpWTKCgNwuW+cq
KtbsmTHKjGfhXTXnma9dPdrGbJMNHakYebDkoUxlOrhz049Wt07guUgWafba
BOpP8l44KjLBamNcKzLoxLSKgWKqTSas4swO3eOxcdHf79ioFQ1DZSrm9wn/
OS3Drsg4zMClIzYljmu78PG42vyfyGHM8Ptvtkoew/W0p42X/vTjwLkhw13b
qRB6rxItac5F//JY0oJHjQjbd+RXytoxHPbg36fSQ+T44R+zl9+OQOXYq7Vi
pDE84rdKmb1J5N4WKV6bUQ109781Z1M5UCOFGrRVk/FS8IIK4yMHlIdK2i51
HRjYe3nbP04JWN33DtV6t2LngqiLpqcJ3tR+lHWHOYQtpUZf9zeNQFdv9VzI
Fx7axf2k/yakI5JyZEI6tgJbrg75qz16j3eP1ia6Cw5CbslVnavhdCiE71Jv
30XBcMraoYMbc3HpR7AL61kDzl0VVJ/+XgSRq31GEzvqkDx9+Uy3OxXXvwbp
Jj4m1v/VS/XHYr1oX1BdVPP+BS5nNgmzibkkEMnsKxPMBe9J03BuzQjCTYZ+
tYYxwGmU0XXspkJQZsTh0kYODlY2Cj8TGsfs+R068npdsEqjb1EqqkBVf4Nz
txsHV0bXXWRPU3Gatj5YhV2NN0lnXmrlFIKhem+HJmUYh7tTFO+f5mLqfduN
woU0zLDFKK0nQpGdpeFZKkXwomAguWyYjZFAzfJ/jsM4c+qA5qv/BuHk8PTP
Ln8a7O48CfrzYRRtzhahX92HYPCneyX5GR1bLAPm7eooEDe2tbolHADTyybH
leXHUf39/JDN5c+Q3536+vdHgrudFd6rdXQjycnxvCr/AJ5UFS/8oj+Jc3Y0
JQVNDl70eTiluI9jZjpvh8b6FrgtN92+aIqF4aBjUhKPB6DP33RITZKJZmtb
SbNDVKy/blBwyZaF4/k7dTI6KxE4t+/C9X2TuGGyimW0txpDvib4z6cfyQIC
Fje3klH04PtuWvcgvg+vcx08wYBifeeL4txx3E+9bbH6IhdGgXuexM4MQMc6
cemq2Tg0RKyvOEz4hsOAwrzjr1bc9TJ/VRWYjXa85q1LpUG3x640Mp+B6W2N
apw1A9B12bRcfHc/FJ+0Vku2DqK9dvmL13WTWGKiI+JYz8Ng9uHKoQU0GDCF
DYrk2Gi3XXeiKKECP8nphSViHBzLF7a9Wj0OJ/PqQKYYwdOvZXaGKjHxNv9U
U2hrD0a/SvnMZHXi1u1P65eXT2JVZ/EF62WJeHfacaOjwAAaM1z+JdtNoHMB
edYmeALpV2wbpYk53ENKPeCwsgpScuPPp1pYEBbeor70aRvW2LUpzuTR4BX7
JF/+Pya+dSUtbrEfAu8+NXnnPTb0IsojbL+O44apQWqhCxMbcgIrRdJZGEz+
cCtC5glC9v+pUvMbwz2X8G9zNpMIGleS/2aThzu+W5M2Pe3Fkc9DL6Lt2Nj2
ih2Y5T6G8wI/5RJCWAh83XdNaPEQVEaCmHVcJtzf9Pz43VKHCLMn8n/UJzFT
/7xIcYaMhBMVgjfm+nGfG9l98Eccxn0W1BzaWAT6ske2dZs6UWIUMnyoloG+
9U9Y9yc64FPbJCaXSYfQyiIRm20kTBuL360vjsSf4ru1vo8JzxbVMZVYOIH8
sUX6lz2H0UL9Mn81ehgPjlI7/Qi/D11dMOEhzsKcx8V7y1vy8Lb2z9e1PCr0
RCTe+VuHYfvKyoZuXx5O0fjWyrjTcYPpKGzKx8F3U906izI2KiZIyj1hmQh1
7nYl8VfigNdqke0CJCyL//1mKogFqcCopZ1cLm6s3pEidp0D6jePzV1F44h7
paWQ+YaM7YHvpuzudGJkbYpJU/oArh5Iok3QCX5P7Cuy3XYBVxw3mai7D0Is
6oSARiQX4jr6LwdsWmEmniFxpG8A72P7CzfI0/CNM74jOJYDtnCfm3QSFakf
ygLjXPvhGiw+ZfSOBkeZCLf6lHp4bLzq1JzIxNjDtw/u3aFgoHPwiMvRMdhW
LRf6kvgJaVVVzVeOdBP1E0d/ymKgVA+IOUPFCrtvR99O1mNmkrmP4kBFi3zG
Aju04Oi/kYBhgo8sjlxyWmDPgv+X/admfCahWlvxJJnbjOkGUozF+AQOpq+6
3FbPBj/p2kzJBB3nx/t6BI6z8d5MpN7JtwMm1Vs0sJmHmthSAQGFTEgofZW+
rDqM0QjuNFuOhuxivTUtc0wcuGylkvRfFz6Fnl6RHz0B27Parp8up+B+e7e5
mRkDDR0NqRtu82DWNfYxv70SwXzJbflTwyj6FX6AI07Bp7oKiqdkP947HXWw
vDCJpwKvHufbVeBSinovK4uByGv71V6tIkH8T5TQl83jqBheL3K+tgXyf2Wu
S3ImYGStvingLRNZYtXqif0ckJc9ijmfxkXP7m/aQ5UElz55E8exGsdxvgg9
xqMhLGArWvHW9uDx15yY3WurIPdhSFLt1gDuO7u8LNpEwY8z88J/nDpw2Crj
w23GIIIXGJTw/AZh7nq9S3K0H1mqn99u3McGK3N/SLvNBLa1qQ+HOcVDNLKX
75r4CEK2Hb6nQdTLEnHticj4Snyky1leTxnDN7O2X8/GmER9ek1pMobhKVuu
pv6zFTbPpzSoK9kAltRRF09iQced7Gv+o1j97rf02PcunFAuf1RcVwK1+/cN
yMEj4Gv9UPhvpBpxx/ZFP+8i8kWDvZD8dxxvOlqDs+W5eFyt/KnSewI1ibdW
K1UwEG8fYNDu1gXeWgklpRwKXqbOOK0k9pM0s9PH8gIHpcqCzmcEO6BhZ7vT
2yQHvu0u8qOl/bDmKdZfJ/riP7WzZ8t66GBM5Z9ufNGFMdc7b3o4BM+1OP86
PEsCKf7atuFqIvfc4loW3htA5ao797VNhlFzhpndIFKNzBjxaNoSJqL/hBwU
dZ9E5RZF2ZLRDiyuZj9ua+EhpKI2zpAcCwHlqgyb4zzkx3U27xrux5PdzLHj
69qhv2fcfb05AyobT65x0hqC2O2ejG9m3Wgx9hyOPz6ADqPa+0PvSTjjz1f/
bKwHBicyD4sQvrR0t4TiGFHX238stFOdJeojS/s8f0wcLlF2p+wY4UHvkHfi
n+ImnDB7pW6mNQm/ELM226s0LDo55xyWS8H8G/vGqvpU+LT+MM1NrgYnrDzg
2M9xGPh2Fl4P7EDhl6Ec+vd0bJDRY8W7loPh/Hfw60cG6r/O/4g6OQHzU/p6
q1ex8VCyV/hN8AASiuJib0l0Q2fnGhk5NYLv7Vel+nYNop8hVGP7cxIJ60wn
3CV5+Ek53ydxkQbK76ntZE8GYmrFIiq+VuGK8bbc118nif5RUaE+oaE9SdTv
fSAZpl6VHR4Sbai8k9PiLNyFU4ecKRcf5eLcSO8rlYMkRJ8Jn/cdysYPBUlr
VsAYLl+qHnm1mA2Nb3ZKGURebU14/0HoARcr89c/+EVn4517NeNX+iT0Yq8Y
H3IZw0SYlmwRsR461k2q+wbJqHho+zKFvw+2BV4kIclqrE5TtbEpoyJy/92D
dWUUONoenS5dz8AEczBAV2wIg3dPTFg9IUFj+miAehsxp7irDoykZuNj02nw
zU3gvAdNcNf3Jrx3pBl9f90N45yZJUE1PHDyyayenGG8bFjrd9OvAtYrTh4R
LWUgem9FNpNXi8ptgqsVn6aAujv0q8XzOhhZ7W1e2z+BkMy+ZwvF26H6OE3h
bfsIjv2ctJbcSoPkn9E9ebN9YEYU31N5Svhy0letiKpuqCzvTHug9hxuxd+t
V+uw8ZNVrpCaUYPGURELFeJ6zc9eC4cmU7BIOX7P86IGyNKvidzPzoX86rQ1
KsM8XB7ID/Q/2YOpV1rKzE0TSN3T8GmRfz7S8ko3wpuCvayTr94qN+C0+N3b
p8MrcK1/s7+gxSQ+JM/dP2U6ituLnLQdaU+hXhBw+JdWKxTniw8uIjxj/EWC
8meJhwh1EHrLvdUPqGveHPv//zRf4qsbLGdibp9qSOgIHRsH/GNuRPeh+mjf
S8r6D6jYErzvujkVmrabtK8IslBNST2spMDG80+vjDhjbKw3Oeg56kXGCqOb
ijoqLMixE+ZrpkYQucZWlr+Mi0CTzsCSgUE8NOwVn4tvxWN3j5yfNp3gD36g
u/UUGydNynX6JcgI3LfrsBkfE6ekX9t3E/2Qd25Y/VrTGDSO8891trBh9jn4
zbcyBmgDtdQbzyfgsT255PleBmJNJJIqLqfDpkfxyUrxVJxwfvSqoJiML0VO
CSUsOi570rmiriQclrkfMZXTgaDnXcdCw8chK9p3qlOQA4nr2+8l7+FC+dnr
I+7nRvHrlMDukrvN8Jv12N2mP4Hj+vrZjS1kOFxU2X97RTuKhw65aRJ9syM/
zESNnQr++ZF049IwKH0nnXIQItbh2N0Dhsp0RIjteeJweAQS75aPe8XWocfw
WLm7PhNb3bLO9EYzYT7gtiiZwUAQd5H8noFSPBhm562+NI7zEtXybr5teDzo
vTJ3JA0x88uOxcjRkR9p1bdLfAhGd8/ce2ZIgYxG9foLw03wCyZ1zDCIOSJM
0Ts3OInwunzrXItuLJBziX5p24Nh+VO3kq7U42VP04cPncT+rlS7aeLej1kj
r6xj3h2YPbQvdiS4BuneeWpTW+vAtzfaw1aUgYyo9+I3olm4k/xcda0nD6rb
DkgECg2hp44l6e/GRa/C8KoQm89I5IiwvxJcIlGY05UhzcBcRb6pU+g4chIU
0kl5PGxK/+Zm9LsBtwbE2rcodKFRxvmUz6YaqEbMJFUTdcefpxNWtHUUjHrT
Qw4ufWBQ/yUtkuHAevmd7O9yw3gtv+r05V+dIC8/M/eCyMHUvFZSUS0JpU9+
LjiuWwM1Acaar3bluKl6Pd1Mkoy+jUa35juI+3ie31V1qQ9HbPNPB12vBKf0
puK57GwsPHX29G3CLw4InclQn+1Cn1XtAP17BwKK1OOyp3qxPV/72Nmzuegr
ETW99bwba+bVHyykZ+HLSl7w4QtEfZkc1dxC8E/p4VcPfvhScI5W63twfAzh
S8drV6iOw/60k9lW5Sz4zZWokKKKsC3hXqp0dyeKnRGnsfERXq+4FFXnTQWF
NJCQKMfF1kMr9Y8YEN7btk5SVZWMUq6UQn0awZHhfwv1ro9BSK3MerQmDE3X
wti6akOgpgwfe/IsE483x1SforYjsGV6mXYRA7PNobL7fqQj959Y+aHHPFjt
rC2Y2sLFp8ClpVE6dJgbZYdEH/DE2nv7LjWvTIcmyf7mj2OEfxlta2yozMRs
3l3m+Opu/NS9u3DmLQ+ittnK85c6odEndN6I4PnA4isn6D5dqLqyufWkVj+M
4/jIabK9UKrVDd71lgqBoMig6pcsxOv9OnDBiYxDBQt3hr5nIq3Z+bUwsT77
0mJ26P3qQ4vdna+KO4ax4EOWGV2NDLn5u37NKhz8m/1vIqewC+fOm7pEK5Pw
6fpkxDf+MVBqChSq0on+UfnmnmbYhUj+SktHhQEcEODepbjVwPPAYe/imGI4
/1d8+EIkDyn3WkwfcQYgbEZp8FCewCzlgI3kkR4oDQlFu/bTEa9quifCLAoU
PspA7FoKelVI0RaLGdh01HlZyiHCs3QHH2y/Tka0/kjC8ttMRHmUyO4ILIfv
jLTbMwMyTr+b0GYmZeI/PYsEsxftWFzKXLBgqgNrBvlnSr40oGjspolxORXf
NPYV7NQdx7mrasVe5/MhdU6o0qp2Ank+JsEXcptBzfC23jdOxhmFM0oeHjyk
Kh25923LJCQ2bZvt28XGkF1scHUx4ec7tH+zO2lEvy+7I2Tcgrg31v/pnmGh
7eefHGnZEjxdbHf6dcMkGvi+vE+W7kXsZz43heEOFKhWblKx7sX5zzwzg48s
kJfknzGqZeOl0PO6XvtG8H3M+ntGLQ+2R2c76lKI51qTR5Y8TYPKqPP5xP4x
RPpML72qR3BGCXvH14ND2J+dJlP1igGPuSzP9ZZ9YAf9/OxRzAHnxvbxedNh
hAZciG+7wobC0FZdLTci38ttnNv/NUF80fDv1ZYsLNkvW3NsDRWPDnQu/raG
iRT/Unmf4UIEznrGPAjg4OiDMObU0nZc7IuPLTcZQUFBrtk9VSbiF/bk37RP
xfPLitvOPBxE1IkR7R7pDvw+xPcyyICOZv7QO9d3E5wgM5wjRmciwWiBtm4u
HScFl6/LOtKBLiX6r8K8YiTE1d5YvOgD2iOMZx3Eu+E7LlNR0TmAx04CV386
03H21oY2/pgmHHK9W/gvnImGpZTVWR/rcP3S5htjEhMIjP6oqtlJxaZfi9bc
OhAMWjD/IqpLNkxtnN2tr4agrSj35s3wPqw4ZHl2izUFdS5dUgfLupEvKeO/
5QMXcir18c+fc/FoR6uPd1gHHN1Yd0Ul6Ojftlbag8jHUdX0vNE3tYhuoz/+
u5oKT3L18PWxflCpI7ZPP3dB68k/6+iTFXAU9FoZItaJubnOZX1+PDgLOum2
XKbhe9XP8x+vTWJKtLqlwZWMxoJIA5UYFv6+O9jBNmGi/WjclfHdRH9V79rj
OTqKVP0/jGUrGZDaGf7Xr5qBh/Xff+e3T0IupqY49DUXr2RkswfODsBe8o67
zQYWbGO2WW7T44HsM/LHtJEOspSS3ek3DEwKDrbsv9iHxNADV3KIz5OKq0mM
/5SDQ1ZPKYeP9+Lo2oHbRS0pWDflLfqC2K/l6oUTzz+zcOQMtSZifx+2iysw
17MHIb/tWSpjgIE9OhP7fN06MTxjKSm3cAxSnLa4TQp0eCy7McO8O4wJ7cEF
AkYsqKbYaKyeZoMvd/eHqLOT0NbRfVh0lYymmNV6rtls1O+NSDf2GYb7tX+l
cwIVIL1bo/JCiYJkp/7NXklVEFio8PtI0jiUIjrrY14wsWtZd0W/PwO7d3KS
LT9moPpL+UpTvj7ECVqIVmWMY4Ic/MhiYSbUnQQ7vFZ1oDjxmsLwKA+rf/ru
cSD8/hspiL+2uRue4oENniY8VF5UE79ZNITrwTf+BEvQoMN84cfdPEHwVpMM
dU09shYV9X/gjOH64H8W33PHIWAevvySRx+eumsvWhHXi73vihb8SaxEp85d
hVz3MSiIaJESXrHh8CCWEhvVgLCml8sv8g/j88dEGwkGC9cZK4bO2uajhfYp
wL2+HIfvHf1psjQbRnyvreM+FWCp5Ny5bS5vEOWTeHckiQP7fX1N15bl4IH8
ytR3v1jom9J3kLk4jg3OkhnnThGcusO+9VsVDQeO32rd41uHN4sLKGrabAS9
vMxinhjHi6lH1qO+KTjoVlesYT4C1bLB7N/zRF5nhLZULuqFkf5/7iaqk2i7
y9ptnz2BGxa7/lpxqKik+hbQiDz+Vzky9N+pEWx4v3zM1jEXvid7KM9Hidzg
vWuZvvWMyM0lIwqWA5DawQv+Gc5D9u2aWyKryXj2de/B7/xV6O5es6VxVTeu
6ng+t/OqBemx17KJVBaEZFg6u9raEZOjpO+qR8fzewfUDEt5OORZvaX4Bg83
Z5fmZoqN4fGTB6abnKlgV5Da1V6RkbLeyrRsmoyPz5bv09Ntxl4cHu7SGYeU
/kx48ygVe+s2mF8WIubsMTGhio9ZmLp1umDIoBk/b2QWPVxFgTPpFS3XpB9k
E7uUMat0fFxiOr/pMhvDOlUqT+9SsPCn72y72AQGJ9cvmjck6lW2llV6hoxH
tvVB53P7oPR0r4uSUhZ6bZMu2o/REO0UE3dsLQfOl/XU2//rh0CixKrDIXlY
ITXk+dg9F2df3TuU/KUVLVPV+vn+HGj2c1wc5inIL7c6O1rCAelD/03LqxQ0
fDpYlkpw96+VzesX/qJh3tIdQoYE/wTzL0N2N4p2ycw4ho3D5xC/xbHYDvA7
N7BEdBj47nFu+U/6KLyoTgp+16vxwPL3mc8eA1B58IW2ZIYFRDlGa7/mIabh
lnf6fhZ23mR7U1IJ3/JeOff+cDUel27nFH2rQPuWpI5g/UEwVzf82fC6BS8Y
evdKJTLx1CglubpjAlLyK2RXRlEg5FwbOHKR8JSvusXnVjfC2jDZYbixF53T
nmMGtC584Q/XWX/7OW4a7bKT8xhEff02Ojs7FqkHNnoVnCY8sMCjNieagV27
O/UE/9GxaqOc0gki36NDnl1OezAMKelfquWVPVhWoHDuz+IJdPnmPRX3oWD7
A2MNpXkiZ18MtrP3haAwQnbM9Nc4LnzqlTZZOgi5DyyFe85t+C+o2ypRnoX6
ofxV1jk0JIno0M/vIGObnlOS8f5xBIu6Hj/8owTSZSb6PmeHwQv/UNG5twpP
w09dM3/bDyn1mPrzfoUIMPLzXv4kBneOZK/cLl0KiWdLC12miTxcq6XgTPDq
XoGbNuYTPTjjMDNo9nkMIY9eLNW42IP1BaP2bXsisTF0c6RdPwnvDVrFanzi
sLbyV5drFh33LEQUG357wzJ9mk36xsDJINPK1XI0xGbMrVZMH8LNK8s15wOa
cTOhtUJmpgD3Fd4yXziXIU5M7Hx1OPH6ss9r8jcVge97yI6Dy+nIlvm0tUSG
h+KgZosdL3sRX5fxPvmZPT4XPi4XlaRB7/VLFYnTHNSVDLgoW43B9YOghPlZ
Gta7hsu36XeizUrnnb8d4RdThp8OhLYiKZER5fWCivvXd9XkEXxzS/rp7w0y
rbhU+CZMZooCs/smt8MOU6H9W6GzVSYTi/JXartdpML6ifN21QvlcKqXsEg5
3I83bJGFlot4+HzpT8kj3giYUSvNXywcwOv+LyZlXh3Q4ExFKnG7ELf6hIbA
KTLOnts43XY3HoLuDnPJlh3g7vm2dCGJjjMPyoQm/9IQExy8XqiChFVrVBl8
R2goEzD5vuPGANgf97uYEvu2X63vRTOvGUopLVccgsMxtsol57z3GGy3/xp/
JFkFR9H1gd2EX6uOTCYOcAZReGLLkP8+MlaZp3htO0dBVxrfggZ1CsRT08PO
K3+ArMPGAQ2CV2qXLORUhKXC049yWqiyEuExr7xzXzIh2xqt6inQAqmlZyYu
B1NgOJJZ+rG2CJvrywSr2kcRtTv73/oLFJQGRNPuhk7grtgLQ9MIGvjb1N+e
jeZgol9jpciXShj+57XV7BAZFkHpR4rzB/HmHOc4iczGqfi3re+Ux2BvfZ9+
frYXB7SKI56KMrGIzvxN7hnE5O/Vu65XpGLDgOh3n/Vs5K7j2i580ISDbasS
s7f34/74cUlaFhn2+ed6JTSZcJNfJ/jjTgZEGmY64n2p4NDNpJ/ROyGbsSqp
7FkjauonmA65XGQoJd5cNVaM03u+r0hazsQatIo4buxGmGOJjrp2N1qtAhqe
zLZhoy/z+Qd7Kg6Ms/rHmlh47/zkTmHFBLKv8CqFtQdxbWlp9+nYeGy8YdF8
/u0wHpI2+1SVV6L/gA9NLIuHzSGDDdxjPHwdXeuaok7Dt/Tlhi4E1+wa/B1c
EEmFhYWY3ZodJAQq5UW+/sfBhYAj/urvOdDbKrqobM0ldI889BGProbevcx0
+mk63lXZvqtjT0Brq4tL1x3iPv70yO5VH8StvDDLc+G9MF/Ox5fWPAZd8WWl
U3dp2HNn4aJf2YQ3u5/rbHlAQXbsnSczIuN472dxI8etBW4RufrTd5k4Rs05
Rw0ogLlD2oeq//8u7qEB+WJiK44IDXvxb2NhOn/vD9I8CefyY21OPKNiUG8t
Y8MKIo8LEt5OKfRgIvvS2VMLqPi7xaJblsVA6g6xzSK/qUh7WZ/TnFqDxP+y
09w+TML2yo8d1v/Y8BCOz9N6wECokt/bNSeYmCBdEag6NYbV2RMOlvbtSA5J
a1aSy4dVqm+4dAwXx5dP7v+oEwXLAs/UXMUxHAvmi7ZK5CDYajdSAuqx+Et7
zcmkSVjxfVp37v4baLtw5e//pUJDmhZvMjGADe8uvu46ToKu2qmT8BnEeZXe
fbZcHiqC/q73WJeFBMmjjiuJ631w6uvzOknHFc7jLUnsPiwL3NZ77+cE/pLD
C98u4EKfnxK3yZoN7ckNttK3aJh4/WY8IqQScoK2V7NM+rAvme3ssZnw5Nmn
F/pdKQgafuIvt64e+3aaCDdE9WC7y7+RH1JbUej4tO4hwa37358wk6bysIWU
4ilxZBC0d7G5rTt5oCemKau0fyE49tzD7xNjENyQ8E3Wiwtd4ZsiajMU1Cw4
dvQwOwWp5ArP2qdEf28qNwpIz0XM27caGVETuDK4wOQ4i464E68+GoVS8TqQ
b2+XaRVyGoe9ri7NREmnzHI1zUQYDw8N1A+RYL4xZG3UVhbWfW2XXbOODIVp
qwDrBWQIXYt4vautA05LujY7lwxDg8/+/AkJMhz9WqsHtNjw3zL1dU64E3w3
lM+lhMbD+GzlZ18KGRMBmnJ9DkxI80v88pcYR3u5m5g+OQdLThq/t5jkoq34
WonG83EUPTWfXLyrFvlu4qd+0nm4PhTovikwE8yjb1uOab9CS2t59+1ZCk4c
t3z2SJQDXQm5HyPiZ7H3+zOvNFUe1BaF60RdzQd93mz9beNUzNkb3eXnjkJV
8NJYsvUI4pMFo38qsGH46TRp+xMqmtUrrVNH/+/lF7be+0HDqNgL+TuyFCiL
GQoJHhvDbNz8mRNzJFRwt4skBEygcuXtrV8XcyCtlWP4R3YUN+5kLOteSUZt
nbBmzaJ6nODKZmzzpCPV2D98ieUoFnvO77O7PwRlHYs7e+/XQH1OmJq6qBgC
fc4HfN7QMLhL7KG67RD2Oij7eFXVY3l+0Kbo+gAIJia1RWWPgedAWyiRP4nd
VuHXn/Ez8MNcxvbzjgaUzB2ddiSed9NuuaQr/ZM4NRy27u6VdNh5/87M2EKH
SpdQb0PlAI62HJr2yiZhc5YQ7csCwt9cHj2pkGXjibFy7eXjk9gx6cJxbOBi
oBATv+/zoLz4kYVJWCVsjRtnqoyGoKbmenSvCAXGTuxlThvY2L/1R9DosThs
Of4zf2QJC6KR2variTfPr9yY8pxLxR1P+Rcuu8IQmrDnw5IzDTj6YamiakAt
6gr89y3gTODjC9aX4AtsvM0QHLaLb0Zptc/j5ypt0B6x+DNFYkNmZznjHrUa
nZV/l7jps/HsmQ7T/isTN6ZOVDw5Q4fFf0Pje1QJb7vZrbeE6EPL6Ja5X4ps
RGqt7gkYocPbYYeHYm0D9kSOhJnFjxD1nH/2/+fbH2lSrpMt48B1ROtVqkYN
puduhzbqjeOlU1fQVcE6bGcpXjl5sA1jxjcelTtVIirRzGwFaRT1IRmukUHX
sHjBwgLlph7Ii1xilF79//cxJhfsnnfgfPnKggliXhnIbRmLEyJjy+gSxoIf
VVBuOHH0ztww+nd2tvvb89C7vW/j+k9sbDxtIWg/zoKBi8VZdT8KFp9fdRzT
1fjGXKK2T7UK5fsNrgzcJLhinXri/i8ZOK2StKlzwwSoZzQWD63thMEq9yen
jw/jxtFhgXujfbhtkjWvZTsOS6OfSbdK4tHH3qt3T7ILVzsPDexcMAF69IGL
iRiH7M3lLw5ajsP6K1t1xJKHRVuklZ7spcKHtP1LIWcS5/QD0+7vaUDQL6Wc
M6fYqFrXwq/4vRKfEm2H1P25EDi4VlzIsA+hpxOzP5cGQLk3euNaLSo2r7AW
ijvCwuoo+b/t9k2wKVgdeHBuAH8z85YE81HQTMugtm2ZRPfPtMInzZN41mXi
862HC1FNRQUj3WpYWfwJstdqgqrPxuNpwROQGckg5xAennFz8dn/NnTC9Wfx
/alAMrS0DYSzWPWomazN6JuiwzyI4S/eTQd3XUCnVtwYdpaoirdweND6HjN3
J4IDqsGMUIs4BYdubPspQPDgjrdyzw31aai3aj72QIGDwhuWjGzyJKTtu3jn
W9kgsTPDPw0PQvOHz/Ji42HcfbAvz7B8AMfvyy59GTeJnbNmctG6o9hgQhPq
iRsBrcnc0HBfG/4w5Tb/6R7H1T/CBzaIUnHDcH98tjAbsR7H43LKuFCoDf8g
t74Bpb2Tfy+kDCD7Gr3G7XQ53nR2aOj0dSCqb6C3I4GKEzbBHY09A+A2Z7Nq
5trhGHtTtLObAcuLX0abn/HwI+QDKSqeCTvp9cZ1GYNI2yajIk14DlP4Qlni
VCVW/BexKdCxF2Fize8eq/NAG/r39qvSIBJXjLw4fbkZkzFxfB4vOVjan7VL
q3wUdE7S1/BVNeBFvioaJjhsgaHmgwyBDryOe+NxqY+OC4svX64Qa0Sz2Rn5
pNkuyBXE7f/4mQPm4Y1+T8spWDrgst/0zSSaOsz3Ljw1jq9rctK8vUmglD+X
P+bbiWdjX4vmROvgfjXp9M7WcSz8veOPvPQ4Kjp2cQ6yOGCsKV5cHUv4hGOb
U5PoGL7nd7QXt/VgS6nTkZK8CSyIts11KOYirlltJYtH+MW9gLbmpBEYJWyy
O5Q2AOHzOwqrbrNw/ohPs0QWG1oXMmO1DJoQrPYrdy8fA2nvrM92TY9h7r15
oW4OGf1lYm2tRwlPiLMrq/9Xjbha1oZHp+jY3j5//4ANGzPmaUEfL05gt3Bo
9PO/HPCtH6IsUhnFsHSR5DmXYtRdZ1kIyjVgw20t60yDC7i41vOskEIpHv72
y9vvScHtB6Lb4s9yYFfptus0rRCqEVW9wxurUXK0vGS7aCM6fcKe3VnbD6WP
NrtYvuMQFv79Y3xjH6KCBmquxPXhWvzdm8XMaoTduvAwxZcHC5qsVGw0E50K
EUlfpTjg1b/KqRNjgxsYcHz2EBuvJssHeBsLoZYtokn/Ho45N7qCbOokch7/
ybyuz0VWkJGIVBoV41P7BePVJyGy1in43UUGdExi+ZQ0uTi67pb2TPcomr66
Rlc79uFlxCn7OYEJTPdmvInqZWPnsdUdj6t7MPBqk9fJ6mqYp6zXfjBF5GiV
+dOGwxUIj1vm3GbKg4O0TTHFjoXo06MLZL160M2s9BPbUQXB36n6Je2NCP9Z
JTaly8Uozbqp/hMZQSfr5cRW9sBDIDrn2cMi/Hi/hX3AdxJUF/cPiXNjkD/W
Vazp3Y8C2c6ICe9RjPN/+ZOf6IvBkyJrhMM5SEwNLaJLDkNLQFXVs5eHT3nq
r7WjadAvT89YEsrDuYcSh/qIufSWFK/33wwNjIQOztH+EezpOqQUoTGKLe98
qwwbSVi0N6zfIY6OJTkBBYeWjmMPr9GI61iFCpX4eWzvht9v82XuwyTcLKn/
cKKega+9VnXTajSsc3C+Jh5MPHf+pJ3ZXC/uS0UXiRL7UXlWUSZzRzz8KvmD
PU2oONkUSNUo4eCaU2bfjSkWGnec1VzqWovWL6x6ReEayNXZ5eSOc7CqbaHI
wPEapGtGXyVtrkcnW+6axpIxrP3IK/3e0ARTSnjzCiYdJlRffY7LOBgDAvZX
txfAO1UhXOw4BYe3LhFrGuLhoVJntloYBcOLggImlxFzIXDAp355Fj6QfAe5
iu0IOX53UvvSJKreysr0ebHgb+FLTqOOI/mjkX1TzBAes8ObpjQm8PXK7d2O
BfXY/uzHnKciB+OM6YFpEhVmpLLS1LBxLKE4e0o9i8byqjD9WvCge4WmekeM
hEvBEfa3A8i4Kuw9pF1Jgv/AYJ/BMSY6zAYbv7xnQiJFbH2AFBvTHWWVsrf6
IP2le2HPTBOeK7blUWqYUF3i05ov0gFparv5ppQxKNMZ5S7OlcjPCzByzCRj
qeOLbzo6vbA+nKZ1VI0FX32ndyevD0F20946+bV5WPja1uZ0PwkyV0OSpvio
CF1XZqYWMoa/v5hem0RGoOZ8nXffgvC6vynNsavH4Gu5eYmDKRU7JELJhj0v
sMnttJqMfBvmap1+rnpbgDnPY5obBTjY3vvuxvtLbbC3ezL6w3oI40GBXq4e
DHw3jZhmCxJeG5NhGKg0AsckQTnP2GooZk3H7d5WBYuMYl/pvhEYShy1tjnH
xRr3whfzRC6QmyVp/Lv74Gf8XEVJ5zPomRcqrO5zoGQhXhH/Xy/M/twzXBnF
RIpWFy7pjaDlKlkgYLofF0ukpszqxjAzs+tbybpGdB2qWG3UwYHY8FAOZbYP
uyueNobNEd4lJ8C7El6IoT8eqtof3uAHReK3bEg5OOne39sI3uMyP+z/md2H
Gk4uyStgAJ7KzgPeK+loF+SbTN/MRK7MqZEc7Wbslvbamm49Cc1Vsg8U0ggu
D9GzzdjAhQ7F//EWNw6OX+kuaPnIgYldcUnLdg42Xy70Gl1Ixeldl8kD5bmY
ftOjuVN4AB2mEbdWXCchgWJucrjWC6ksnbLPphNQ9Fd+3E7s68/eqYV5zTlQ
ajildGAfHaYXbd+X/mPi3UMn/WNNozh3cO1549dc7Fvbr+46wUA2RXzhE4NB
OJzo/LhvNh+N6paibxZ3wVm0/1B5FQ8ZCd0Klub16Mm+KTuyqg6Zgs8WJ/aM
Yd2skgN3/yeMBPULdev2oOmpaHTX3m7YJ7YcGUhgQEw9vcP2IAnLfb027FVq
w+TP6B1tRL59n1soGz/YgUDSjXy9pmF84u4XPfy1F4GjTNu/LQO4vjywnN1a
j3cfRrPPbWZBYNXByxfujOF2WumSkwsmwRbYujvjTis29XpsFy6LR7LvYMRj
8xqIXKRZfqWwYMG0q3m3jgvzsp9j/D6J+He7YnjJfh56dvm17pYm5lrV59tT
fr04NPfWSrabhxXbe/plY2gYoc/NR//rwv49wi4b3lFRSK3mTmlQIBHDkf2Y
NACBH+Vh8439eH57WVmUfQ/eJp5+5eGYC4d7Fo/5qj5Ae8mElDfB+4nkwJKj
vyqQHGNVNGjYhYvPFQ+G15CgOOLobcDKAu/WScrHUYIjfQxyfne0Q9SwwN1c
qgu3JkNuuGp1IPLFLymhWi5mJLpcNaqasOaUVrF2VDcYpRXseS8afn6RO7v8
ERV0RTuxlBvNuDen99gzjQ5e+JOec3+7kXdD8it3jId5+irLAsJPydaxTLPc
DvxoP79BnViXqdyXK2XV6Vjq6qfruJ64jiUnjT7bgsKaW/zpkVzU6WynLMsi
47puXtNvbieEghmN294y8d3B8NsT6Qn01/XNX+oi5tecexYfMxZ/e9dsFJIm
8sCNb48xcV/7/hul2i2jo/5N5bUsaTbaZ0vrXvFXwTxbx8RYgJjz1fV71+Yk
YUU7W1l4ARVTvidOdciNwObKvQvRj2n4FyG7R/nJJ6xg93UZS0xCzvwSZa6/
HpfC1+pdvToOnZr1gj7cfghNx25s+N4FkzLbZr08Lr50vD9Q3MFA/6aR95rV
HPizIo2/Xw2GbMnworNX65F3+aTxzmwO5q+v89eoaoPf7X3vGDd5aNS96vpq
KQOzzLTNrfbtqJRTKr1KJTjnFqei3aYGvb6eSDsyBvOHGs/UT3fCM8xxj9RJ
CtKXBQtutRwDe1VY2I7OArT2RZ+dTaSh/3fwMVe7UbzflK9B0iH8atsdayGB
SVzZ/1gqaC8XDp3t0gVVBdhj0Xbo/3UoeE3yRcVRLiYLAy8fSWxA78B1oeUd
LYj7SOfJevegRCc+IFmdCeHl4hJ7nXpwK7Jn9JYPDy/zHDPMwnuxM+16lqlp
HLReRRRkSWfjMs9Gd/X+AWz5xYrt7qjD3ombeU2ZJJzpXJcpbcnCLooug6vP
gbXLJ1nDGCoeXm4L0dHpgzabp/c0vxLh9T8eXt3eh8Kj01wnOy76lpKG1bRI
iGYO9h1tbMDfl4/+u1/WDum4Z0fdpKi4tNb8rKUxGfV9YYr5D02x3vWTjdv1
aEREqyVX57QjeSC968t6Jq4c8m+XO0GHZshs+pGHH7HQbWx294pJ5I7cyQ//
OQ6KusWpq21jOHvg3Js/dUSdzyR2VUkysL3jfoG9djt87fYmGt9hYfNZ6cwl
D1lgyE8E9VCL0J/d93LVgwl8v1BmsbWJhsKfutRPbUPEPNm6dO/NagzYdBp9
rxvCW4sQaGQQHlL36MSpjbWoff3wVtSCMQiKr9FLeD2J6lJHv4x3w7C8M8lw
vFGJ74EdujeOEX05FVxDotbgj+S2bzlzTIipnPmZllCAqcSlR/nUCJ8p6nYt
W0jChQS7y4o5hE/VrW7SGhjGAjtbs2JPOvZ3f3bJC2iAith/9O+XB1DI75wV
NEHDhcGzsQf4xuDy8GOwVn0XYuVJb1uZDLhv2CrEWtWMhXqfCy/WDqBZlB23
kW8C8d82/3Hc2IVJuw+tOo2JKFracymcwkbtbPcZT0cuXCTtCmz2c5D8k6ux
mDyBcr2JQyN7KLhS5jLhO8XEl9kgdS3pTFw249/h9pkF6brwex6BlXhYtfSy
EbkbNuLWW8+IT2AxaeptmlcvAhRWvNE9NoLyTOczJM1yBK2751ZdPYJG9hIp
A7NxnM9X3HpWcRIeW4VXDG9mY/MV8tuXdxgYrPHOlIoaAWVNh/E2XTK+SMpc
LdpM9OdwOIo7hzC8LqW/6/0QFBfPMV6fo2NcxnA5SnkY77p6aUHyGPReXy4g
fyUjahkCRiLL8cfrnB9Towmu3XtirS+SMXLwwmNnPQbedSj7niL6oPSvKfeV
zQTWlJLd/hrTkJXU67xlWT8GdOLy8mzIWB7yIyzahIkdNQHMq5lVCHIYjTqW
TcftJ/eeWxFcG3aB61ehyIVR6OM9K8YH8Uzyrsh8ZAMyfE/QTd/kgW3YLiX4
j4e2wVteyU95yP6t39vzmonRVpvkzZuGMOj9uuoJ9QE6l61WPV4xgNIQb7fu
l61YZbDPvqCnE4+bUjlL3Vjw0Gi7dezeBEJlPcP97MjoSmBZC7Z1oa7F5u9t
8UnUMYcXxZ5sB3mH7qM6+wqEvOx0b3rGAm064o2DVBWy1lof/vi3AKZ1558a
GBJ8uMMmuc20Ac/Pjt6xf9iIqTv+W1KaibleqCDQcK8dkrQLzsdEijC2O0bk
iH8j5N6JpvLrjiO+9rWV9PFRrN7572ROGx1dAd7dqk8bcGP7CtW86k5U/+2W
1hRsxxq5MuOMhn7YqVFDvUYG8KjJZf/6VqLez1z7GRLPgPB3i7bP7Cx0vFSO
CMwYxe0aJfdf7EqsDSaJxxpRIWu5XXg1vQN2kmea+jf1woPG1n+dnoiyjHQD
XjjBoTzh1vSv2djRPUgIeAVSrkyY5tv0wdFk3XGJKxO46b36arM2D92KQdXl
bZPY8Zp296QT/X8UnXc01Y8bx1VKJCtFRhkNEQ2UjN6lJZVSQiFlNBAq0aRh
REvoq4iQKMrI3nvvvbn3uu4eiWSl3/395fjDce/zeZ73+/U6x3Gxo/eDkfij
PpS+27pJo78dMRWuorevUzE1k1czI96LgczXZwsnynG2INt573I2CBazz13m
O6EbHl/BUeSiaT1TL39nP7LmG8ZpQQye99Luun1mYPDz+YTtVxho/iclUNRM
R3xbBvvCO17Of72lsmzzCN7+GTDdzKLBtoOpVaYyhvNXxhLfTA4hHMtkbA90
46F/g+l/9/vx+2k7+WspDbccClum742AM04NHvrUDyGNRSk326nI3bb8seEi
Hn+Grz/zdn8dLLSX5t0lj0HeziiMGdKDt0mPvtWKNGH5WaX2E8HtaJYQo/g3
duOr5j9hkZO8/YpQXXlWlYGPVkGc+/eGYJu4fqajlICZiQ0XzfeRsLgwwXcR
xR9q1m8ERzawcVPFxkSkKw4O80Yi28zoUH59Iu67YzfmTxk4bz07iMIfJIvY
FRQcu1ldX7O1F1EHzFhbb/Lu0LO0ae11DoJuDa1zvNUGuRV2u8cP8Pg8dV+q
RnUdnIOn72Tyct3V91q3Do8HZTLv909NtkJuUdqjPnXevTQ0r5f9OgQZlt/L
roIm6OwrvjzZzsTt96ubxUUqoSKtE/fu5BUkdux3UkyhwOfdzpX6GzuQpd6Q
lf6xHFdG/O/4huZAYZG1X+ujMQyePDXtupeAwSXHP6y+TYeb5s1z/byecDC5
q77tNhe95zOPbY0pxTzfSEncikaoFqU/Lz1PwccwoegHBRRoS63J0awdQfnr
X74xaiEo2ZonIbyXg1ePlxus21kC7WqtvLsJTdi46+5uHZ0EpLz8tPRv+zDU
3vJ+hRcLSSR5UTP1HixV/yX6z5YFb3nbTpv4YYgt+0PN2FCDZJXvAhcV0vDu
kk+cRC4V8Y4G2Q9KeuFQGuthbUTg9f3n5VFVRBTaaC77a8iBvc+3ReRwKvhu
qhxR7yBA4KE7U1lvAA+j9Mwl91ERpvzNdnf7J1wckv+aJsUAfae6zJ08Nv4t
lzydw5tXV7KwTMF0DjSaHhBddlBgvYiQ3HeSgqjbH5o1j40hvtmN8O7tKJbo
GDxcl0+HiEKcke3NLrwzSirWYtIQ8o+vL3FlGXw88XT85yhGu7IPH3Fqw4Jb
Srnizk9Y9VIxMnmUiqE0tseXg0XIXZ0d4c+lYJ1xYarK4xy0Oh+woYw/gdzB
2zVXeM//WsrcUfqndrzs8fJRvNgDz2P3lONFuCi8bLEup4iG/4xiV8/wuKKG
lHj93KIxzGXplL4QZcG5sZNiapcJbtzP4TijMahdX/FxYzYXac1vSqgTrZCs
0PWxiG9D60bcpqzrwvEQ38cVag1oilJK2NxfihVMG31dIhlXfQw9ZuK/4/hU
r5iebTXKtJo/FH7uBVerVP2zDhEPN8jNvOnqwr243zdOGGTBfi35mrpILzp+
Gl82sOcgLm3J3UMvvyKw9gnnHY9HvJ5wlcZ+9sFGpXn92v+qUfJfSaMFHwWr
rFNWTtunYt8KtI3RCDjpW2NJqMvF3N3hvKip/5BZeV+khe8H2o6wSKNDreB7
ff+Y2BEGaBe3ZexX+f/f/bgu2nKbic7xrPUxxFJ0vvbUtwyvwrgOU/bXCTJu
rNExOD80Bkk7/7zAMSqWudkQt6uT4Xgif+/p6nYo2s28StMeRXWSiiClsAea
3hL3J+rGEJeiuf7Mlha8f+8ZI7WXhc1hcrf4KBzITa7TvL6BAIbZyrn5OiJ6
MiLX9/JeT4t4wQHt2QEoCwifslvTD5lLe1caSRCxX6/RoFiAhvnQqLI4nWqE
eAQNKlSSsJNP9PwyBgMGVBv9tyEsfHwWHSBk/Rm6sX0Rbwv7wS//evqUez00
D4TPMzvrwRSmDl0ntCP8kihr7Q46XsVUr2PqsJHsutU9yGeU54e2jIo3PL6X
pQZo7ikAJXPG/D/XMazqymq5uZ8K5gdDr4pkDo5yhwzyDEdB/Gc3Ur+hCHqK
MmkRMyzwSzp2fUnh5UGKrYXCcC1IC99NTENIoIfvrrtRUwGhC3NH+fZ3Y6PX
iT1Xbo0ibSF60vgLFff+jji/Km7F1AuBGe+3HVCMeJJ6g+e3brvvZ+8SJmLp
SJxLRUwSLBeJOSjH+YMUGPePv7YPxP8yw4/xvCfIW+/lEl5uvvV6tnbj4WzI
VHyRz51pxxwxf1+WAwc7GdQpETrvTmrzUvk9SnHw5lSrki4F/x43k2VLGfhT
23TYg0vHkguB5pauo3jpv64gYjEvH5bt3/rWqhV/ST6d4X/J+GsjZZ8W2Yqr
om2PNV+zcN33cayPHwE+tesNYvX74EsTyJJ+ygHh6s/VUvco+Ht8GdPoLhcf
XZ63PKN1wfuL1+ZgHncNHdm7dcvWDui4fEqYPdYDoT+bY8vrWHjx/rBvgy0T
eZfKjQN0rmH/F/WNwU/6cUmT72vzkxr4bra0rDekQi/mi4taMW9Op2vVtz4m
oTyAXO1N4uXgcU+R4E/FCK7Tnrs3SIdg9MltFQmdGLv461XiBAVPZA60vvdn
QiXf4e6RE2y8M940RWyiw3imkvA9qRMLO/RkHy9hQ/FQ28uy4w2I/Lt+xXsz
BsyrPzyTuMTFo8CKiZ/9HJxXP9ska8DG31cf3HbbDOH8vQQ9n/xMfPah3lfr
K8C0k9DhUWU2RrW9zuh2JeBWuZbBh2wWiMFHNbLde9Evk/266eAo7hkOc0x6
hxDiXd5nXUUA4W+yantNK4xNH4WdvkoHyUjeR8q+HN/lW42z2ugYrN0YFJ3f
B6VwWdkVsizsFzXsqHnbBXHDgczC6WGMOKSe+ZAxgv5DiTn9R8awTOjxsLEn
ARn9rW3HZAngqkjuGlog4JH0aUaxEA23VbY6/7r3DS1rcjv/CAzg9w2Nl268
r8++H4kfoDBgVN9xgfCfPyaNNn+3bSIgZvnmP/VZ8cgzPnxa51kzWOrCQlqu
RMxUhtUlLD2FiBtyEbeoNNQ+UeLzujWIKzmBZoNJfej8cVppV18tLGVWJRlJ
9sIw6bdD2joS3sWsW3raLA3fV2zW4OZRUNS/Q818OwtXHUy+d3WzsLJeyQ5h
//+cWMsbL+/VI9JejzFu142YbeMrrLZXYIUowVPh/QhCNs7eSJSho+OOv0bZ
dzZK9K8ZeNZ3IM+dfusaeRh6eZ8DX0e04uhySR8HOxae20ibXl37A+5BtFQ+
fg48NwySAoNacTercHNATwFO1IsH3RAkoyjlk1+IBhHbtzYcLvBKw1NBzutG
dyoy+cpNJb6l4EzWv0Axo2FkZDjcFkvqRrVGoYMnz3decHaNfD9ZiSixIVLt
azZ8PrnfDe0rx/SDaLe/IgTkcay01H8/hoZEv8kNf54HLqvsvbe7Bxv5pffr
XyLBqk3uv/d2FBScusNeYsrBE+27+t9v5WNwbkl5z8IYkqpmnrusJyM4ZNy+
Zd9T3JZUzN4uyIS6o/AQ5SkJQdZz1EVzjpDd1utG1B8GN+XIiT2zNCRZrTsh
s4oJ04GGwT1qHJD1WTevznKhlqS60c54AOStdrRP7VykrF9wMJGiQ9fu7qN5
sww4W968+m6oDT22AePHA0Ywkbo17W4LDduV42iXE8mgqfTUiJxhozo5ebeT
HRtlk96tfFcy4Nm+Zc7OnAKdxUYK7/kZ+FoS3X30VRMGd2yVo0YMQk04oshW
kIJy9ianq3McFBlHvkseIUNZz1p63HUQXu05awqTG2Ay9+BWIX8tVnEfHHvT
SMc+Q7vUvcIEUIeXHZMpb0Ax/ajQghUN28pl7NkzdIQoORj/nKSgXr1e6INU
OcTuK36z7x+G/4aUzpcunfh4c3eE50YOfFsVtPiKRhATtkdEWYaEmUZzx7zE
PgiEbX70Xy4TTW8p6+Sf0XEtZJwduJoG436RSZWyKuyYUiIf6u6H4AkHIebv
AiTE1z9V5O1fl/PV+OhgAgJsRh2TNLlY8jbaqjmUhQ5H5uVf0qOoeMC0XFlJ
wYtdi6/3mAzj6NBg7ZFPY1j9INZ6spCBsPzW3+vrWciclnO5v5OGHlPV6ovy
RMg8VFzp97Ebpl/urugLJWG1/1gb/0oGTryPLhPifAJri8Wdj9p0nBLYYz/+
rxqiv4pMXc04UDzZpCUy0AyDO+cSLBfF4Vxr3C9/1lP88fxme4xOQJRKZKo0
oRQFY9oraSta0bu3krPJewTua+tmYrKICO5U2D8S3IwVL1M/LmKT8TXOc92y
ORpOjkMm6UYm+i2cBX7ykTAlJnJg5XYG1tA+q1B498sSMk+5ldOJ66UKKrQb
H9AeP3vnbekQgnwsdWV0O3DR59DSLBMC3OQ2v02J5+KhyqaDyUljCORylfxp
xTB9GZBxeJaIhNoJASabipng0ry3QWR4v408+NupEEmO6QZZorHwWRAeJGeN
Yrf+scsHBPtw8MyOHceaR9E1o5yZmT2M7JBAqfPKvRAT91wVw+PaiLR8iUMd
DDz+G6puHNGHxzfO8ReJMSDLd7U15AobfrWSjAtxHFjW/5k/9zwDD52lK9TV
6bC36tocLDKE0me0RtOlY2DePaebrUSC6MlxdR/efmj7VbZ8GKShJSho+X4V
IlKOT12t2O2BgMu9toZfv+Jnq6ilnFEZ9m7nlFRqDwDdUzs9pLhoFyWGXqgb
4HnpsJ1jExUDlVUa4bz9/vKjLl3zzggItAKS8vbvkHmmlJlIuof9kivkTs9w
8KGzWyzBKwfaWkepkoIt+L558XTojWys4IY8bCz04/XidPRFu9dQqLjF1lAd
wsHw1c6Mw2TM+MnWG37qRmHzweCErEE8Dqk1eic8BlEJ08gTTkxo6Dy1vriF
gcDfMU9qHAaxVrhBif/mKDrkT/gdlqZi3T7pmTm5PggfzZAb0R5GkZiT/Rnt
amTUuCoRjbnQsqpuopTxuKzBI6vrAhcr1D27wtqL8OnJsg7Z1VxMHC5ID6sd
RfTPcxMENxbC7gxeXDnNxHeDZWb0wyzsnqv0ib0xCnPRYXeLX0wIahzqZFb1
49P78k9z/1pw291Vm29fK36e9DJdvm0AT/nPx9qY05Chgkg7tT6s5bv6AOwB
aKo7X1Fw5CKZqDfr+KYC/p6na50ejqHr30MZuSc8j3om3rfdmAB9j8zP/BZc
dKSMfg7cSUGIYAX19vEhPCj6oGzFJCAiZemKHx+Y2LF1qP26PBXdBpsME4YY
GG403H7vPhnLdm1Jiuftry+n29u3m4F7Qn6Cq9Ka8KzIoUQpkIbFH5eVpuwn
QdaI8tavmwQHoaRE/uNcKKqdVjcY5fFQxLd1pkw6BFpkFE2X8LxbyJPucJaI
/Nb7F+ale7AqTj7mz7Ix6BtM+lyrICDT7MNJ//4RpNpuNT9hyESv+rXZX6lj
uPpKrH8kmAGRc/V7n7rH48rB9Y7k753Y62PP3beKgWLxyD3BkQVgRa+tCfhc
B/Ou44vvDIxB56juoQ+uDFyl5ooN7GmD/EbHbTZ/OWiWohmePc2Gi9kVoYFz
rXiv5vnrSvUY8mQKAizTuTBYjG/ZF0lwXy/SpPN0ECncC2abV/A8ViFIn5oz
iCdX+CeJpxrw+fq16nhdOiJ19VRVyzkQoHh6prlyYOfx9US3cg8cFxZdfHW2
EI1pSfu2VJXCc1+Q4ZfNbHT7mB58nfoJ6x7vySNy2uEE+jrBgnAU9FacOlxM
wUm/n6OLSrqRwqnU+Co+jCPdEaUMBRo+ZlxQpJfy+vmswgULmUH4aRUYfXBr
gMfZjTfWdP4A5d2n98GiNF7utS2+/Y2Ja0WJycYRvJzd+VuZ20mCkHjR1J4r
HSgUafXT7yWj6uTesc+2XOhP581USpAxd7BFsC+wG2u+ThXFvWjHtOjetZOd
TEi8W3fmd/kIRCvzfZ/pDkLurktX2ppWXDsZq//Uhvf8+beXHTwyjOOB78f/
XqCCMlN0pyeZheDSqS23P+ejWu3vx5zFVKR06bZKRnOxNtoq1MJgCONCYqE1
d1iQftzbpvWFjPUT1v1ius1wTxis3vWLBH0XQz3qRDGWkrWGz2t9x4FMHT1q
PxuZ4cL7Z9dysOJP4nLruTIIfjt9ddHjAVSJm2bPviVhywFx0pcOMt4O9LRV
nWnDvGCE0LIRNv4UN7f0kcqgvTKbExPch0vRxt9sj1MwKMpvVuM5hNHjmfw3
NPuRKRy1cEeO55nVKwTS/5CgMsgv9C2Ximexex2O/OnHk/4Jk47BRNgWzN2i
e1PwtNeuLO9pLsZPKnAeZtbghsbGwa1SQ+i5HvrCJYaExU3B8dIdn3CrJPqR
+4ZW+P1bqv7hBgFbCO2SagcG0Zi9vjvtwSgmTywEGjwYg3XhpPFEFBObBaf8
6oer0PrNryEpagy7ooXWBCwh4qmzZuKh5CG01TgyPpsPIyBUxF8usAGbip9G
eZiUYOXX+c4teRy8l9/MidVkwePNX41dZ4axaPMboqorBY7OK2Os9digP/tO
I7ZX48xAfPGRnb3gXyV4ecVjAs59+W3/wnYI9pPh7GOSo8gok0gi53Thv8u3
jiXw/PpL5yS/6l4O9MTzX/TVV0Akie6935YKC8eCyLe853ahnK81a1EWli5O
L1tyn4u+DuxyXvsNS28KW9F+piDI7jIltH4U8uu8G9NOEmBtSXhzcoQB65N8
v7CUg4d518SdxMfgy2cxLCJHxsH1FZNXnXvgHFu438y6GWtNrG+s7KYiVN+i
9lvzIKYVRSODP3BhvvpykuAaKnonyr1fHW8H5Wuop9AZJtaXLT0cXUqGVKWl
4HWTIQQa93notnYhfKPjKrOLFEhIydVYX2Ija/4nLSaTifG1fXxNr1sRopxp
emqMgs61uauqPzIRpr3PPqSKDlfVZRGnH5LRvbpX0tu8Hiu2Teu2irzDHgpu
nC7l/bz7h2c0Zy5+8Y8kBN8loXuHp0C50BiGi1ovGmwh49JzPhsXi2bERTQJ
0Y1KMSx6xWUHz8OffXHK1lzFBuvLcE+oGwd+d/HO1rsNAz1bGh1+vMX0iwf2
sz2D+LLkZpRnwCjUwvNzBy6Q4FS0ZfbHpXzUHG0yss7hzZ8tpKvg0433t5Zd
eX6XCUcvLY2y9GZoSr4cqxunYf/xf08MyinY4NpKZI6S4XujaxM1tQGz6ic8
vHawcWrAbtbMnIqXR5/39J3OQJAqyncTidAhTG/yEGsH1/1Q9cSjEQQu3jut
YMnBN5nes8tusbDltXK+MKMHz0UPrqCcIqL60Lqt4+/GwGnw3Harism78zNq
goFskFe0X3erY6PPQz4yuTUP+8J2tOrfpSHOVbjq3KcuaL1tPDUSSMJylscO
lcUtuOIZ79vYSMA65Zl50giR52tNTbE1TF5PvVCNHiRBWGv49ueyDmz4nfzM
OYWM19lfT2hWleG7fSTX8CYBD7ip0xH/qBATsmXYHe/B1qwjP9vTyNhwyeaP
Io+LWzp74sJeMHGrSF5ajZf/y9TlVa78y4eNLBq2P2aBtPzSLcUaLnpIppdF
96fj9+Xqwd/nqlHuMmAhe4QO//aiFyG7myC09KDQbd7cAvkdN0ULj6J0h/ex
N/5E6C4ErZN+TEFqgJq2UX8V3haEW84fpILkMK4w8ZWDq7W7a4L29aGWFe27
qZaAXyfU/VI7eM918Te7i26DyJtkOiXFkPEvusigM6ASVe/GwgaVOBCPmd7z
Sp4F+nrJ2tWSdOz8enhoc0UVNk4QU7nlDGT65rna8O5iuVSG2eRxOl666Znt
O5SPK+fSdG5uHUO17R2r5WfrcDnuabroPyJa2/z5LpN7MJVwPiRmIQ07KLYN
ac1kbI2fDvnzkLfXsqSGp5w6hO68cis1qwunHrsmFW2ggOuTd8GhYAjaEedc
72WMwfKYv5aKAA0ufHZk7cwWoMG9UsCAgds7GRf83hAQ+iPm4zEyHZKl8F6I
7oFNVn3V+tdxMBXb0eK5vxuuJcVcK0Uur4QbYw5c7sUe04ToKbcWDFw96HHi
YgtWNsq5dtA7ELJSkeLtVQPa+MYp9uAYTqY3WRPGmPh4UDjU3KwFmjYqHA1R
IgpPqNtPXWDgjGrXNTjx7tBLlGkwy8LoQN6BGwweD8rGXnm2uAfrgu/PVWbz
+unHhn7zxgrUWsXW2/8lwa/c1k3/IBFnCpT2+BgPgzrRqh4m340ZzlKNkJxG
bJNacstYlgB+89EOMYlSCN8+YzLY34OrCrIF5bMMlC/N+O+9dyuMC6g97ltZ
mD6StejIs1TwD4UsGpUb4/G/ZtcFOxJavZ9Ur4t/DMsDlg2uygwc+Pf1ROuu
UhgcWHbz6hIaTEsCleJyu3CvwYiwfQsbA0cuffQ73I5fTs4PjPj7sPpjiJr0
sW5MRJdskd1Fw0Yj0aUjG///f8G6mqkGTBDHd989zsfCv6MpG+NM+tH8TnZi
ksvLw5zPObqHunFRDgdr56iISuzO14j+hH/JN4t3/x2FbE39U1+ZHKy5ZOFi
0cLE7OqQ+xf2czHXPFJoRuCAUXOoYPwRAbIWBuPVz5gIMqaWFntVQvXk7a8x
7Qx898XRwIc03PSaHrn9jYBPcpWYa2+BfnJln00qEVeiV62pn+rBx4+FKomy
1XButTt+5OEIpOyzOr0DmcCgpv7DIgJWunBidVd2IGVte0RYfiYuqp/MXq7c
B+Yi38c+ztVIXJsr3BVEROnzpnuz3Z+Rzsj8cDyMhkJ9A597hVl4k3sx5mHB
GFau6b4YSEhDtmzXyJ8MOlJGYsOidpHgeUk5NXsnA+t/Eu4rLrDwotF2lwWR
g0VWdsck83gc23k2+rFwB6Zo3GQ7wTF8NNyV98u+H5FS6Y8u3B/AkNjw5tzZ
EixZMrtmXrUKe4rHAu59IeJV6gb+nXxsrH7Bn5l3h4FzLMVQ+8gsKEdP/+i1
qsSq1Arl045UDJHfmdQNtGH8uGdyo+1npN6VUDiztA8PBAY7yr+TMZzHXHZl
5yhWxn2IZu7hQklRKy29mYSbe9tmtuRl4KplrUXaP96cXw+tNh1Ox39mnXfP
s0cR8T6VqvigDXWDuuIjv4bx8004u9mhH2ubyB6+7Hrw7ffJuMTHRIjlAYEd
k90YVNCujI1ugcjtM28pEmO48eZ86jY+DrQUolouLCIiTTV+lttaCaFI1TbC
nxHcCbTS8HSux3Or2FOTm1pB1Xj5cWa8GM5+Fyt31ReA1J+fI8MmgjbhoLiK
SMZeUbOzJm/K8YJrofI2iQCVy4vGGcxhPIr8UGdHZELodX3YsYMZmIp4mqJb
xILs+08SISP12HV+4TGlpZfHLU1zirvGkHbF+E3fIgpeGZ+JW+rWg30yackW
BVFwePxo9cSHfhw2G/a2HY5C8uboAwmuA9AvezTwp3cEwi4a0ve1WiH/+VLo
4gkCRqoIlt03GnGpoXi1gEMLPu/77+IMtxQjKsm3vSb68Z/5w+Hz28bws1go
nsPjwfMvWsuTwrkgxz8M2dTCgsCrX+Fvx6pxQ9m1/zmPP+7q7j6luI2NXLbg
7CjzEvSKzhAfLeLlGWto5w6bLhhUJ5j+HW3Bg4O2nzcodGJSSlVs4egoljOV
cu8/7sCQ+9c6vyQGdtve+L7XsB13xVzyko2rQZE05ezvpKNHN8TAKJgEbyGL
CjkNGhLblSy1PTkQsSOq7JsjwupsX33ol0HIsxaLl1/tgtK08UTmy3bIf+r2
NV3CxRd9nUN77w7BPE6A5VE/gAeVh6O+OBcifSH265oMXs6OOrQ/fEnEvVer
NkQlDOD0dbO61m3lMA+cEVPfy8Y7h6m5eZUOzG1umyWuLcbFJWpKU/uJ6FhF
03J7OIrhJ5+ujncMweF2LE0ujgHfhY9X/rvQA/bCf4fVv9Lxzr/EM+0cC2oW
Z1QXxWRg97nzOWo3+/HwVrdnZk4zunI+KzUJDaJnslbuYwkVZ3wNxAbelMB3
omjH7rNtCC/Kdq0x4sLiSNCJuswOFC1khYfuCESOYUtzUX44vDI+6YR6DsDN
ukByjQALiYWCcu29vNzyozIP/y1AcdT5u1sjS+G2+1JX3wEaXtwsmshR7wJ7
MOzLnsUELKLwO7Xrj2FFeQmrMJYN/nyR6mAqB3zDfy8Jn6Pgmu2hCcVRGjZZ
3K4pVGfi6stLjHspRBg+CX6213wIf5eNVXgWdOGBhP1ZtnsBCvMyxHzuDOC+
/OfvIotr0fLci0Ld0oP4vdQleaF0VAtO3fqV0o8N2g0T2UJV2Mqimyf1saFN
UuPGvWDDwGhcPtGbiKhamz8ntn9D0cFQnZEfdEgnq17ZoFyFfj3j4K0fGxD1
j7CroZSIn/f26Gr2loEZp5a5/UMzxr4KFHrwtSJKcbSz+AoTiQtvsrs29mCL
slpD9K9eBB2Ju1ViSsFMqbYi7vbh870WVe7n/xB0of22/Zp2WHYFd/9TbYOX
Q3WY2896sLNk/PUUxnCAuMR1nDOMOscT6cv2MmFcxHpK+i8RZXXbt705TIWL
SHdNF4OItXq5m0q8O3CMW2t0jdev/H5RU+mhbByvWWO99mAf0j2O3/tUmA2r
kRZlfeYAjDaJqnyWp+M7cxH/YlYF4vMOiZ/vYUCsmd9g5CUJjBMv3nusHoAF
3Uk2/TENl2tfejqtKcep7MT0hYM1gPlIwurkPih7LClbYA3juoDVD5mfTHia
6dQor+Zi52+zEyezqHCv8/m67B8XT7UyFR8Z/oe4ZzPRWZFsHBgUCgxIfQ5B
zzMVl1QGIeWbfj3zFwUW77ebHx9jw1FTW/9Sbzaot8f2HFBKxOPfVxbWy5Jx
+sybZ9YjIzjKx11outeBW4NRP5S9WBjWU2JXHaDj/cABgRaeZ2w7l/7j204W
yO/C88KSS1BZ531SrZjMU5++86+DqVCwflp8IH8YK/ak75rwJsOiXDlKrJmG
V+9jQ53v0zCcy3rTnkhFpNuOlywfMjIU1nyYl6WBLfZlMovnUS4va29J7qHi
XPu6FE5KHfLrjlKehMXhPy+v6Gs87uGj7j++/AIZBI/PIzaUCmiZzNiekutH
f6RNpufqfuQ0hb033N+FwEXhQVT+Nug79xva8XztC7nrc6/pCCxld2rRBwYR
u8sul1+rHHdirSZ2CXNxkl982lqahg+2PfntYlxEmV35s1KEgKcPRizfT9ei
zMnNYZzHo3MRSZ/44puweEzbSfEVEwMPDnicOTgI0yvyJezJcpxeq5TF3EaA
y/aUYkelMcQfuCdVMd6HmWc4dGRFC07vJFwdbWNCq6PycLMKAbn3Sq3yGFyc
llT0WpPLgFfDajnDHUQUHx1b6vS+GX/WNe5I2deLuQMuRmbrumHOGRN1kcmG
7qZlkfX1uRAYlDy2T6UfKfIbtzZNkeAxrrqnO7QIqu4zVsdWjCJIz9iAatEA
9o+smoFzo3DP0Y2+d5QFlecV41seUnG7dfvq1gwadv4YTN23Zwh6+jva5TV7
MdiV9E6x+wcO2VAlhm73wGngrozulQY0OOs8Sj5CQEDAKdbvHTw/vHLZyimm
BxJVs+vcD/TCLEbJ4doaLrY7pXTtkuqC24YmyeFULrKXe2QOq8QiiLSRJHuG
BcOyPpvldU1wyTbkFkWSUHDooPfj3YOw8uWTjY3h5RPfw4Kpy2Ss4jn2s+c9
+Onm8odcxgCzserBJgseB3rk1TXSWZC0KBGaFB9Fqvr83kDjXjRrfA8NNyDg
gEz8f8tfM1ATq7F0jXUTfvt42/eqV2FJhccq1m8u7mxMNNuY34oAj3dnWv2Z
8DCwEyzewsuzswcZZ39GIt7mAbza2JA61bD3VzcT9HmZddulaAjhS9eK3FEO
M/ZSFW1b3l1pin+86tkOqczxouGpDoR6WTg87+lBV/urWsrTVCjdfLfN/TYb
uzqlWyRvDaNwqMFp75YRFBAMnlfvqYTcrh9Hp6s7IR9xc59GXC7ESnNjBSx4
vlZgLt2+0AlimLNcln0ujmRopLbUsiHy98Ar2UtcPDhXLJIhkY6z0x14v6YZ
R3t2hB9+UI6L/ePD7x5zoJ59PfDBgTLMW51RumrTg45xO9EK0T7oRVSJ7/xN
hxtf8uSZ0QGExC1fuRCZAe5U5aE39pkYLdQs6ZUYxOpN72V7fvWg9JmS0d7p
ClRobS2jnh5FGFdTtcmDAzfnyWRqcgOUArZdD41gwIcoPxO7l3cv2+4/q5Ln
4mdh23CwMwv+knF1cq+o0NHgHm2/TeJ51O7Zr4VclI3PPNA9ysCNNd/vei4n
oNH9kNHj7wOwfXw2Uzz9E7R9o89bTY+hIXZlnOCVMjT/WVUzzo6Hy5+FjQ+k
mjAvEFJqt7IVyw03uqo6pOBjTO6ESzkH10bGvt7Up2PS/UH7oZUs/Ezvk9Sk
sZDXI+0oNNKNbm66z+caBqTNfajHePd5y9zU4K/LD9gEue4Z3c7EmdJdf0a+
MqHy/vvygmwa3mwVK1zq0wXj3IVhRc82DL38N6/NZuJKYsbzR9c56P133kE4
h4GST9bHTpF5+6adT9zwgwH7w6p2xoxWOIb3zB21ocDQgalx4y0dLC/d3kMu
o6A1CmhOfniOgwd+mwl4kfGpYqcefwcDT9+ZaXRsY4Avb+9Mjm8ZzN7I7uvk
ze9l6nHxhephfP8Sl6J+lYtTaTHqlQ+H4X/5xjut/WO41rS7JXInGV2GtgXX
fxWBr0RJZPMzCu7HtHvYL+HlIcm9ZDW3G1PX0ukXDrbgvZTbkwQZGhpi5L4Z
vx2Bf5NVmG4oAdePOqSPGfSjlZYRt/jYCBbl7TpvdZ2Og9fcHev+UlD/zYvv
O6+/rybJLpJ15fF499LVp/oqEPvZQLVKlYUjksrtfU+4oJ14wF+S3IXW2mNB
/5r7kRWpceDFqz7Uv3d+pPzNCY3N153//scE6WHm1mObeNz/yPZ0Es938FTS
5YI1C9uw9fY5vUoYW/1H3nl0AFbrTMb26vajXOVL+uHnZDj+zMmypfVh35C+
3CSPN77sPzZMDmRBQ6zXnufSaFjyJDDFhI35YOnl9j/K8PqS8+j17dV4mjKf
duLWANRtaOKG2wZ531cWHvTkws9RN+pbeTt++2ULR1wfhLhBmrawSD5k66P/
VIqQQCMvVReLYKE8Jatqv84gLEcVroslN2PPcUb9XRod/W/eO4WvLoWSWbVn
eQkRp43o3OsjmdhssDe9NKAXR8/+u3KYRsFFtXVV97XY6N2uOFqUOIbEJ5V3
ejt4fbQqM/ASz/PNNquwNtfyPE/94znRczRs0c2dTJjtwF69PrHD7WRsijmz
ebF8KzjzZ2MHn3RCeUjjvrxIF6bE7viOELsh/dJkZWYPHWcGOjZnLDTAK366
6ugdXp4ecVEt+T7Eu1uq2SavHvwr+pZCM+Nir6XIXMtrDvZ4r789EdeF/y59
z2id491PWOrP2VwWkve4xXGPkdBxLfi0Jn0Uu3a95pjVsHAreM+uyYONyCu/
sl1WrAQ7zQdr24LoCND7IJg534D1rsNXrNyHYDiQxkwl09HmLEzQIJWjZW8R
J/knB/YksZd/+8twqW+ntWHBMO5K1PyOPELHQHW+34h9JSr3n3wv4cWGbq3C
VYsxCpqGFMvuEDvxb24228GGl9NP4xhblDiYd5O4HnCWhvptixIMP3JxLeLE
kjBePoqzNT5yQxJwsO+Fqu2mWrCfExPWufQgQnHi83RbJjKDHFjjFgy0cNM3
fNJPR5VbWJCBGgmnz1pISETyeDCR4f4MPXCrqh+v9WtF7Felz/Zj/Xi6JkL5
chIL210qzVbFN0JgqsH4wBgNFob1g6vVyGh0UDN0fUNF8I8KL7J9BxoHf6gW
L6SClHBz+odHB5qubn8uqMXB0mTvuOD1PYi7v4NZa9YBkyPu39R3dcK+mRRw
u503n6Z3KTtP8N6v3jcLx2VFSLOpeSLgyOH16oZbu3RYmM1p6TKJGsHFd5OO
vqGJ6B1w/Bl6qxetkXFrX8SH4qJifd2LglK0UO42ndlF53lo7EbpGg5GfoXT
x9+W4Pj1/TbDS9kY3/EgWeGgLwK/p7zh1+mCgqbo1MfyXvCH2Sqyzoxirnxx
zAZTDtydSkPXan9AwKWUkRfnByEw+2jfa7EWqC51Ui1NIOP7iOPUm2oKSitp
LbFZw2jt6bgTFMVG0kMPn4mlRMw/jr4VdImG7dMtHhFKo0j80yNbHcXj5auq
Nz3XjkBBpWfq0clenB5dLOnpR8Ifyq/sf+iA+YlI5yvmFDB+hyafKusHq+7j
d7eNQ7AVdp831OrDK2s2zXwpBU8V317ZvjEbGlaGw3ufp0PtZq+19mE6Qt8z
jHZmUtGy0nhp57YUxMmMOyvyk5GkmftC/AkRhz/xTwY75+LSk6HQbp1uLCf+
EjX8XI4+K/KqAPIoStYIf/QWIEELp7oJ+SRIlG4VzfYnQuoRUSrYvBYdkjnb
ZLszEPwtxPnx8XqUDm6ZA8+Xg1jeqvG3WQhUzZnMMerFtjSZpXd20lH/59yG
Z64EZDe+tFyaM4IcHVfxpesp+LdCZbrtOgV1lspv9t0bxHYP15Mn3lKw4ePT
2nYnDpScO3I6g8gofxMzuKDDwNrFfULc45UoEFqSdNGGidEzdQPtg+141PfJ
MuX1GL6T21IyNYiYobJXVya3o8gpLPxZBgX5joMbicqlMBHMMFXc2Y3AQ3xh
91wa8L4kVf+qAgH5v7T2ENdVYs/2rPnew0NY9yA+qTybASfRt7t/sikgH5zY
sv0973Wkr2qn8/YpcmWfw9SFcthej2HXLAnGv0v+fjw5wYb7xkv3OLZixZt6
w+SMWoRs1xQNZfTg/songkqHe3GB5vVv6VwuRDVtT0h+7ELBzcQmvt2ZMFCX
/2YXSoGttLz4t59EJFsGFTyOSISWwH7+1IQetKxKsHMKImHERCT2+oUGqITl
egZGM7Co0v0Q9wcT+1PSVRyWDiByjkbX0KJhhbRkYzWVC+t2193zqyqgH+LI
eEynoe9ol9QhFzriO4d2Cp5iIq0yf8/TVWUonFkieJPnaUeEt7/9soeIS9vV
7NYpj2FUuutw+EkaZhtWiPt+rcOddU+SXmsNIlP9j6dKYideqCqo5/By+8nz
Y2nz30cwNKVcGbmFhY8kP/RmtGH0xL+zJYwO/Er3+R16nI2N9gQrvtNjMMmX
PF3lOQhilXwDwXcQ8VknyitCRxB05c+NNnk2dIJYebsTB5FhfTmVNNuO/4zK
pmwJFDxji7XZvSjCHXfppJAlo8iaFN9oSKrEFb3f2TnHynBN/FflqBcJUvvY
RzwIbLytHfb91daHAat79Bc0NnKWVxa7eZbB4OsNYcIL3p7vObnaUIEKra1f
leSVeX20RsaC72orBtxs+qiOXYjY+LGz8mw/VMidkbOVBKh9+dbyj0hCzfn4
A294njiUWsp/k8bBD9Wys1L2HxG7L8tGo3IMZ9WsmxhHeD37eOV3Pucx+Dzu
C7ih3YmfSqFL4iRI2Pn5baGdAhPm/HXK7jsJCK8pslRbX4MA8di9xRFcyDl+
4dEmG9Z8TUI5x/KhZtn548+DFpwT/WmiZMBEsdf1VrnLHYholHx37XQvxn0u
WqX+//MO+O2VlQRHMb7k2X0ZPi4edeRfOr3AQchuKZ9r4u3w4KgPbHlzCxZH
5UuOHsyE1iflWWuCI6gbCgR1ZFtxZ9diFrWqE49CtdtCHcjYd7DPtuRsFzLb
fu4b/cXz/+nrv0xP0WDC+Si54yDvrqOUX7jdYaDZtsxJWo2GKkpjRmgWDZqB
fz4a8rNQ8rcuaVqDioqjwt79x3h+2DPocOMOG2ZNpbu1TEkga/gUBazoRkdd
spKaNwW1CRNPooc7YVenU7jWdBRjAYKzJJFerLLeV81i9EOE6z9wLrgTuxXO
+gbXEhC9b/U+pdEenHMVunvtYxWOWZf/0RnjIufF+ox5ex4Hk0YWSTnHI3Dz
kduDHU34+9p09YczzTg0MT9hvZCLkMf01wJ7GrClU8GxKHQYt2dFPiUUD6HP
TGFW2bURx6ou3gzZOwJTBV8tft4cmz8nsYiXiRg9UlNtVk9G89aKa6svl2P+
W5ryj3+t+Hq04pvxcAOW0ahf0nj9tF/AZWhVCA0eKrkpdkK8vDp/vcgxlYWj
F/b4J6URQG4qv7d0fx+GX9w+9SxuDO8Wkqq21rMQ0ra24/txMvzb/CPiMrox
7XfkspLVIN5HmJce0h6DqmaEFmkrEXcVN3w20CgHzTL00Y9RDu7f1i+os6gD
VW+Dyw+lTuR9lt5+mEVGuI7o8RTeXN54bXgixiVDvNvYjf/IGPz6E7tKTxOw
lrRLt8uRihPG1O9znAG8sSh0qGsaxcEOvelvpVTE53k/v2nFwgFj/7XSRkTo
10tNTtFyEd+bedtsH4+/MjawvozWI+nYwBnmQzKcTravIcUM4fWScLZlNRf1
18YEzj2nQTzdN/SzERcvJpu7X31iY8fcCd86Xd5cxE4HJCTSwVueDRm/aHjX
XRijHTIKwtmuUyt163C811BvuoyOZ+4Hg4JEShHAd3PHjmMcTNx76V0+N4bI
dNvl0sQfmPeMatggTAHb1Pl9y2wnUhNN/VfrcWDwS6u7bHEtyD+sa3eKVaCw
uD5X+XETbPS8jjFlRlEn6qtbfYQLEaLeBcXDBMwG1JF6XtPQvJtgE2I2ivnw
e/WZ4/X4uy2n/v5fAlxDZ1ccZTEQpR/SV7uWhj2q781fbumH8YdFCbVCNJyb
mPp24moTNlKt/Q41ENFaKOjezPNIlUfuSzYJkBF9J/xWpXw7NF1alj1tYSKq
+q9r8hQBWwU7di+aY+PcqjXX773hwLfy4aPrYWzIShJ//WZ24dZggd8kj2uS
7Ee9d+ygwkRipRP/RCcCJ3sfXrPuQf3UP5MEYhvSBtZ+OBfLwTnTTT3cDVSs
Md29Y11NBa421FpbTFAhajj7yPdLEQolw/5uWsHFFiwi8g1RsW5bTfYrGhcu
z4kb/p5nQd3K9We5Tz/sBYcr6lTKwbT5frmtvAdyLauZMsdH4VB25cYFdyIK
C2YWBYSOIuSYwJ/mxgFUFvx7GJNPBmGe/vPnwCis7SXEpfXaYF5X8/tmKhky
lnL/XAPZuEmt9hqqbIdTzoejFlwWiJGvP+BhD5weLLZfzcvVi0pFZG8DEjaM
mhS9/ktF4GKfG0YNvDlqjbbzazIRv3IL1WLnKPz+tm1yPeIOHi7k55FGUfhl
UYpALwfaj2oK+upqEKdo7mzN8y6GUblI3OJW7Mvo8euT6sHXdUF/pZ6Q0dSQ
2560tBXfvIee02UYGJRnHTzeRoH6Hv4wYmUY9mh1XDzqyIVll7ll//cqlFe1
HBricbtYSuGp3ANU3KVk5AWnZsCR2lTT/Y0Oy6NNpBpbBio0FlLHpCthrtmS
UfmzE7dC9c7t8a/B9tUM0YqtXKz07vYldhBxkak5l5DaiZvi4ZGdC0RMy8ne
69Xw43FwnVo3b96yXwI2cJ4MYbbPWUVgrgOdIfPRzbVkmPuclz5jS8WH3KhP
/rP1iBtME9OqGsG0h9j5J3/YeGmTv2JrHgV51FMKlxybMHXDj3yY04muwsWm
YcXleJD6N//WbS4eTnpWvHtZgbdtHknH63k81ECxy//YiUblBRNdNwY8lKe6
lzgzcKPv2JcHbV04FytxQOtwNx4eOxmWvqsNlerW57avIuDIwKtcOo8zbtTu
9yn60IUSgQOZ7DwWLkf63QiT/YywwXSjxt4hOJrGKwTz+PWTYpybk1MVXjO3
R0uFMjDjwyfXKMjF9cHQ6pUiNOSetVYYMhxCbLqcecmeUSxUF339EkKGjvqZ
H1cv8Pp76mLSb4th8NMfGv/4NojDyUdmRwyLkf2qZJEU777CLHb6lxaSIdJm
ZHKWOYq05crJUSM0pHqa295gspFsv/pOi2EvTso4Jm4uK8Y19bBfGb+58AzJ
+ighPwp1s9eik83DiDwe52qjmQkF6DWfECRCYr+4zxMpNqwOFPcUr+2E2J2X
e081tWBzie6Px/+ICAn5TWzfWIn2qbQBd2cm7L/554XlkaEy/WB5nwsb13er
LhNOJoI8xbeS5d0L35F1ppwXdShdrCX4MJ4OZUKY0KI9bRhWNnmU9YSKDsrC
IQqPayb3ry9nRr5D1S/qsXV2XRAn+z+LLO/GqoANcU8whJqw927Xx96DdXmv
/3woFb9q7hd2zDDBmrh/OHlnL1bKPtUteD6CgY3qAvceMHAo4cOpSRYRNW5O
JsveleJi8zKmVTUbu8tSTZbeGsOtVKbH08cUrBvZnNnXOwzmy9txuRf9YWqy
9WA9irH4avegjG8nrN3ePbeTaAfhhIWjVGc98tbqVdxRY0JZTJ5jUULCwKmm
f8ZvKIh1XMV+X1oDc4UjUdfuEXD1zuVElTtNOKzNyt9U3QJBTQWwnlbCKW+5
1HUKDSe/FfS71HbDetXDFVq9TOj5+N+UtxrD69AB0YlrHIxuK5Mz9KLDyYvk
tfMHFQNpPgFlYVSkxVs8GWC3wWfJt72/v+cgSzRK7/nzVsT3/47fq0fFbqX3
pLaCSrgdd9qTnkGD+qnFlmH6XGwViGnQ8Scgyabb6c+yTuwY11J3bKtB/MK1
tBDzNgRYZcds2NoFH5EN0hKBdOyMvqV48j8OJPft3fZ7dziW+h5fbNNZhaw4
J+UYszCsqF2dKc3Lp7B7E14a/hWojhVunllLwB7hhcDXVelQeWcW3p1Ph1ez
1vEfF/rB+PnisI4fDdu4q7ZX7qcjV8qHK1XF87yH2xRNEipw3eHG2oiP8YhN
uJ7TIkHG0QbJ7MviHLTqbyqbz6iGrOifrtIKAt5x+fm/rOvE31c1TivlaSC9
luzNWsSGrZ/bmvzsWpy4Nkzfz3uf9T/PHC32p4MYFaExdYSFTiHpWJpEONxU
/Nv21IxgIW7a7L/TddAviQp2ukzFm3W8ho0m4OLnZdyuswPYptgxF6XZh0Vp
y7qUXDuRoO623ZHXh4/t3Wo2XePl/x0nkZzOMTwiDT37o12Fi1K9r5xbeF67
242v8q0fwr+ftTxVQYULnZ3uHcOFhKLvaJJGLSQP/Vu55AgFEetesQ0TuDBt
rG8+PJUJ9qZDmvNDXMi4PQ3mX1KD/Tm0YAnvWsRzZr8ZW9Xhv8v6HIeNXLyu
sdHbMDQG8aXzIiP1XPRP79duJQxBKPgR59XKIRTTMwNuOrTiroeEuNgOXi68
8Sw9P8bzOZm2w3Y8H70g7vxAom4UEXOJi89Zs9GoRmnqdebi3+KZnKkoLrzN
rrkU3BzFCp2jX5UcqnHRcFr2fAMXBbNS/46F0OEs6nQhV42NuCKxiTUNNeim
rTN8s5WN5o72hpOZPP/SPKr7x4mKd4uCpPd3cKGuTvivuIsCnev/DTFeMXC6
LJuzbegLJkVmZFdVnsKiivmf5962wNH4W+NhsV7s+iNW8N6KDnmxPz8/pfQh
1k740oJtHu/5+a0vixjDpfDwWTnjatClE5njv4exj39gfPeiYnQJvLhSPz+G
82/02xvW8/j7weJwQkUH9o1LS1xJKIHMSo+r3k4scB+331o1ScaJO7TbZndL
YNTFG5xCA+zqBcc80rNwzCRwjxyvv6u0G3s/u5XCWOyZxCx5BFverfYOMGnF
LlKU7tE5JhIPhP2QNylFfYqgzAmZVpASMi0V1rPw1+LK/P2/mRh8tsVDW5+K
g1tfLon0rYCuezH5gXg9Ni+l7lNZyUbkuMXMOH8Lgr94q86LxkE37FNbWAAB
kVSzodz+Lvwu6tx5fISNS40OhJ28+SoEbLu2Rp6M4fGeWaOZMTBTpOIVf9Ih
Gr5v3x97CjpPvGqk8vg99JNJ2VZ3Gu7FktV1ePuZqPdrgFZVB+8lArJGPu24
UJbmP+rBQnAwytJKifDL+fP1jAMH+VlR1wT29+NCt7KAVhcdmQJrTtz35fWj
iyR961M69OYecN6412N3m371iloWTFaUNu+tIIH52GWTuh0Nb5Pmvr6WpOCa
TYhFaj8R504wI3+NkhGUJXB4VpuJk7vLhcO8UvHcOd/6MpGJ69Edf1onGGDe
lZMSNqpAbJeBx5tgAopwYaAxsADNEwWb7b0r8eZ1ffOzixw8O0mPyDrQhKsy
rNOW4w1wcEldTuP1pHBv+wbteS6W3mWmX9vOwJ2LGrIHTfqR6vC+wKWfBvuU
GY4CuQ67dI/vOhQ2iqW254+ssSXA39ExI8e6FtYdn1Sz1Xl+/PrUiywfNj4s
quVe9uVAUJhzSk+TiA1axi0EAgnqLr7H9J8xEZDm8o5fOguR12XOOYGCM2rL
QgvkByGl/jLlLLcLa5tj/1Tv4OKLu9rrtvVE7BC+8fur9QiMV9v5MrWL4FND
Iblr03CQ/4E/vZQNaeuGZDiMwCh0/8NEVjsCND4mRcl1w8w7SG3ifQWoviZa
2262w/W12TMR0hj26vx+qZPKgNZhwWGTFg6qLLt89ZWYaPq3ZN6S9xzidqlH
t6myYO6xS2azzgAMj65xznnSiphQnzS5fp5/xaxf0RZAR3Ajn9ZXayr+iCxn
PdzJwOq/On03SETcaX+4SsicgRi3s6EXJmpRJP6RZLq8Cz0e59queg2i1iLX
t44/HUapP/QH/7Sio/+arGA7A/IV2748WV2BrFtHrIwlqPAszYoMSi6E7TvD
x+PviMgodz0QXz0EL73TTeI8f3WpyeoKlK5ABK7PZ3pS8PJSxsaZR7x5Oj0J
kVJ4gLTdp2kiqrye1658+cNpEOwmzduDCXQIv1kdXFhWD0Vn00zHJi4WC/ef
H1hMxsUDTLck8Rb8pyyqWJ/Ziz2iD0RfBdNxeNnqDoe/7XBZY6KZ/YyXTyuJ
JeG3OvE2R2n8oyQRsaf2fzh9bgifNxoGnq0gQ27VV9/Hm3l79c9Cz2ahH+Oi
w405q9jYLq4WvfJRDT73mOe4VVJgLvvwlPTNNtjsr9i/wqMe3lUpTyWLh9HW
vuPZthcUzJ3lZcErIi5kvQr8eoWG9rBPjeq5Y5Adsqx9lDOCfkbE8/AyItw/
t+frhJbhd4DpJX/qANZQNkX1CxUidmDdA8EdPP/apFolS2Hg1ffzf4WdyRg/
m3nrNY/Pdwb/VEu40Yi2OQkO+WYv6AHSHjmJXJxeoV64+1Et/DecYutG0cEZ
MDe7fWwYURUvhTNr6LDtvuqmnzOMgf/EqzTIBOzTu53hJt6GgjKXt2faOnnP
60mqawsNhH0b/Xac5cKQpnZKRJGAFY0SC/fTyPgfRecdTuX7x3GlqVKkqBTh
S1uDdt5CSRISWdkqGZWSUiQRSiElZZVECtkZ2XvvdawzHGcfhEqh3/P7yx/H
5bnu5/7c7/frdZ7LOXEGyeHmjFYsTxab2KfQhwZPvpr3nW5oSH9Spv2oI3yi
clC7thL2Ho6eITZ0pEjomMt1kfHIdGXLF30qjvCnF/sb9iAteXBYJ6gfqx2F
X1W7luFt20+zySQqZFurDLq21aBtj9RC7qf/vw8hceTXbTrmhB10ValMrNM6
dlH86wiyu50E2P8VwWxTQZlXfy9Uze2X7pzoR0FafsonIjdNrrzn7CoqBTdh
j8ieRi7WUGMfr69lgf3YzuYPZxirFliUjveNYNGV/NGxVRQsICnnWS+n4dvN
S51nJwaR/XYLxMIT4ZOcmKN1yRNrxprlCo1eY3RNhrKUez4M9j3SP7yP4J+s
ranrY4jzZ2K5/tHmfrg9r9DfpcHDw3l2Z84+4WOD1MmGZ1E1YEVXHXu4iw6X
NRvbzM7X4eklo+WhlWy8+Z0pMnyQ4OJi3eHP7XVQ2/rmWf/VVtxa7qK/0GgE
Kfo+ApmOXFzZwLR7192LbyuuDN8k+ttuyaqQ1R6jONsevNk3uwtp+1Tuugyx
cE23fWQPSpHntfFMhgAfUUrZf9jowu4s8ZBcORaGRFiKgcLv0BCuNDX6thO3
6q1jsgWHECbcspCv0AXNNS1L2+iFqA1zMjd43IORApVcl+w2WDtsrnSj06FT
mHHmgwIPprSh9xGeFJjaO55uJ+Zj98R6ibXWg0jZMrJQ2XUYI1039MIUOEhZ
zdKSzqFByrK+oeu/DCRblCvKSbyCT5N1yYMUDpadV3P9ntOCy9dzSiLqWrBe
szZx0piLWl2NW43JPOQGVxVcOcLD4iX+7xQeDmImu05suTHhHQs+3zUcomLG
YHvvhpt9YP5wVr6ZUQKDzJB2/UgGpllNO78SfbV9d+9x03ulyJC/ters834s
/DnwOPUmG3LdYVvDNtGRPiJ0UvDYMErf7JiJXDsKO+UhwZGFNVARkOn995OF
21aHfS37QzCwM0yG0srF89oRT4pNJQr3lEh4a/Ex90mg3Hc7E5+nDpS9dBrG
yy6ra/7/WnFf5X7w+fAwnFx3eLHkGLHPVa3VgmkViL5af+Kabh9kCj4Y5nv0
IXTwlLKkMwlPozeF+XJjMTPPsNl++Qi0g+54Vvo24P5Jc7FrX1sRRrGQPJZL
xc9l7qe+RXAwql2nHDOfimdHZTWy3g6jTXOv9Pv3NESrPKg+9pqONO1P5jHL
mHjiMO9U6+phTK2LnS0m+PRw0MIrfipkTK5jqm8qYyGoRMDvDJMDI5lDfSbr
MlH86Hzpor8NEDjoFOv4HwvJzI7clYtiEZ/hqrXtAA/vHa+tEHrNwmCWEkuy
pQuzB2Rs40ppyC3slas6wMVOnfaxzYbfcX1g7PytDaXw2spM72z///P2qVWi
/9pQdPtZV2Z1M1w4N4ZUNKjY09Pycr8ukfsvTzEZBNeKSsnt+mpKRWFsrc+7
g2wcc7t3aVtfOiw8ktgKwqMoC5/cfZaSBjtX69zgd89wPfewlO2ZWogZqX2d
+cwF60btmisDbCgc6PQ01WiE6QbpLe8dK3HtQ7N9281R3LR750e2j4fZBGnb
EhYHpCb6yIk3FOTv/LrYhpyHuCjU5RXw8K8gZs32OILfmVUHnArr8GLpvYOP
vrPwQyWqo6GWjhNqmT1p7pVgU6TvylmRMZMU9pA0WYR5/0r28e4U4JN11aXX
p7vgOxJn7KXVDz+ObHjj8XJ4tkQsVFH8iDVGgqwXFzsRIbbsxZuTzYjUeubE
O90CTyfVbYpdtVjItvkUzsvH/R+d7WPZmSicz393yrYVVgY9S759r8DrxMpP
n9sacXv05b47A2REuyxQseqqBIncO9Tc2Igms/+2/osfQvbVk9qHzTuwTW55
6lZXIqcPmcomJlHwJb/+uzyrAzcMfJJ/N7JgePPshhGHZtTsrZgWdesncm/+
F03dUViUWAvcPNeNdysNhfbo5SJPQuTQ9uZeuM97uN/r3TBO9lwfiPheBPlZ
QcfgYTYmKyiaCjW1OBB/y7pejYKX9cqr9VYkoOZv0HrOXir0qv6bKdkZj7hb
j12OR7VDwzmm0fwRGcdLxNcmePRCcbhe/Eoz4b1BaTLv/xJ9PcSNnTtfiwKy
uSpN/R06DGnMh9ot2GLxKmCD8BDGasZ/PhPuxf49e1MqtrLwODTY/QCHhRfz
T62rOkDG1kABh6+lkVALZjwtkiLmTEg4R30xCRvmVVM1X3NwnPXG0mMRD5Iv
aNKKRzjI0D0sZ3WyDrV58fOnP3XAP+iSxcePHCTtSFkesKoNmwZ300cPV8L1
3PDxu/Uh8FcJ2Ryq0QWlnNN/x05zkZEgUJ4414VEY49o9rY6OEbv+yCrVI4t
TI3qjJMc3FZ3u/K6IR9rGatpyYIM0Oaf55WeYCL426uW64w0tO2cY+f0t2HF
C0WFSMV6vJlb5pp1mQFLXSNJyz/dKBa58zaP8JiWqqVNxxy6YLLGVfSwNRth
rzSdBcrIaPd0CN3cS8ftFr2cMwui0BawLOtlAR9/Z8ojx0eaoH1yY4T9EzKW
zPQwE248xnMHddkzb2hY++JMd/hAF+rqb5JO7qhAVaPG5DJiHy4t4N16HDEA
mpV1vMQWMo58Go7gin+Bv7J/4G/THOg/kNF5+HgEFINoMcO1/Yjct/K8rDoT
u+bba975x8E377V9DZtGsVRUktJ9LQ39m1/nOfRwULXJyqq3jgyPlFAZ7Z9l
SOX2Pf+jTfB2SM476dlq+O42m3LuHILSE9tzvxfXYJDUqXtfrh1FF1eFUG/R
EX9FrIi8eQj/7hiOp1+hwi5e47urLB/1V2/2tjiQiX6tvDpcSodlzq8cN9p3
CPpXKWb97EOwap1U/PUBkB68NPH7ScUv/p120nYSQt+8fKY4NooUbmfBLjei
dz0VRVf8+v9zOe2Nx/l90BO/EapE5aG1TmV+ZRQbUfeOVTel1aBhrWDQhptt
0DDctvDWjl7UyIuQ7kcP42PV5m/3j4+g+uSJp57f8xDB0u8clMqFUK3A6bdb
RqGjZWG1p6wOJMXVJQNNZBy1Db8r51MOr+/rKS88B1Cz/RwvkU+GpOsV0UE7
EnQMfRYp/v//vwZ/vfMZ0ALvS2GYzG8eHr8odY996ITCAt6df5MjCI+L1wqV
aYdg3sFFRgsa0FTXusr6Pyqc4+8z6kRZmFqucGIxawDKnN5fh6LeotXr3auE
7la8mmiq3TzdgwxLn5pFF9hwEDm8p06+EzCNsRdurYLiXQ+xbeNt+BT+0Mtp
FwdCmdsXVK0tRs6l87329GHIBlt8VbQqQ9t15oaTQz14c3pf++5JKt7leKv2
1TfhV9Tnujz7PlAnX5teaOtBcowbhGeGYZT2vqzDpAnFLy47DRSOYLdWo7pE
cQ66yE33xqf6oPm+S0rsBh3n+Gxf0S88JMuM2FvSaJBV0+/feYaEwvLlnx8K
9cL/luC7h/9/Pl5mG20cxAKzzDz5+assHNl5jz+pXo/iIYkLGd1N0N9B3cS9
yMfM5kVrer/y8cbutM1rDgUH3t/SXTiaC+YEb5UWn4LK1I+P9Ny7QXU+L3f8
RgeST7ypEHSkY4Du/9xNrAo5By/Of1s8gj4j4eVmItngZewxlk/h46mPWm+b
QzbCQzgBaoGt2GJg9GiXDQlftJyUjm1+B20zX3Z22AAOK+gYPSG48dvPiJeN
Hq+g8O7xJbnEISRfHbzgc4y4zvNS755lLFyeWbinl8SC5u4/h7WPtMBMZeZg
+BBx3pwKHP+ZsXHQkn94cWEzJlYeblr9rxx1Ww+9U6osx+y2VoNU1QEMWIUe
fZ/DQ9x99kWfrUP4q+dUoeg0ihrzpwqFZAbmh6/scxPjwO5peddbBhmfBTQc
poq4+LNle9WBg4Qn9NTsLazqQ9iz6UXC9UNYkiDIVGL3Qd25JijUk4brWg9M
Vl0jwTzn9qGWSWsYX5GVjPjGxOXBRcvzbrCh/ynvb6o5DWEW3/fqTjLQFOu6
d5N3Cn773dB+l2ePRZtnTEikLoSTduIJMS9PhiQKska4WNxvc9vGjQJty17y
a+c+KFArHp6ay0fw8+Sfvh484EH32Y8viX5Yd3GNURwV5FVuh3bdoSLxu0jK
+I3X8Ot81C063oHeLOrowN8y5OiVfT1EzAMl/9I6tyoqHnhOD/76MwKvJYd0
r/kzsCDy586whVkIPKc+2y/MhkTsjzaVQC6yvWd15n0pQSRrwaUqiU4EbZFc
37efiRc7E/f63eTis+5DeYNCJg6+7ZjoeU3cTy1BS3k9DtZ+CLhzYqYTQqpb
nYRXdGFiNpK28uAwbuYbXXnfyYN2m5OzpwMF1o+/Se+xY0Kh1SVu/dwXPN/B
J4ms50Eu5suilvJ6bO8tij/0kYaZuF23Du8chQlN+NGhxA6Iddic+M0ZQkqL
n2HdRi4im68JByRzISelUVGsQcaPuiLdQicaHlxfNF9ogoFGU+c+OWkqXv9U
+Dy8ggnLaPGNB6dH0Cnt15ejPIrwkgiGdgAbr1LktIsKuUh6nVC67Wc3Wryv
f1RUHMZToYmVY6q1kJlopEoy+Qi8e2nidSgb1/7k+s7VET1qdOGyw/EynHaY
8UwjJ0PgRcH4h3c0BKhNFgcSfW1QFxX+IKgSzPPGJ108GMiA/h0Vw0IovmeK
Ta3swUSlS6qicytEu/WW5Hc1YOFF7QfsY2RIkJ0DxsSGsWNJ3V/X8BGYevV8
DdMdxMfifTYZGiyoFzOTDw0NI1xzj5iCMBcRodVBy65S8Z5RMv9wGAl2TYtH
VeeFY9JXaRWnkOjFmOkk/kMaNP9Mr1hI8PSqVbNCu16Ww/arRU7ITgoo3evi
aJkUaF5RkbQWH0WJTGXcyWIuoqdd3lNedmPap9TM7RAx16pKOnlOHGxt05M4
842MpCaBhuqYXCjrpPRWCdL+z/uR0Re7sOoHNdgsjotzsk5/6//04Oj1JcLM
oSIkymY7SrIpUK5nPvVf3ozVdb4slWtkXL8/fWv8BgVmxeeSZh+W4UrrYhfL
Mw2QOqHXa5DOxp+Bf3Xzx3gIzjY192BSkOazpsrmejrct9NOPF7cjr3LG/RV
7vTglI6k6rpWKoz3/+xeW1AJnsThc+fyeJB+JNeYRHjDr+XMH5Z2DDgXJEff
/TYMiX95xnc/ssFRdp+gzvFhaDCnJePYg4u1tSs2rWFigLQ4R16vH8MKOeN0
GQ4EF53Ou6XNRkh487YZfTLMZR/c6MjlgWl0d5pp3Y4dRlNnpz7T4aQRGVPj
2QbW+O3SBUdzMfn2ri3tYTfoCzpfdq8ugnf1dpKlegN8Th1zK3zEgnV1V0Db
/z+v38Arw3qcjBiNriVymz/jlaKgrCMxZz4Bdu76C/pgcTK8eN4zFvL0S0/s
6exF1+KweEndOCRL3g55umgAlw/tUqakkvBgaO0rj85hrFQ/cW1whgrXEd8u
Sysa0tfqUP4uo6FIdmPS9IoyZEpVzS7VoGPWLSSzy6IdfiUXXiyy5iE/YXr9
Ww2C246/tg88SoWv87JPd/nEOqUKY5/GsEDKcpEr2zeMyd8mY/W5TMgmKEkl
OvCh8MaTZGDaihA9Cu1rKBWWtUaNVnwuqNY+tl5Ezjot1zfTUx1EY8z8BRej
qkCNWCF4rZYDm6jDpIrNmVCIWLvn7tNkKNWwvkS1kpHwJURh85tWKJF8A9MX
DyL+Y4Ct+90BBM5pPDoa1QPp/fPDHwfQ4FzD/JKtXwmdF05S2WYUPO35JO+7
lIK4018XtRcT3iNasKz5dSPsXb8+2FrIQLrs4fllnVw4/drsbSPfCsbRW5pv
frfigzZF7p/UINQT0o/KBXQg1e4W/Z1WN0K/H1BtEmMiSqrGrnt0FHkpVm6c
m2Vg7zUZKssZwkKHsfhXaXSsy8lplVLg47Ctyx6LeiIHhEOvqR9pQPLoN++J
jDoEVw2jpmMQXcGKxf8mG+Gzgnri9GMi56KOGvzy/Yg/LX4CX4X5uLpMtrbg
5gh6JNzX6Bym4tDCExlmPwhf8TARXHuyFnkMZtV0NAsahxs+HzjbjsqRJ8Ir
f5JRkWvP9zvOgOJWaf3mzEHUs7/YaM/nQ2mbQZMqhYktb6IDU/UZMGi7Ft57
txMpcXP0dp1+3F+6VtvELw8raSPfnm9jYdSv9s3z8RG07ncyt7NqgEalkhb/
ERfB/5iKht7tmFD/axDNHMRegUOtTaE0uP0V6IjZzsHbiwO7ftl0IzicRH4h
wEKc26bvG+58xHfb4g17X34AWdXatOdBJbpSx9e9sRnFwTqzEfs0Bm6v3LNa
SZ0M5i57PfLRfqi8tb6RvoQM56Gvj9ansqBGH9CYsGbgzNzLmNKGERhWJESI
KlZip6T1ZmvhbojK3dtwas8wjm1IHdkbx8MZoxIJp6x+PJlnNHLxeymaLE62
maQw4BaZd3YJlYYdgTY2DDofu73NP50iPNLE9sRc/kMu9HpfuayzboFbndSi
c6+qkbxHuffZsiFscg7sdz9FnEPay4XZvjnYuNIkhidUh5gmlUXWnQzoFqS9
8BfqwswC7zvyGcMITFL6udRjBHtGn/ucJObh0h0PX70PNKQt4vTa0Xm49VtI
7wTBbRusB8fXvKPC4Py/K0tcRzHYf7j5foM3nK4abfR4l4PrpaFjM9b9EOui
meaLNmMmdpGWQVkPhDarCeFGMQKsuM3ZBjxckGPsZvh1wfgZJetmWQl89Uss
25fwYRf8oWogsg+Spzvcf00OwcLFvMZOIAGFK7b9Fn/MgNi06MCz33S83ahZ
N9RRjvZHyz4Vm/VCTd1IilzyDrSlvqaarQzM0xV3YehTcPO28uRUyAAednfY
hhYMQfpDeFxlRQVS/4gvHBqiICi2YMULoQGMHH3Q77qahFU15mN7BRjQFyrq
t9rfAZW5dtG/0umIz+Kvkz3QhoDL16U9k1mYdeV0Hu3hw1VSxs1ngocoERfT
+/91IQXHPCQLuzEYOV/Jp2AAQYZRW+6HcSHyd7lyQhAN5QnLrARG6BBZMXRW
tJXwaoWdSQcJXhsIF98X4U3wUZT/wjwxPgIOGOe9D2ci6HFh4pq296AaOyy9
vzYbEpOUKH8aEw4TAq1CfXX4sCTGoOc1FUlBPNG1b+jwKjlXc1o5FRkHKCde
RHLRF6A+nnuTjK923GVL//ZAIHCrxFfnFmRXTF0zLOfBwWnz/f3EdSMifjy1
T07AZ7mfZ7WMuXjKY37ZUj+AwbV+BvlcOsbN7TRVv/ch6ldSgWxtLSZLVufv
mCwHb3n+X3fJGkS9fjvmf5ED4bLKNqmCFly9YcJua+jB6S91oT8Sy/HAyfla
bj4TQ73z3qyaHITTaLpgZFEVdsd16MmdoyJ9bo4muiIPzQ9/4fLOPhgErP25
ZUsbzrwSmc4eScGDlMCujfEjiB2P1L1OnEfW3La1Xu+70G0yVOXwfRBTj+o8
Lxyi4/5XSuB/K9vwdcnm7G2OXAiHs4M9brAwYWh9ZcCpEXlNe9POfs6Cq0TU
YykXBtpFZ0LMr9JQdu9vm8VfgqPufODmHWDjbvGgjNPKLgi0iPYWCwzARn/V
n59qNJSKn1C1vdeJx8HL1I5ZVaKlMivyyC4ugm6ERJ/fTMZ0nbzAnDwPubHu
nX/UubiXLHu0RZeNFRWLqvd7shDaBO7magY0pG3qjkyQIf3vcvp+WicsBcbl
PFeWIpEXfXbTgwG8Ej++RiRgGD4OtTXS3hREsmVHE5lc/D4UGvfkfA9k/8U/
H1/HQ5pR44GKNXzk70jw+80mY4fcR7unPyi4HKvseUSU6LMB//CabUMw7nv1
dN4nHnZZC4lebm/AMnd7E+NbvSBvCf665TLBQe1C/SYr+hD/9lvAtw0daNxw
5MKe22TY3Xe8aSzOQvHHOfnbS4dROrehJ+8kwf9/e4KmfEbxadpF2UO7H7r1
vgU7nw7BCVceGx76Dla14mjNVCfOrebrR33kYsW9GD6/n4rxq76WdHMGPtTS
W+mlfYj7Lr2+J5iPHXTf4EtSX7FmgyfnclIlrp4odPzWxAE9Mi+aMTkAdn2g
W7tCKTxSzfd7K/NRt3qN19qtg1j9UUdKO4yDXUsvjmqWj2ALRcA1XoHgJJdm
hkkMH3dOiFi+GsqE24YJtedN2XCWPxuTJJyK564/Te02jKLvy7ZQZaNhVM9G
sg8TXnOXJM4qNiF887kF7YE0kYsRR/GGyHuVfJ/Zv9qXIV2kI391oh7Siams
fXM1GOnb8F+pNOF/SgvDDP8j1hGkxlmyJQkFNeYbv1A6wNjglfz2TAecS+Oy
rfpYONVWUDafmU9c54PuaXMOSlupzgvkB/CzdOfeqpJcqO9Nafh2dRDWTh2X
xwi+t/XetFZqVw8WKXXeLQ71h5szLYL6iYT26YHlQURvXHg5PN1bwoBoari8
RAcJj3Izq2ymBnCza+6cxIJ2CDX9TcxXtULMp8hd3h9JoGesu2z2qxlPl8Xc
mV6dj9gHu43mCuvRjNAlnaaDIK3U2mGSUguxi/bvklqZmBTRwd5aYo4HPzYt
PUdwok7Xq6+uuYj0KdWzdONB4dy3VVZO/Tgqb7Vk/BAVQbvtlv/poeF0ddzG
AV44VmrasgWn0+DUekfocx8FJxm1/2RE63CUdoe8NjEXa5OaFz373oEnrOx+
96pShERHmHcHMrArPTij6wULHukPQpdFER6VMDQ0sImBVOv4hfMkhlA4eu/R
Bb0RfK6KfrNnMh/pEuYujZXNKO19cO388TYkvVhLS/HiwS/ybbOuYR0yFMaD
HGKpaAgSE9PXqsH1DdKf5aLPoWn2CUfWkgm3i6pymy0Ckfjj3UFTYh3t05eT
hvRHwX2p4iKoOgIxq92TUasH8GXcfDzOoRtOA8aNM0e5KPNO6bxb3g1dx86F
1rs7cKJvjeSfbcPgW2t17dbPhqqHy2bXI0l4uXLZh3PTVOQlCduP3CvD/Ltv
d0Vn9qB5F42/m5jnFlHm8yIib54XPrLW9eIgzcD5yvGcAfD8Z/70xzKQQ/HJ
d7vChNlbL8m/jnS82leuHv9hANJPbqzMUx2FKnlceXY+EzHHeJsWv8oDHxNj
w/8GcZltr+Y4rw1OVpnuF3+0YXCXomOzJwNPy6S/TBF51qZknvN7E+Epf/gH
56xGURtVd+dzeD50wi+ENEeQsUvnxMvjTzmY6qzefqG5B9uTOrP7MvnYc3nr
sOBMCaw22XxcZcTDznVzIxUzH8ExD46zSc7D5Nd2DbItHbUm4UlNPVXI+9er
kMJvxeO4hGsyYX1INK55evBUHbT3tDiyO2sJTv170WSSjE0GnETyzk7su33n
8wZRBqTES6crbvEQUegX8JnbiHSPKqb0OhqORhf+UbxbBOWwg72rbvrhK8uu
zVipBYpnTfe9DhqC6UaBa0b7afA47/V927ZyDASebffO4IDn2U27JkqBpD+H
85k/gL+kKXlmayNOfxr0zTrHRozcMqnqvD68XS2zxy2MhcoFXlP2w1/g/Gl8
7CLB6WeXH8+4cM4W12cVhS/Po+FPu21FPcFZp5TiCuVKA+H5+rugzX06VPy/
2WqPckD6Hle3qIMHx3WdY70cJuxG0rqXrM9EeLul3X/STDwjHfM/TMzpy/g4
/xTCH7KnTj2ciqJirMer8wjRm9dObOr5msnEt/Xns3ZI0fH4vni3yadPSP3h
8ODuDzrSmqyalEGBs6ub4p0GorfonBVxKTSIDWmeXWDJRU2/yODgvCEIvFzs
qURtg3P8oRzdtzScKlf0PlzQBsf1Hz/LHhyGhc/6C9vF2jC23DODt5GPxqyS
3A/9JIRcnE+WtBtBhUJu/pFNZMiOPX6dnM9B62OBOzvO0iH4qMKYSmdi96M1
+56fGcXA5L0dLkfa8Krlnc9FOzLmajcZqK67i/EWn9ky0w5ECO2lVZ5pwsjA
fsHhG2xUDzyxm6YPQJz7OqatdBA7o8lXg+nEXM7xs4ZE+fD2Pqq+guDMnWnS
6keLqzGhWLSV1+yDXRu7b6llD2Nbw6497Te70M8+bJ9H5+Khha5IyNV0SC7r
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
Xq0JK+8nqSw1HobPGpne2bQhiK15+3n4AAkkibTBpNgavCtezUbrBJasfKJy
1JuKky3Z1bHvKBD++arAQ2sUm0xNvuiYt2H/3BeSEqkLue/9rOuNu9Dc+C5W
tqYb1AZPpkcqE5LKMeFJpT1wady/5PRnAiwVvidMJtCwXyJlYXMtEdZ64uaM
wwyoPJAhewnUY+eLiSXxTVmYrDgbNqdFgyPpV9XOUA6uuEfrkKQZiAykp7K4
vZu5bf2/MfMKyFtd7kk+SMK2HJlLS+NbcXmVR45+JR1pYT+23fdvh7wpNely
ERN/Y8wI58/QYSzMnqv7j41Hhjs8jt4NwevOgDwjLtccit1q+MOCCLv0WIWc
eAqOFcV6/HUrA8/fv6nD6ZUYuhn9WGg8EgLPKT5VCyycrF84FfxqDMdnjuza
erIX/QEpjhkh4+ATSlim8nwCHpujKFaHqnFP/Xxsu3QfyuNun3v6OAvvb/mU
ndWzh37pxX3/6YfhjW7TzCEiEypJy0JafcchOvPy8HwKEeKZyZ/JP0fBtGMz
TAZuoFPq+9La9io8bk474RjVjdbAnptHuX2btSdXddt7LheqS0XNrJrAubzs
h17yY7iu4SMpZ09FVraGzZ7KDqQbKc4k7RmHkSphukhhAqLOz5tDB8ewf2hG
xO8AC8SSJ/5/ojnQ26L041UCBwU3hoQWA2h4qNdw5KMcCTbJLrayyix0RDhF
GvpzUOug1U/poGKcZ8HYlutPVzfcuFt6IAe1knIzx9XoSM1/o7qENAFvQeF5
Hy0q/swWrx3h9vW6W5/iFNoIuBtH2zS6pQKxI6Ov2/PKsUpkxN/xVBbSF8W7
3h7i9t/kvs9vtpBx6kN0jjW3766yKT9e3m7DtWbD4R6uj1x4mt43pzMKsfL4
aMJpForuUHvf72uHdLoE68QtOuSrXyiPhOUA89lfr57pw1IpHhHjHu5eCaef
4aXQUWyt2Lm3dBC5jwZWtRPHkCy+0yParx3KU0Mm/K6hUP3Nmy+6SEFrquRu
lWsNKJJNvdAe1wVvndxVcfqj+BIeSithD8DK31GnxOobZj/deTjd2g5DXvsG
DaEmDPcLH28+x8KPY2X1nIctOK059yJ/OhS37pqY7p8iY6lDRInBxToc3v4u
+UwkEU5SFt12/39fvWrvdYY3l9sFvpxI2FmEZ8GT89PSLPRIpYZ5n+kFo0jw
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
      "]]}, {}}},
  AspectRatio->1,
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{0, 1}, {0., 0.9999999707837952}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.619450372742446*^9, 3.6194503768068666`*^9}, 
   3.619451482017777*^9},ImageCache->GraphicsData["CompressedBitmap", "\<\
eJzUvWmXXsWVLpjlfIfMlAR4qqrbw1r1uf9DV93bvdatT/0XPLSrPBYGl8vG
YDAuMGY2HsBgJjOZUWYGKUlNCJCEREpoQFKmMpWSErCEJMSotBDK6BPnxI7Y
sePZEecV935orSXZvO97zokTsWPHHp797P/n6//x7X89/+v/8Z1vfP0f/vnf
v37ht7/zjR/+w3+/4N+rj4b/Zmjob9ZXf5/+hyH7/83QEP1T/3nJ/jM09F/q
/xk23/zmN4370/zgoQG+D18PcpX4/p/rf5cZc+ZDs+eZW8yVF11gLrjoSnPL
M3vMh2fcr05OmRsuvsFMnWz+85O3nzSXfe+bQx17J3u/C/13Q/9Y/zvW9n5d
NyT20dD/NdgtPlf/vFf9/AOz++mb659//0eXm5se3WyOnFr8b2dzt251s13m
yd/8zPzw+z80P/vNk2bXB2eG/m8w2M+pn/W0R35OX43/Xv97bvXPp+b4+uvN
RVctN9sPf2A+eHu7WX7VReaG9cerb6o/p981ky9PmndPNxcufjxlbr/oInPb
xunqjgcOHLD/HjpsFpoXHPo/63+XDHLfIbQ0zWR+aeDx2d8fW3udufiGJ83W
g++Yo/M7zLO/uchc/ticWVg0/1Tf9ouD33bxQ7PjtkvM5Q9Nmvl3DpktD/7M
XHzbDvPhIkkRWpilcHiZ5/5NacFGqhscM2uvutTcMX3SLDZDMyen7zCXXrXW
HPvUdJxUVU82x9bfai65/A6zZu5jUy2Pm9OWtxg2ix9sNdd8/5u09dy/55ur
Xnm3vt0/DXY7c/qoWXX1L834kdNelj89utr84tK7zdxfB7xd35iFWXPrT682
G080knfmxEZz9U9vM7MLeEV67W5fXIHqrgv7zR8urZ/sX+TMiQ3m6kv/YPYv
kDhX/y6eNsd3Pmd+f/nF5tp7V5m9750e+q8t79Gh0Z6aN09cebG55eW3zPsf
fmg+PPq6ufYn15rXj35kPv5kcbDbDdeTdttPf2leeTf+3S8vucXMLNAatL2f
tgi3FhahfP82q3By2tx0yfVm10eL/haLH+0y119yk6mW1g6uXoXFagfumbjT
XP7j683Ts/Wau6OjfI9mJXvVMTRurv/pb836o6f56/y3lrfxi2l/94Pvmovu
WGdmj580f33/kNlw76XmJ7e+bj44Y/5poNv162No680/MT97cIs5eOSg2fyn
n5mf3LzN3io/+YX7D7AFNiTrd3ssvmf+ao4fOWo+OL3obnHGfPTGveayK58z
h0+bf2x5O1oHqz3f3fh789NrnjPzJ/Ym69BqVP36d7dfeoV54qk/mCt++F3z
7W9fYC797dP1ySt3VPFelUAtzD1mLv3et+qZ+tb3LjWPzS3UYtZmB2j3b30S
XGJu2/ux12Qf77nNXCL0rt2jP/6xuX1mITzpvc3mmkturvf8P7a7Xc/tJ2tq
7Lz3MvPzu582V/yEH9YtR2Sl4rhZf/XPzB/3Vdtx8Yz55NNFc+bkITO175j5
hM7olnerVuDUIfPgzy4zD26tVOTJ981bWx80l132J3PolHGrWdlYH+4xzz30
gHngnlvMj/8DHQjqY9oshLU5XrzO/Ojn95uNs4fN4ZmN5v7Lf2Suf/GYPdT9
a1c2xM7bfmQuvOJBs2n2iHn38LR58Y/V9r/lNfP+GfOP7e7W6LWOWawE6PGf
n2++dSHbA+3HUm3E97bcYi7++b3m5em3zZED2834LT8xlz10yPzVhCVoc7d+
fUo9eNkl5q71e8xbR94ye9ffZS657EEzz5Zg8fQJM7v9FfPsXZeb838gliD/
mMwS/DNphk/fN29EBvAu8z4Jbc+c+XjWrLrnJnPlxReaf7vwIvOL21eYPR+e
+a/5q0fdAz/5y4S5/uJfMZeh+ECz+Ffz1sv3m19d/h/m+xdcZK66a5U5sOBc
BPXqLlMqH8+sNHf84iJzwfcuMBddebtZOdMYcV6pfPKWefLq39SD6udvm3ED
6n8/g1P3/4vvl9X/t2MWTn1q5t5+r/576vSn19mPP2c+OvnJWHOD85qLquuf
tv84sft7d9sbH9xc3/qFV+eaX1ZCPXXwXfOV/3yu/nz+yAf2vysdW31SLYn9
b/6Hnr5qywH3m67Z/9aJ6Dfh+vg1lojn2b/2/tU9q99Xd2085Or74+aVHW+a
lZv2023YI4ZG3UTw21SXfRFM3LB7oh31uq3z/ucvb3/Tj3DTrrdpLt3Jktya
JFrehiYnvMCYvY1covp2dlj2Gvu46jN6Cf7TN/YfbQbVMy+9/qa8wt6l+bpT
f80GMYxFgz5mM2J/0oy0W98TL1uXxIA/xE1mM8H2SS9uPVTdPPye/1mxcb+/
18adbyX3orABH1o8k8N+fOiz5mptwTvyeX22gHxh6FIusexVvKXBbjeERHIY
DOVcsSj2u+qZpFv5CJkI9sWdtJGRNuAT6AUk/inp1fc+PFVvK/v3o4VT9ZfV
5Ujmq8vpYzFlcnxhITpm1eaD/g6v7fkLnfH2uT/87dr6kg073mwk3yukjbve
qr+56p6NLRRSKmn2O5LC6qEkMfV4rYQiRUReFdin6g6wkYOuuxc9p3m/Znbl
vaIFaSfo9kZjboDy97R4f147VV3RDKPSYkIqO9H0MHmg28nHujdMREweAVJl
O40WzZaYAS8W/NpqyEjFsdsWVByU0mYl7c3ssz/4+JTV0lmJaavnaH40Pffg
+B5/r/FN+1vrObSt+Wf8UBpYz52bLBdb/vq2O2feMS9um/eqgG+YDhDynH4T
m5Vcw52zRxOVybWSfCtN0XXcv0K6KELIF94KdPVYqKFJCQodVX9ZVoLi464Y
U6TaVT34wMpdfqKq9Y30oNWSf62/+eoVz5vDxz/ugdeuBLvZuyPR2S1GUTri
O3523qs/2zkTZsxqFHerdoqth3a+VDwkBsNuK+2t7LvETOnZgfhpo8Gxd2mz
hYzXoOnvq1Vx796pt5dVE07mm9uMcnvOG6G79h/1AlYZaO6RI4nmICstmh6s
PJ3MesVhL61GESkOpDxn3zzRTEavHrxUnn6uOv7dhCEIb9Yx26aO+Jutmzw0
rOi66giqhlzNSfUdVxqkp5DepKOKzY7XiZN7D/vR2N9zN4ALbnU/EhE54XaR
Vm852BFiwO9EMxVNRXr0h0tyhnHzIk6y/ItIncIPmGdemjEPT+zlgu1D621t
ghGxfFLTzgymabXHdMRjnFyRpuVOjL091xu0XU17TSus0YKmha/eTUza8Goj
ySr++OZ1/hbVeIT65W9XrVcPDMfbLunWCM89F6rmvdVtpg+9W8vr9Py79X9v
rXbdk+v3VZ70QbN77qh5ZGKvn09kYCJlo1j8yHbfNn2ETKt1la6xo2lU2jHt
pazCRAMaxKaxvzzH/csFgr8EjZImBx40sUH4xLrpnOXJrcLSJqffWItR6hHj
TZ+lyVLyUfKghX0D7yf14GXez++Yx1ZP+Zd6+qV9NH3PvDxDN3Iv0+cGlXm5
elDqHveg7PnzDYc6xByNiKmjRQmWYc88uW46OnjEQlkjgikKTeMGcemZmTdP
yIWyC0JrLL+WkhmfNh2z/vVGJdgJ9++U6JYx97FQIshBt1pcfC0NTzflSLEi
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
MGFs3AJzw+GghIkSqy2iIQ18gM0PBwXARQaOAe1Shyk8U0ZmF4cEiusjS0l5
LxuXEhTPMYwLWCKWlRJg8RKkNjKzXbcmdIbW15VjpiUx5VPYIb+lJqq7sPyH
78cn183xubO0kMyKyYSOpPmltQFIALXK28MxBEKIhwwVeHHbhzOmI4YZiZyB
LXXwmfdrMdaszAeqAQbHSpR0GipGEDeDzgOPSE9U//M/Z+Ss+u+PlS+VTrat
ntT+t2Kjc003dSB74EdJElbL6MC8rHlt1OK+wVHGwDrqatW/QLbg0ofVwVX3
VDdff1113fU3V/esOlh9eKl784W56o7v3VHNXajIlFWXPqgOPPer5u3f/M5N
1Z1Pbq1OXbxM2wLYUmg8FA/mKjEIkRcStO5SWRXVRVISi3BZXA39/Y27Wvvl
1sYnbHlLrV2l8JyaRSGALM61Kus64WCQceUassC4cmlV0f6l+0Kbgw6UB3hs
qNvMSYLT/J1t2HG8PozPSq0BlKEhF9s5KL4h9PZjmb6KQ9Sqk+TOENQKq+JV
nybLr+cxOTWorN01ihSk6WliqK0egeIJA+rCAyJc4V3Hy6se3zY3MSq9UyWn
jTwJ6s3Kv5yitNoBU2IGZPP97fQpoc8vWJzz4O6Ra46h+bGk52tYU9Go0b3V
sKatd1j/fF6d23h7df0ty6vdJz+oPnhnd7X8luurOzaeq5q7/OzdasemHdW7
n1X+/WfX/6z63h0rq53HT1dnFvZUz991fXXTU0erxcuxEJ8bVGdeS5TXFOv3
JbF7ul4/WqIthzWIVW3q0UwkpI3m6S9d9or8Lf4OL5ExrSibG0ebSkxu0eLi
UNIrH4ybOKDnKY5r+Fi8nQYuwcWdwvjPlpXtUx6RWdkgK3NEKZePFwjqr1ik
c6eVEGsrJqPMIbb7EJgvii5RzomWONdC7ua8Z/mu5nkzmRwsdAmlG7C4+au6
q4AsVXXHY1ubt9339K74S9Plzr44SXqK1caXtFt5zbmzblYnwuAaPZG5M/Mo
k8n9unyndDjY6cYJvi360Wuj9tpcnK3W33Jj9eChC9Xl5oXL1YVDD1Y33rK+
Ovt5WNTVZ2eqtbfdWq059VmPkI3Pz6yrfnLjb6ujn6RryVlVZdlpsYtmeK/p
vo7H53y/yvCKN2jQgu5iUGzEIyF3Lduu7RhZIgJTfnZvC1SWw1/TWmvwBRrV
YW9PxHj4+NJbn1x70H8diblyQPFIAigOos7pCfKSSkRLcyDCxB5JhkiSaPr5
pGmVHtInaJxykCrbLFNDVYCxoUXufley5pe8mxHNr5s7bY2kgJPKutLOOnuP
xWWJ2w+eRHVYtnhx2s2MF7ro3l62rWYZTpUIc1g1qyxc4u6/MqPtiPfaBVZ/
51vV/TfeVm05f4kMxaXzm6vbbry/emuRmc3FI9V937+1eu3dSz3+vltvuKea
X8RmUxFhG0Z4v6rUzlMavq6xp0iMX4m1h/CU22f9oldUcL9v1uvN3cGZ84vV
9NZj1SMv7G1CU9Y7HCE3KHjiwTKnFKOPd+/PcXfIY0HVS0IUyX8OSdClrNOU
E68sd74goac3Hm0cB807cNhB9VHvtJgd6NNJ10TppCh3Lhgu8lvc+554GbZ1
1TLEWikZKRHG3Ayf8Cot3uOokJDKF2fYSMOFcn9/bM0B70swzlgyq2hj8dF6
YfNbfGJl9kHZKGR1+YM/9NwemjFx0JpFKikg48RGKGEmybTaEJItLuTe8PWs
KLZokii03LRgqh0ab20vHKruvOH2at9Hl8mKXv5oX3X7DXdWtd/ao53QvO1/
fqO6/sEN1ZFzF6pP3j9Rbf7djdV3732z+uBSRR+lHkK1sU2QDHtxDSdBP0ji
czfR06HZpkvcx+ht9qBKF6Ku5OK26o9+s4kcLD5Df/XvcV+nUXZ4o6kK3OFE
07KIWm73B9MdYwUyG1cFgqJvxWlAj4vlBR48IKILmHSIAHe4cBU6PrnJI0L2
U76fywLx91/bfcpi7mjGDPbVCLEDKpLX433UhSrWH3p6/SGySaUlMgpcgoCq
b/58bfPv1VuOVmteP+rXEL/jxbgOGCBONPyiG3pEZl35yiFaPNrCMVWZikoB
5LyhyZDetpx7yRDhaZ523UiPdrP0aB9gHu1Y87YHbvxxteLZ+6sff/sb1de/
fl11493PVfs+uNSTGkTOwI42/+w3C6tr3EYjpLmodNDFFd+nLTIaYpnrbTiy
B1wK/+A2OxzI0cwshdXTvnBwDOUvmguHIhfFzBYBxEwn3IILuNVlKRcRQFlk
fCWFMYRMGfNPY3HsSGxQZPl7mq7GHOsc+/uX9jVQ3PkPF72RE6tEqUtDobXh
BIX1gGHEzrH3Eb5sMziM+Xx243xehFHNefKZBUJaVRV2uXwQZ1k/+fQzFiUq
faISthjNFW83v2XvO9DcL+r8XFNvOFvXRk+uKSOBrT/HtL+FUgX5phxBvaG6
b/Zjj6B+fPC+6oYIQa1n89K5auNtP6wePnyhunz5UvXp55erSxdOVHOHz1af
Xq4kEu2QAB5jhrpjnP6kdh58udSmJ1dX9OTaUIjYGc6ckQozN554QpxAo+wV
fp4HBZPjpGDiTtZdc6erP9Y39tCqPQ0aUBt/MuaI3oEYBoWwa3o2FIF+vJZM
KImYoSm/NCclhuQ5Lpb3S1mvcpUQHIrXg+wSLtAV4QqKBpmvXdSKZiyKSGT/
bCmx5/bnCFha7m+itbd1kivhNvGu+GOee39RZtuGVQrz3O9Ec0MyC6//1Sve
cdvUkCoXWhFY0dazYAVqjg/CWPjRMI8LGTJmVXjIpvZPOiXdLkFMo653MJlS
l7p/5WfVd370h2rLkZPVyfkt1R9u+k51+ytnXao/mNLqUvXetnuq7/3od9Wm
Q+9Up47trtbc893qB0+cqD6pKul/dC1DyMLyk+i5V+ezAciUmMWg3zzqWt7z
EWhvcEk0Aq7SjGL/Qigzm3XEiS8S9ZCK9n+cnu1R+/Xv/fqV6G8OvJoJzbX4
cyu8rkyrObM0Jt6PfyEGlieZZFFrt2hQ9MQOd0tmYlPcCxIdHon9GEsOj/Re
W4BS1l+Y7rrVUXLQILJE1XIerKti8m6pIJpsO1biD1Ja2plPbzqVgDXj91ry
WH207nsoQmEmc/qN0K330IlzlCI/9uf36WXv9uhAsJL26SemHlXaoH0fzOhk
8zluBOnfV9gtkcbKyuMw9n2CULpPt1wr78hVn79f7Y/4pvuq9z+vKHSrLn9S
vb3pD9Uvbvpf1Tevu7665aG11bHFiF/Kf3bMnfQrh6cjFX+uXZdjiS9EFba7
D5+C42DWhAxg6kbJjwwjsyiz0fzHudjk8lPU7ib76z99mbqwUvWemHtC4Gi5
BWEoLIaqOChcCVQWtFkNG7syLPaayv7mqMKKDYdpUxMYx2qoDK4EpuprbQt5
PYVupUrijZhytmytJ9k4z6fzhAwHNxZM7hcYTgWDUQynCZHYR7aMtwNsPCpt
GJLnqt8uE90kiXvP8l1uNulpeS0PLa2WBLEkuQk61/bF1HvaK/Rczofi286i
q2i4XOtjpSURfF2yenFgC/97N5LSmmVxEdS3B/Mf48uViJV7c5U2uxttCnkA
6lkA8LGsn1S1ri/qbd6jqw80r930wKae3u0mTnVf3e2U1MwMaDNH68NXkGBN
YzCMsJDUHRZBCXW0enhV1DoiE3YJ6NDacIPu9hCdoVsWmpcezXt33V7e/Rqj
UlZjLcUiaIy459ZIB9GYhi0FokcbBLTz+HQUsFuhE4n1BT1AehwL3uMLXheI
Xq7vi9Q2uv8XBpw+YjY/UBSo4/7drrnCyXMfJ/QjVE+oSBLRjT0cephAM1Jk
B5cgHD46b8VymwJbRFbEiRFtN65qBjWUWYlTuPIlKoyTSxdgrvxblCzFKJh9
sw5bNYPyPgOgNtUsGOrg4u7VrVpXyEB6OPyZUB1FURLb7G/SVZFB+ptmKY8A
FSe+epjhRXlBvZfgWEO2klUDce7QaiWOS289bhy6QyMODmhzr2QnpGGlKwbX
up+QAHgN0u9f3EeRs+ewIfjVFy4sUckPwB0PM5xyJlDplZxd9//KXrHEbBTq
QrsLJpOPKIeZRF2nGa/g1ke2iDtBhdFXoDw50gAwtRXu5i7dZ/7hJqt3zn6U
8GbAg+hduYdqfCGGrYWlOks66rXiIvgrhf4XlP5PYiGpwadmoBEviLaKUr+W
UXkoSMv6vC8uUr77yR3Nf/tOg2PqAZfNuKVuWtD/VGZxQGwY/xHHb2M6dHwH
mv0sLNkk1MtOkWKhabAE3weJOJrYHhwWp3zyYssX4/4OfSzZicOktRb0Os7w
sLiM3nKup8BaTQxBu1aUM8QE5+aDHw1RMe2260gZBtoxRpRgiBoNyx5ojNDU
savYnlP+RHPhuPNHXCbIZer0dt9Iq3YiOQXBGZtYFu0ZELElkzBHM4AALMX8
dMl0bm3Z/Gj4SLC2luqmUqiTTU7YI1Y0EpQ0QouBqt//8acv94L9DsJ7JnPM
0hXuo+Sxh0elFJRNblKIkCN85+YOW4ohl00f9Hc4e+ycspsGEm6zxhexAn3T
tclsOG9c2bSXMdte6mb7uHEiabSDwmmF/qZ1yEEVGnz0pGR5FwfRHIlGNfxb
HlsTSCBb9r5dkKLAc7WYKdwvt5c5jEM/JlSBE5j5xhoS8RWRhRRdxV/1Lf4y
tRpKnGANU5cil/LF3NrxdL0E6MRBJhkYZjFuVlFT1vrZ6GgM0tB8CF4HPMXJ
lC3JLIUf3P9q9FpayGTr18rOQAu+62G5xnXOfM4Xm0+W/4YGPjb+g0T8V1wu
JSSpvaZz/FdTrYCERhYaGd9EaAQ7F5wNzpR9L4qC0e7G8k3EsE2H6Hw/OS1k
xorfgUbxUlTgzGL/0WrnbKi3XBfr4cbPM0RAO5HYtLvqeA3LWmF2HG8DH8Nc
kxJUis7CBNVB0mDZLq1ayWZn3eSksZsx1qp9fGiNViPbG+t3Ch1XJQHk2c28
fZYIP7FRUToaZLOM3EC82iIuxel30f+VT7OtBmvix8j/CoXf5RM53n1hCi0g
fyE+a13HJs+nOXom5NvsKYBezAARUbgoqewi2XGZLGj1KvFsnAqFzHrGd4Ue
ZVFURwA4DyRFji/ezqh22opR8s62aNbKf2RqWQ6j8vxT4FsYBOLKhehlx7wJ
NYl9jjl4j4C8EGpA8bXb1hgO6YSKjbHx7eWtWnoYdgNL6wTh0BdViqfFfzOj
e2Wv2+VnWnV5ZGDbTh9kYDdgbUJfujzaSKAlzssVwYxiiynyD5RDRy3rhWeh
LVIpOR9PMZaLpIjjs88vVf9ye1vh9ptndzf5q1JXvYQ3HpeID4GZL5+Z0/sm
DQdDp8o2Sj81vZxaZaYO1xdNt5nj0QrjPpA7sWvjwYnOLrq5b8UuP+kOqaa1
g6IiJXlWDOAhUQCQYM60vDCnLla4opUuUUgert21zOcLTICXP0iG9yJvnGsX
ozye4qp6mybw6CJ2cJGaVkaAJBvxt4QHMoq+jYfCQogZ6Qz9iSkyZzWjyLPO
KF+hxP7uvx0tHmUHuSwDcgVzEaxhwp11pIaYrlaI240FLzueOePGqLcHessw
kC86Cta8/hbRcXi53HAJSelM04jTeuYuPj+b/ju+nBKSlhzjnEVAiKYoYlHB
c3565jiYNgCfAR9R1IAbIShxKjrM5DYWdoRLS3SVztGUxNNk0TP0CNuxZP6m
47GcfPfjUv1ORCP1RQDofJuMGkrsabpELST9VOYCpzhyz+a9ewYXfJJlU46a
MbHm3fSt3vJWKxBU+30OKexSR6hBkY8h4hguf3fc6IlARAYbVrmT6EHBf0L/
m5Hqxc3BG5BlRlrErYVYoWQhlp8VaXO5slYHC5VBmMIGXJoUuecEl3iOCgVu
BOi5RbqMlaTWR7F2sCI/srDqk5dXIMP5P7qZRWf2os4GCw9yRUB/Yf2NbMY6
5/ti4wwZv1y9cxDMRW2cOaXC+RHO6ixff4jvc7Y6h/DarKYehXL13cvkYdz5
xDb/pVfhL+UHmluPD6wI3mdX6hwdQl1PV+BBpMpf6brOSwhxJo/kVIpVJReu
ZG/buQdvEd1uchZRaCAqWLSCXEJkfth+EBgEEU1q/TpURlsqN+tGZjRSaFeS
gN4NHlQ3tnmj6s4/bk+jJCVtMHBajvpGbZ3ZDG0wF5CX7YmCDAHNxqD7J/py
oRcuLZsilYlKuC1/XYnCEXVOVGx2m/EqLSiDa4L+5uHZRM2BZ+FpulZvOUrP
0DEl+BYw8z/8vbsOnSLjwLCqHloBsn5UEXujVnAFSK4CnpEBfW3P2/7eFQPq
e4iJGpOus9+g8xZ5iyvAPaJVwZ9aOeJgNtCvsaLKVL4W3FLkltPKY3SW8y+b
fwV2J2t42UMo8pHgZ/J0jdIOTkNdMieAlpEwgYiY79MJQNvklnhZDbq54K6e
TxCNVn9/60v8CojLYna7wEGcR3fH0HEsRsPWljDdRlWkQJJpeFpTYO1Ac0rB
k62qby1MCK5RSZtmhbwYB6Smn1+uwueDqFiNhXc1QihFdxJrefXALS07Go8g
uSiso50mB5UM2RLN4/eLy5VCJsreoxILo13J1JQ9dsywB2Qx8yyVqeb/JfuZ
G1sabacAisLdnCcRJgC4L/6KgolSqKyWGoIxV4fsP+KK1roEbfMePbHgbTV9
Y85WL2TqCG3Ah68IpRvjFWwab6vFEbvA+goqtprmx4HqdKg7IpoDal5+/S2/
+h0JoBPeS+KIygNkk3C+5UJdty1RlQ+ZvdZXEkB6b5TdrrtMWJSWFJpZTqWh
jJWBjgTtzD4P/prfR1btNZLTKXE2Z7Yp5HEHHC+AAgJZRg4HFXXmI0Dz1EPk
XatfS1y3zKkByZHYr56Km/rBpwuvTSZfq+jK685aMWmx0/u9kqAK63nzx7F6
EMBQKV2bmqieDppmfJsMRUgGprzBaQkSb6PzifdjETq7BsnIlMdvKUItFJ0h
ShFJh20xIluBduCol89oZPLnSJnZgvSxa0U7umsrGO3yFKDsV/eteLN5zfV2
crdg8F04u0ySV5DCI9ayx9qbel48ruPl9CpJqeV8ZYEByRLHDhCG2wxpoDlf
yJKW5rMi9aUkD0dCF9R1y8AoxBAW8WcsWqyAsWh9MJ25yFTHbkWsd9J+dgmd
YMnkK5ktJVtIu1Ic99bxm2l3zVMIHrEbb4zJ9NaWoPXPd6xttKxYd4PR7m0I
XqSn8V5LvvcXzvGUtrxEoI13L/EXKFdSThDl3S0011nRRPdOudbV+GVlkVKC
RoIKgdCk2H3kcwykIjc1gtUjtrTgohOdoHhSVj65zUzbZcfsyWQTFsACtHhF
jIxzBP1E7J9jHVLsvFt7QRNYKxvNd42KV5LVfx1XctNYVixFAcIRm7OAusXZ
FE2oalTky9JxLiNoN+OcetVF397uzHbZ66zZRWhhEQPEarXLKDqKHL0S1qO5
I+PIITR3ErmGsN+/t81lPPz8XhJ9pECkQS9sxbphSdkKnE+dTQok3PUi/lBV
jvC91tp1JJcRLnjSs/wfpeguIzoDkfG+7yTCjL0RSaIgGLeeEl/XxjtT6Hkg
jiRzFHEubqS69Xevi0lVHGAMVfvVbzfuFMi8SC8mZErlMjQxwg/V0066FkE4
EpLdTMos3KASonXq3QvVvc/s8t/u+gT5Z5uASDFfr472I9HJsO7bRSoa48IA
UgluTKFR7FQ61gmbJIrrBaCnFbzCoHKImuhsjoBzxXnjyiE6+zGnSxZjPLl2
FsJgVlzT1HdGYnmlnpmlUCLcpdIyV4SINp2SbVuI3AKlSl7ZcgpVFklCut95
pVBuOI+X4/WEWShCgJIy1kl3Njfj5Dyzrmqm5Ky4siCAt5lUH97JXJ96464T
BULQ/CeC6OPgFNn0jZ1r4BX40yuG2M0ZsLf9adLvvAv5+F3JjH7WY7nLdgGk
IkbuB5z/ZmTGTloveT8RednIqnHtl4KckRIpoT7oojqFHsdzq/LwppJs8hHw
iJ/JGSbyz88bzWep/UT41F/qnj1+DsTIsG2WzNfaib1U5TnYPBxQtPfZ2r7G
9Fl4Y87iITQjMYSWCO5X8KLQ+qow5QB/svz66V3pwkErsly8pxu3XpGgXJ/U
OIEpj81QbaloWa+IuVDcAy9MzLc7V+9m1x2fmt3jCBNnpPiU83B1IchSrdrU
KpojUTd2Qps410hzFdo/eW2BNP7Xumh+SblWeH8/4gXLfTcf8/wyam+lARTZ
47PvXaj+/icvOWnOJKKOVl9eIwTd1JfA+8x5wHaGclMuC/3kuoN8AyRB1sXA
S6JV7oWVufKKrpAkN0bXYVj34lRVzGGC2bxlAKtxCPqR2RxELbNLQcK0zE6M
F8Hx2+rdTld0SB+YKI1OZ+ZPioB6ougoFSlMW3G0WR7gy4XvRDNxpt4xoBmv
bAMROQcD2vGN5ChrpiypsyBgzWXe022p6n8oRzzClijhjKIaVMgP2O/IO1fW
punJWaSBqShophtXUI8o3KcVaPJe1apBctRufnhzKh+hVC3GF/Mi/3nuBGl/
/xc5Y4g4uEAVPYpfPEDpU7d59L630E4qweVS/LKmwqFB7Fo1AAsVDULHcOBi
XiloLu0KHGZ2PFqovhnAUzspbKBjUGYmig+DotJFDl5PiwYNz7162ANkOlFk
kEipiSOJkeyCZoBLkcrMfZEbQwtIqQdWdj3XI8Iy1HEshuyQN+IT0D3HrdMw
rqO3Jx03nWAzakfdTWIfjimwLgR+bJJSSCHbFkPgQ97hfkrXbVPmpDVK/9QB
PzQktAWVUK5lIpz2ivbn3l80KC5FfbJQzz9c0WDWVFD6nr7ZnUOy6DcHsXSI
jGZFkENdYGNhkiJsEeGCkXqPxnKgnV2vAn58dhyNKzGrcHVki4tQAjie/RiG
cJf4a/YsHG8WjXglRjicIIVuSsdJYL790j2eB0I3zncZB1I7DgXduqNW0FW8
0MCIk/cosqTKYwjWlZ6YwKLiAFaWhib+iHWcJ07JFPuIlOckK8qybr0RMZLi
a/Q2eohKFpyLXYdO+sXlFpA77sgcPbluFh6PHK6VJC2T5W6mlbpjs3hKkh1U
RKFwYRr92T0L8g2PpDJQ6clRXkHLEu3t6Ma0s7mUYtxeC6+PABWrPhlvET9x
hdY0v004BEE36FgAUbXFCF8k/jxGWsEK28sK7PzALtH8Rem7xGYptY033LvR
D64o87hic2pXjdK2dsMg+mrxpYvkTilA2sBavyqtiepdjsh6imvSxy+TtY2Z
FaeoeaRimKg5vZQ6SaMbS7ttEJVqJDsL9y+HCT3sJoAUt8wMSGCH3B1JnOFc
TnaAEfdfJWZFWKTCdU/Sh0gvuaMx+uQTP3hOnHy/+s4v1zf//fymI2IlIBWR
5E74QSQnzMPyI00Vv2VpQHdhO/hVGyWhj6dhacwz8SY+zyk6EoAxiRK4JaFw
B4dHCkrsLsdPumlO3idxLVbN6E0GL0QuVKGv/JmkcpKYu+JNo6W/QAts3bbW
h/zn26erjz/5NK9QOkjK+6IHyYLF4cvHYGu5JhoQ1UU4zT6V+BxbWPvO/XH7
Qi3oomFVMDUIHU0mkhkKJCg9cAESmFm0sWSDIzaJ4PDruyFZOEu6R9ES79xK
v4JFGdkZSbB1yoLtc0xGlAjZzGyrtILbkw4pgrsGRSl1wEMHIzfPqzsChjPR
ly9f7qHWq7w0F7k48tE4qcNJ7GfazlnWNDxNfFZ34EL9t9oBrL+gw9aSlcNX
jSMNJN0LiqJsU6AAWlzihHIM7YmXD3JWGljAaedMRIeKdRqaUsXtFqpYPsL8
mo4/64pR6P055VuyUrxFMrelP3xgU/OeOtiO1I2tJjfk8JtN2CYSQSaUpiCj
JFX33C2sDRwrd3UL3UbNCuO0ol2G4/4Wb493tKhIEWY1TVJCmClgc1m32r1m
BqKUpIO45RDqHfbdAFBcHXBtmWvsvaCOmwd7npg+SF6uw/T5CXDTgy0Zvd6N
4vZVQhtrZu03kCWdtGPWR1XupuhGSfdPVmVEa6NUKX5cFTzrnBSumC8zSMiY
GgiMHGlhNCIDOxr1+VQeCzl/RPCg1SdCJDTLfp8NOB/WbwdGzZExlVTXjw+h
UlOMSSBcxgwV02/avdA4fSRx88b+d5rXv3vPK+5s1/vnxtadxC1kCSk9fWcM
9CdSWh0OXFUE8ros+n5xGiuvOML/zkFI9+w75gJIt6/Bu4rceu2u/DIv06I+
ghi6SqYkqzrB49glbGh4yif0nskgnIlZvxbfG993PLbJmVZusZ59dT6E8u+I
lTBafaOO1QgNUU62xbjASE3njvGlJscR3i+5xWk0gvs3pe/rJ2Z1gRWrccCc
vDznqshMKFIQVZCFqFd8bDxBzFR2nqYPcfCoy/q2nUyFEmfAaONGf5KAzmEu
P7EDhPVzWKqgE7NlS9FiFN9GRaOfX7pcffvuFsGqD2AUDCxfN8uNPl3YrOfJ
SBeotcMiq4NyoIRwm+EMXqRy1Hk7O6klolWAXd09X8ZQpfsr3+TI8s2J+CLO
LbncoJpxYtD+T/ByxnmJo+0TYUG8l9gyLuANYMnK+3Rl3UVs9CyfWJnovlF6
TSJLiIqcCd8TqxIFBcqDltupePJtGGWGwS8uS8wTPjDQwgchU8BE6LMJPiFO
Q7965Pm9siO7llW+prvMy2+0kgA//u1rPU6bkYk6rruDIIGqinNo0vYsDi/L
p+cJuFcms80ZegJlsZQ/M6riuFOE8u9xkVR8mCRdz9DziNAS1eBn0j/EzuXO
+OzxcwZQVnR+EYYpDBpvcSjVRkgNV0wveW38mebjLIP7xBv7/+z4HdXXblsd
9DwVhcpixR/NOFEDZWWWr7K+ZazzaNu8tgP+aDuhpjN8LDMYpHazXXJFNqZM
0YgRipKjTW8tv11zgdNXnxVauYtW50zeoiO0MPc+cejEOELVuBUbDhGmJtxq
dHJGnbvl3z+8cNFlVyJYLz4FU3qeqLhS1PKVOgDl3VKSTVbc23h2oijLa6cR
DBWhstuCJKFoSEs2xgRsLNH12Cg8u3FeLmT5DEbgzrcHbJyAgV6l9oGHnJYn
F5sBK/c2gcC/RhTd3crvXtin7toMDx3eOT4ahVJTfPMxzO8VeBLDqRBOSAkc
LQbTwTAVfEmcX6wTqVhsib1wWSuOUvKgnvTVnDIjUuZXmBEZRbNUTHSAbKhW
r2w4MnNCxq4DAyMWgHTZjoi+eCs3HIJLuchzSPwNZR8pzioFSigssIADpKwy
ACPL/j5ujeyI34goHJPQm1xZ9Mwcdlu37WjuNI7PPJSGyPae0gy3vEMzcW7J
ZCLrNq4tidgkt/kAVzNJb905d8o/mLmqdJxRs41W0b5idahrSwogD6SgBlos
dBnUui4DDwh7R58ke4f6FAcgvl+PcJwZtpDhi0rlNIteU5nMfvWrJ3ckJ6SS
GTNVuSYT1TGKaET1fqbiE8XGnEXrjNBXb1ntalSr516dj5Lkzm44IkkdQ9Ll
OBeOHq9dQUFHWt4oak/A6CHmikk0etCZreAxVsNsBa7gwSqXvw6FB8lAjzOD
EsfxlnHWTSTWnoyxw/rWhtnKdrxGZfogjFQNR7jpVqyQc/EJ+IwSZCgjOCEz
4MgJ7y0xHqpenOPd0PHyd5qGQfdR8ygYa451uxUeTs1x1oJ1yI3bt0GsGlb5
4W9Dnqt8kVmdP/905sMvuCiw/sj5DxdLzGf37Qak2JdbUW1wW8SclhSFs7Se
XKKVa3X8/sWgjq6cJMPVGqLd2bl23jQinji6nAdPpqKDF+lGPfz83uYjdcBi
knpQU9Gc4CD/4SwXZFv9yh9XC7i7AFmHiONYn5MNOe7CJaTMKuSYh+c+5lJF
zvBydYGLodpNB8MVQK117nbOBojl0Ilz2rpRYhXEz5lPc27IyGuLtJ4AmXnn
H+dVGdzqOBt579Nv+oEmxrNmsQgTcZGls3QOH3rxtSPeLYpo/AtNrWNQ6UwJ
qGbfkzHYCt6C5HQKiuWVXQMNn0b9kujzrkMn+8ZXLGGDTVGSQhuZjG0qfaLT
oc0cIqlzEtzVCc8b4U6VODw06kDe98lTULhj4D6/t+mKecLjEuFoGFONnztS
+vgWlS7iMkCr/IEyXp0893HjqDqH1VkIeKD3UfF0D0nd0RoHXMCepHvzxVV7
O2RgHbqvnul4E8LTCHkTyYhxHIbfU07DO6+4g49TkW9QtAhRTgFIOPFVls5t
sgzQIrVOvMCNei/5uhyoj573oef20iyI7tIUOlz/qw2+B7BCI0bYzTzunrVi
g285OY+2cqoF3Z2sZKpyuV10/NSmjNbNL5/amThD6DJLrMvEavhRIcqYT+gi
J7+oiUOcPNCbHyltenA1XLx/8kaRphTuDZWhHFgzrV5xmgQtM9Vhw4xUd3dI
Qz36PSW04/ln91IQ5gnVeNqpbGmDprL7atApfYWoow7eyiN4FlFCrCvtM63f
l7o7gCoI6n1bMOJioJeZ/eJR6nC8c8JONE6Yay7NrhraHdgjk8kZ87XLfXBk
557e4HvEcKnIerBI0uYIqvvLChB05Qil9LJFhR5bVeVNopGFW7/jOKcpW8oK
PAHF7dOZ9y70UM4nMm8KXyXJG5KPzEGSuMb6bE9zTGXLGnFi9mR5Dli2BjvI
ahUzRnSL6O9oPjHAn+kXjh2C+YXzzdu/8bNp93az/UTRyRGvE+QKFulp6aIe
KGDrN1LadUTVKJPtmT+tKq6ataaD6jfPBYJLR2TSspFKZlxJMFmGPj35UEw0
ES05cv8lS4BolDAJi3mLBGhGJlNCQXZuD1XzwjYMMZ+p3qooi2mObHl/IXmz
CN5T5LsQpklxCWvlKQ/C7m5IbxhEAtIn03ZP13dlCLOndIFg12cV+t0Zh3tn
8+XFTwGrX5m2tS6GvpMy4c5TRs5QS+UOq+rYWgrWIUde3Y8f2tx85oXXjngc
VXr+kQj8RHKGyLZ7gTGEVba4S6zdnuJgcpsQTyBu/+KXwsAD9mLZIXPQAfR+
T9Mq0vDn4dRaTe3OtOOKxjrOcWytnHVG2yvBiESBuJhQeMhrfQK7caRZAZdz
awI1D2h3z2Sz9OiKncuVYN/KUYqCSR2319tfINq54imMJxMqzinEo5fEChRm
tDxFu0ZNnDHzvngFdqodi4AsKQLCCW1y6ynSvchB9nDEkqxt4AO15vW3aAW6
3SgboEqWCTcr3Efikbls8tINkZFhCpzJf71jbdiz8dcGRyCogmh0tkBo6ieq
MQteUgJoH594VxtfT9UZiwZpff1JVuuSeABrXj/qXyNLWUZ5x9aGBm8tQwA4
VoO2nBCj0rg7Bdm1hYj+qzCfxpNVIORfyEeHfSxUaRB5H7Iwk0aAl9sagQTd
0/P1+UyvuQLg2Osv6t1B7sfW/a2Wsytsc3jyRb1iZ5KNFDlD+9M0WUbnU1wU
AbgK00IfbkJnECGKm03ha0Vms5FOUMiRHCEEoimlQRlCL0S3QrmtKA5YHcgK
9aUVX3cu9LdDeSXzFD5yBq1LKoK4XP/rxvvbyvI/Th+EzoBDzO595k1/6dpK
99B5Jm0dqkgsrRlS1oOCk1q5Pkfdlyoq+dZscQlMuxFORKprYccPmn54oME7
H0BstIboOK0csJYVtbpa4Io1JqADmV+qKpoFlQ66PYKWJ515XnVqzHfnBW9N
Rk0bSdKeuunBVhbkxc1vafVZk2DtcKkpuiRSi7+Ia18Wsm1QoJmbTHD+Kw2g
Y7WYpcpeXdCJqCXdaKoq5l/TBmA4vFQbCoavXz2zYU4+a0/BTEICZiFdc1l0
Tcu58P5GTucuPGMbsEhgcufsKbqM61tHl+H1UiJe9hgmL8Lp9JiHtoQwRlY0
DVE0k8eI6DRDGJGnhPYj/oB0NNPQtaRRQsoBs/kNKrVGcRpRDsyyZ0pcKcc2
tJ5MQi0q5CG0QrLtYr9OrR6mU3ZPp2zherDNRQ1vFFETZM4mGjIk/5FL1l32
WmXMJCQvfRAyePBkTrL7xNsq6LpQT1AUBMe2bVwsMgEPJF0CE+e5rBYNlbM9
NTNLjDfUDo3i2+mAUy6fmeWPZW5hVSUMet8oOB2gGFpb23S6ibdbEqMX1SpK
Bfsy0T4lyzyRnFqr6rBIzDJ0Acz+ZOV1pIr5Vch8sh5Q2/cyhR5mbTSyrz6Z
NYhq/JrGVw0t8gxP6/GfkK3Qu7jeeN+rEDhU5o+reMfYUJ/jIP7r0aWvVobf
PqTHoj3ivHFWRGB8TlUCFk/WGRhe3szqby0qxRfAEHMj4loIIpgTuY1PrYOE
F31N2XKOKC5QVjOngJWXdvWrw386nxwEGZOhwOUKuopsg1KX8UV8YcRSc0DR
Y2sO9BCfDvWcZP68OMeu7pYnOEnhfMgtQgcIVyuV3dQUnLf++IAtPkQ4QQKe
/FtXGt8qIAf+EyLf0eprt65BR1pBjMVTYXJYZLJHcESpCHg4IxJbW5SHRe6H
In/UrjZvMdwnWHmsFn4Pz1UeMSfTfQqdwXW8oePbEyounoplZ1oGYVdQw4Y4
hI9WQtP++9i56lt3zjR/m6ltOyoK1OIZ7QhXtjS3DCWiYor7glxDdnXpf7nN
g+wO6VUoHigPZWRy2MxDp21YUuK8HRpa7Z8CTKhkmwZIal7DMBBYTv07frNq
L5ktiR25yWP5EhSJ3PPUTquWr9QZlDcoJkmDAlyETMYUVZSRq4v4EzI+Q5A0
OVoOxSAPU56ckXZAPOzD2zL3GzrZYjk8BgpykUuLraCo/1E3co0H47JPlhus
sVe6mdYrbRRmyWRyWG7c1ZqPf/35uurwwvk4SMhDPCYJrVzrQss/1pFDFAMn
jlRMOGVcEBMdxO5i+yxLEO0PuYO0kfXdlmdoWnrRZgYS48isHsMXmYiSNnQU
bD3wZ2nXQ1p0rKH789pfji4o8dZk91x8KK3nYpuVl8A66Z4AONrdW9Ay0UN0
HcJM1fxCIqCIQaO4XZyssbbtsgDBeiqOBUsi5710QPpfdldwf3bup7OIT9f+
sksnCVMv8/l5iCGpUkWhshmrKW4IVjVzX7Zs7ewVG0mAtTcTQAVL8dm/GMuk
8h+ndfkPt61GTysZiGJ1Wm3aSR8NjHdinlAG/OHn93IXlNtC7gumdEDlfJCt
lqLiM7nnBUCh9AKgnZY2Ms1LBFiFxpmmNSxA7BbPoN4A50pUwIPt6zd+Cbf3
mniGNG7QoU29LzfHvvtBn3tByQOhY+O2370e3YGTR1DiWDSErCswwtDgFaag
qycj3XPvX7iyPri2phLyuJHV0IFcrTjnYltpSkeeS9dpHbKi+tZwgtRW1lsi
xPRktht1EMuHM7gQnqhCyjA01/Cs+D7RCKI1i+QYEgY17sHRuMeiF20u/aIB
ewKfIhfivmeSnHrvK8BWxCf1UCI6HCeU6LA8VPhydAeqQ3R/4QUMRqMtzMwq
51HU06iLLWdFIoR90E1p8D7dAUotbh5etReukzBLcdNoGSsq7WkmusvLUwiZ
5jQCt1i7cYY1XjR495tqxFj02q1jatOYacd7eKH9+FdvXQ2Jg6Z5i7Hogrbq
2mZRIBvdxyiiJbqP7Dp0CtIBM/le81vwoq7P2XGxJKpKaLIg+6qUs6ZUOOAy
8x/uOyoEYb1XCwqVcOiAHPrEIMXPtJJqn20VLni2KWsjPbfdzyefft5E/u6t
j76030M1A/YZyeLREs3c/uPWc0MVpRETWjvYZEjCODwya7XI5At4ifl8oDig
O1AcWp2nkjDPJruXIUE3K4fIzbC/xTjh8iprHijQScTfsPhoYcxDAY1g0fq7
4TlfgS8gxjkVzorps6Lknz++tbnifSvehNbILN2zNILHZe9JrOWerbWQBP74
7I0LyoBifDypqdDZ7LFzRv7LUuhgQn8Kwg2G3r2VKz3J/Rv5vKHPsEMWlq2b
bdCFl984anHn9GS9noJEWeqwNBeaaGPGawnrFhnbz6HkSIViurTxxFNEmEpO
tN0R5/XRwUDQHFZUUVwXKcbbvcxVydTijfjsQ3yAIr813uWKZTVdp3ggSBGb
aQrHdhG2g2PHLck5dnxHeZd1MNJrY6ZRVxGLMD/+vMwr5sbA7O9oxXqjka5k
7mnaL+3SJH7lizaikQueEvlaE+He+4//sSYUAWOgkWIzHd6PzwWP1ZQ11qN9
Ho6u8aQ3LLcHrMxXShd2H+PxatyPdBCNE5lV1sdMSsKhcpmds6f8czOCbSho
CwEODVlgYA5818o9vh19o1Qf9Yvv+8QW/dYrRPM70DTrB1i2bWyw3xOwTaS4
bw0sNwmVdq6IbyqzNlTUBm/y8ESuqN8SwrgCS6yQgjINjkbYghCbhC/yrsdr
c88sWPkL6zsthtQSzXb7kGgfCRqeYJ2KVX1sJH1M2KvSo1s5EZBEmGFMuP2B
Bl6FT1KcIq19Cdsg5SXe+cftzfuc9pAprh+nyrVaVrNuJtbJ8qOkrk/+jOS9
k8PBQT3iFZE5ChXmg8Y3kM4LUzh0l0ZqKMETG406JS6bnuUOGp5D5NDFWEu7
alQLObP9eKkDXDELifgJWuQUj2e+DJW+CzmFPNS3ih8kVCfdZ58FJqI4ZqpZ
SCiykpr2ZnyajfMm983v//7lhrTmeqkmYaIWrdkxa6m2QaZV5Eh2UVrE1fjG
ru2+CtnWDCJf4DdKl0zjuqxgLRmeWjcnZhVLQyqkjqKC4FHX+DDtlKLzyuMH
yOqLoY4n3luL7fLxk+93TZvWuK47vSKYMDauHqqPE6PKeWJGOzjnJD7SvSWa
HSGK6L3Gh5j+Ea1X740MXDtx/dta/SpZmtxlxpl7KxV4U0uCVv8Q5po7JBry
jJyAla8cRosIbW9G4TKNQp6tRLNTYuznQ2sUE58YLuWL8gcYNkVz62rp//G2
NT3yz4AdQYQJsb/nI4YAlPk0x1l5OT0Lu+XFRBqtg6z87NXaGUWmBM+Wo0Jp
nBkrGBauJK+hceddYC0zwYstR/3Hf8uSdht2qFqR2klE3QX4ABPy6RoVeAhv
61E4YCVZkMoHPSkZlCbyP37f0hWeePmgmr4Xa1CAOqN4PK3GuReJjabgXxPJ
LehyUWO8/1JU5uxmkHcZwipY9iL5/Uv7Gq+n8wiQ38W7wcqoG8AFJbuhRAuZ
Dl2pq1xy/StuijhGpAxm9A8JtkGiWyFVjx2wbaZZ9Q4pcgo1l939OGf2rmU7
vGVFrSuEZWWG3ITMhrKsihOsADFl71a+0qwuLOv0wi2rk4wRdqCnrRG+aQTV
xuoJ5Z3uUdfYh/tUw65pFOHXlxlTJyzPBP5yd0lu2erzWpMLdQuutjlUJul8
HEKDRNdwDSNEqJXVmjYP002g0EipJkAy1ViUlDs89LggqUPfB8Fkay4jukFY
zl27ggyTFaba1aBTyZwTmq6bQtQ7tUQr9SwvzKUJYdg2CiQVRU+rhU29j/vd
CuDLdz5NrkJQN1TzJNu5qHFObMLlRIp4TZCTkLmKy91i0TlOctx9mOKVIm0Z
OdCKninZFs6D37jrT/kcib59KA4h+/TiZllskyEvq0KhP/3DG6rVlsPBo8Jf
PeWbwhXAXAlqK22X8db2zJlMoGrJaolWFOacoYPQH9NXo+JXP6IcP5d/l0XR
y6aD1EJt6HqmUVHqVf0uYOwpnmFVNreZELcqJku9g7wbbEfOlT+kUH+QcXOW
mUCUsDJf7q7IEGzvNCp8+DRfMNJkm+I2MKivd+lQ/QV4N+giEvZwWhzr20Yn
7ZvR1pnkCBQ/hKQRV06IjMaeaAFP2/XMexc8WlgbVJ6ola4+vxWW93fZMBeT
r9t2rLp3xW4tr4B8A5QLzUQJ3PecR4fVSPXO2Y+apjx/95OXzAXMlxtK+/vM
TirRyu2MjtgonTC5G075Cxo1lzVzXeOR3StuuJgW7vLtwmvzpfihon2hRCai
05SwdUkoqeCv0XsUbBvOo8kPHMoJZKr2M9vD/nW6Kd2eIz8FJXGVUNjEntTO
KG5GnDg/P5mfmplVMMqwttznHli5G8G+is69Mk6t3YtRGYWdGynw01GgN/Mq
4mEmGNRQjkmGj5HDRdgRxZuq1bGxpqHpIire+IdGRuFaWOmves+hpg8AieKg
K6pJkeJldzzakjl/tXyncf7ENXdM0EGZPcUotCbzKjWzyt0x13lI0Gf58onx
fiUF1E9gKicWgXpDWG3m+NzR+SqueW1s7XigKuX/+c3zzJhc6PSNii9pStgo
0t1pKUew+fEIrnn9KLIW14B7YdQHAcAqUlm83o634r3h16843Vja+LLPQXe7
I+C2FEKPYsSWdp/RkHB+AKDWqMMBT0kVH7dQIuDlULkUUjFsHjL5kXUosnl5
VcN+ZPie3XjYuXVRwk1EXzAJhggxDHSks9ZhjjIGZCSA1NaehViyf9gx5/I1
7p/lQiAzLQZEKaaZyA4fMi6h/xHQY+2ZJj9NQC/4Yo74hOZsqxSNW5rAFkr4
7S00F0fjCZB2G0Z6in8VudDIrS3L3trZMxXrE1Zaz5Upra9QlZXi6arWR7jL
ilEkrXT+bve7c/Zkmo3AfQRZnRynTAhSBtlKYV6XGrtyDmt25RGubPdhPqpK
3l8HXi0YWQkVR6UbgxpS5XsC9JvI+I9rAxb09PpDyZbghhPUsiTSTNwmsXLn
DTuOJzMSD/0AbZcAJavW3yli00PrW8Mqc0tLm8WBaRl75XjykzWhMTD5I0L/
T3FAASFCsyt6n9tgw4JiYbz2I1nZ8Yj4KEdIOGzJRg/YtVg8enuzIVKSYent
aZDzhYw+j2JsySkUxpZXroMyRR2hSLmy379vo4OlrB7YyIr4Sk0MDZR5i6QS
5d6912f1T3CXFCZNCsO1ymNOqpgxvE8rD6iqyopHK5Up67IdfqtlGnpWzP4P
k/PGAmc8fUn7X0Hc4AHNttju+TY8+eqtq6uz7y1K+cZca1ZdXBetryvVCkB5
otQo2/wzXr/iqIYqKllOMObAf87oNa6fUiOvMVo4BYHvjYySiDnjmIsMHS9V
+h0u4Pb2pxmn3om7FFFwu2pSgUjIVKpb/P/y87XN358JvbZXxlVjSCcLjWEJ
Cc4wU7S7ECXL/fLaAdoXtPoIFlJkJ6/MuStSuVPM+Zfxy/xAzHTGiK1hmtYS
NtkMRRTctaT0YAgcM54y6l3ym+f2cIPaQ/GCANKu1CIqmwmpwSQqQZk/o9Vf
zhVCIDNlt+pDnHLyIMjNUFIgOJA35BYEvMhZ8BFslClck3ux4DxSTnXUcUfq
sHrVuUxUgsu63GuiVslXhBPp4lt3rmvY0oatR+0G9ZrslGHCTZjc391CN9MW
aamHexBzzw+Q8ZAJfrkBC9fLMIkQ3MtWprVkw3nhiZEZY+PvxzY+eVryB0c9
XEpMwq4M900PtvGIjuPYg9xPZBROWEn7X4FMNWXUf/DyQ6kn+eqbf4r+JkYa
RqPavoNcNVXkj+ZREtppNE28E9nZpXCp0HJQaDXJA7q1gMiZwtDS13cJZFNC
1syK0DZTil2LjKmi3JrZiAORIHkvvigqhBjhfoPPzqO8npbdT3Xeu6RYDEv2
KIntdNPodadHFpAqnMpF2mbomEMilWJfaEQhEXbzNqxkL3mykKddU2N/Za5f
nEtneU+IXGHnVUtdhBEp1SRGgp0ZSf0BOj8Csou/ZfWWo9BdidH6PNVvOC+D
s7Lfqp/j3+6a6XH8mT/EzI6QimA8WmhFFRQECbBk6jmtmhu+zqe675VmETZA
jSdfLx+LK5MIk9kUi01F+eiQg3DGU8lBKDomYI608W1vb0pi/sg/8HvCcspR
zbp5EKtNrPhuUfryKlUD2io4896FHsodoJDG/W7e87bmq/KyIT5UxT5ovsmS
EEjiPzkAHOUDOGmJjo8hNL9cgMV9EJb89a9xFrR51GNhBc94iBuV6A+FZWE9
dx4hDulh726wNpn62ROf5pZFLchDt/7RuG/ILA98Yf7525z96XwANExKuD4E
0MKacbsTCVdlYrVPPmptUnIsaXZC28ChIWiCkC8kkuBdTU+wkEe4hTxf5AWm
+kMafoVS3vHNFssv2ht2AMdKSXQq8Wi/WwRWlH8RizifOb9I0gm7D5+KhoaD
jUbFbdcVhnFuI8jTwtZNVHuoMhWzBi9Fi6KsGTaZzrp0jQVoZjTg0srESsVz
rZjf3JODqIh2X1eZtmztrH4lDMKBfKoT4LJMJj0rj1wZ14x3mqHgHkEM9ADM
ERfkbBOIm4IXXfz0s+q797zSvJX1LPf3DvplBMJSPGoKC9/U0CsSAY4taOo0
yByW9FynwLO4uvnOoSBv0hcnxBi2wrIRX9KlgpTAHW2iRAKjL1FotQrAI0Nj
kY2S+rfKyEvp/wJzggj3egfIDEwBHfB+4osYtpM3z3zkhb3qUVpURRTUxSkV
7TyFA8fOWvftQyhksiajUo9w1YUGZ6DJVTR+laGWVbtOQZ1GThaWBKlIxPFR
ysXUclxLclvBidgYS/4WrU0koTKz3Tv3XWPv5k1IHDVR/FKhSy6kjsMETzJ3
cIu7+L/950z10YVPSx0OWlWAQKf5LcrOJCUqZb2qCsiSjkEjR1GWZBVrQajn
eccNYr0m/aYwlO16TFWFM1WMCM+PTGfgQxCN/CLj76NTgTMaKO3B7QazJ/TM
rP2vkSFRbLyam/M7N3ZGM0V2ijWUIWss/3qB3xY1BL1Q3+2/3TXDBgBB3WVk
XbRwnd9FWyWjz1lVVVKeT6dTsFxKy58RLnrqjZzVnXdNgOzIm/JbTKx9BHzt
OnSKboir+ZiMAEueZAjAT2UFSTxJC6SQlFdyxKWeRZiEMVSXKEYftVoZrf75
9unmNWeNCsIQoQ6DxkWzS6a5VE8jqetg8Szkeo9j1+J2h1WFqRk+aBhtSteY
dTCzAiqr3ynadTVxcsbhedPpnKGulAK1wDJBcRZEoyS6HASiSX2ZXUNu6wOx
Nh8UM6780TSpHo08XcK0ovXGRvjk44/z/GtH6K2uJ2Ucok0mOxTpxQOXIDTY
zMMbqFGb+ww/DJiDx3dh2mCtj9pS+7/N7EhbhynESk13hav7E1WhszdWvX6m
ibnwg8k+6i5NUVkea9cJ7ikM5ACRM/jOZ6wU//1HGP6/jiRPR6pv12eza9qn
rUGUWI+bailZblyEazW35TvLN1cW+nwhe5cRE8nTngTYQTNvukCq7fvNs0Fl
8tHVvkOMajkM2+eDH/yEwsATXN2auPHEReOwBOsOzF0wCQ+436fWzdFNuLUl
WSEXg4SUcs6ZFWCY1YsaXLpd88MHXm3+u21wWTw7HhAa9fN75vyiqxVREk+K
T4zKO5mms6a4z+2YA3GkXADfJfJ800xsuOZ4AnjzyRbaRfyHL8hNe3wg4mV2
hFXJ00MVDlxxFVEw0K2gO7Ch9GdJtoi800GDn9Kf3Yx3I6L7uTh008RXLE9N
s55y7USNLGOgkiyeNOvRhO2WJ34S2JmixIitkPaMYQLZPXRGUgeNATvBa2PK
75pUFv8buxtn3yK3EweC+ppvFwDAFHnww7fiEd/APJ79L4MxYqfB5r1vE6Mc
Tmq7VcbR4tF2IAZ/x5OHdQ/l/ttpMdfDb2aQRaEkyRKkKvMug9t9EobgCkRu
lrWPQxILrSLG9IN9pnVuFI9ldZsj6VvnaROi4shudAwsVi8YjffWF5RZExtD
M71zgl2r/c15anFFw3noaoEqTm6jnlzXxnROWP6TyH5NRNtZEkKsDCmtCahS
hIE0Dou7r0DK2RWzfzJrGs6H+P0Z9B9G5Tari1sa5EaxPmQc+ndYbh329sjj
4dI09Q11lpD3BHM30LHU5YVza0YaEiSK2BWjm5+7qlvK2iJwPyxXvfvwaXFs
IJOIidNzgc+MtN9k4ZzUcuLv//nj25rbeHzNgdZFmoDfSJd2Hw1puDHCw8PK
7dIpVmcKeerLgaQ0ZpSJ7vrpUJwvU2BK7oaLF3GPMHQwwh1+FPEa0SePRoMM
86vEwoiZb2niKCnozeROFewQAbwSDKuqAHPDpxqNgso6jKVY0JETWFM2mjo9
WxJbcdfMy/1719wp2nYWJygHkZCZ5Kfwsxvn+YaUkl5Ij4dJ8vs1fQWpDFMZ
MU90HaKYTloumh2hCNQszYdW7VF8BGExedYaNB7TN2wiuDDVLUVJRgoUOByY
XqXuDQQsp2V5bh4bcgezAddak4IDE8r0NA07fvxi9fe3vNQs2MgLLu7aEEdw
vHfG4fxhlMGe1VwD+6IeN0TJSV0kmP37F/dVT6092COv78q6HsQNuBJGTaq0
ETYKNfI+k3xcyw/Gfiw+Uqxa45RDqVCL4owBaiCtBBfkxvz4oc18sErMYVUF
9U5++qzfccLaXqTXg9Z8PsdqS/Ijx9gK3tM4pLQ/H5GkEJuGVo5v+hYfee2Y
QZoOkzLVyke0R0kzCVhnLacwTuUvZdYv0R9FYZfVa0/B9y3DeHX3t18GueRk
keibME+CmA/ZKH3AB1SuGH0N4J+IDcVacTK8UCOzxjdLSfZ0aiacv+GUJv11
CAVgWSCPJXImr3RYAbUwPDQuUeSX4D2whSHNlMPoa4wFk9t4MJnqQ/HLilYR
ZMT49qJ50PsMj8uF0QQU7iR2/3/g6FnU2NqItpd021PuBMlaCfGczmeQKLJl
OxXxRKQl5KIZrvyX8Tbbb52CdlAZhJ4efKAqHm8oyQI7Q8lEkRECj3pto/Gk
HcUzyzoNRfEwMzLxpcXn/USCLMzcVLLAaPOBxoCd59ivTp//uPrbm18qOkXt
hOBAfJenfulSLqOcoc0NI6+W8459SH6JbWGtPUJD2qaJC9Xy9XPVzPZjTScl
ehbW0yTZ5whrivH3P4kjGHkYY4jIIQajz+leYi4yqpNFLBSr1ZO36EsSd4ym
gibWEeUprBZjz3/kKXjfil3N5Vzfg8hk4P7mMJWfUSpLqbn2iZ5uGH5S7acK
6aiPFfYMRIJGKm88tuaAXy+Ozx1HDNgDtgqozJOwn1jqGXYiph5gj46n6tKH
1cFV91Q3X39ddd31N1f3rDpYfXipe/OFueqO791RzV2o6FsufbCvWnnXD6tv
f/Pb1Q/vWlnt++CSHw9e0Qj0zgMOcMXljErXFnpMBpP0UJUb0RWU5bakW4va
euCXBYUHvRHweaGY4CdfCn/IiBqgmSQl8Njq/c1Xfu/ejQ7OR1RlBdTREx/6
SRSvWjX1mpHQlMM1s/14Y5OfXHuwtskH6OKisqi5Q0ZSclnPo02K7i34LLqk
Sz8J7cNkjiVWNqXkFSmpefa1oKpEizzD6FF5JZp7zYsw/ubmF/9/0WMvL1PI
wH4WAwem1FTORVmDA3KXHl9z0L+7XizM9FhKhUMdt8PQlcPa7LUp5/rn8+rc
xtur629ZXu0++UH1wTu7q+W3XF/dsfFc1UzIZ+9WOzbtqN79rHv75Q+rPffd
UN30xI5q4fSJatvjP6y+d9+e6sPLFQ0FbTFnfevTyOrMV1QnkRdqULqraJ2V
FxhnT8yy0vGArsSXSsd86FkleY7eF/d1+VNkXEGMaYlTKLDP+Q8+qb7+05eb
q9Q+tpI8L62rle6ynZdMwFJyeBcbsunpqNEld0y6ZkmdukvcqysCBVienHVG
NpY2Ljwwhf/wGqE+4EhrwGciB45Gm3hxLKulgCypVJGuryudM1MrCnsasluY
iNHybvRYZK+0EjrI1Srir13MNHkeqXbMnmSjwww+6oTOrQ5uCYvzY+KWuvC+
XVm1rTxbrb/lxurBQxdcM4L653J14dCD1Y23/H/tffmXXcWRZo2r3ntVpQUv
PTPunvGc+W3+nPkT7O6xj6eNt/YY45YxdtssbgsG2mDAMDSY1QgBssFIQruQ
KYGQhNBWpV0qgyQkIWSEigJJOTfvzciMjPwi7n06/dOcqXPk5S333ZtLZMQX
X3yxwZ297OIx7uYOu/t/dLubOt/4r1fOT7nbf/SAOzxXkqS8lZw+dnYIZRRg
GDVbj8ZfUdqW+iHLgWi1i+ZhOMOpc78KxYNejRLy1Zs4Qk3WDsjwSGEE3vdX
UAGhWfvWnWvd/Cf584k77lj3TsuII/HnLlzSw4oCr7E2qlJQTLzNLBG1co9n
HBYUemeam2aEpQdqapN0kldFkDdZJrKySJsgPnAva/w6K0h4qHupooBCuN72
mcaYfJWpsSE70mJqkVOjrHl+MGqtVdHehcT+4WqJh86UzzFemxklIAjSAsKU
UHekGbTqKkfcb26qDSdN1JXzr7nbb/qNOzLXZl/vz+wrZzUpze6bBazXyghL
o7j6KOBcoXcm1rY+2Dl21IdzVVEZrmDV5g1aAuFjpHFiJgpFDv9HmKV34V7Z
ehR6fML1phQGLehHX9pd+AhiuIcojj/zwSVZr62JXEjhJATJ0fAjffx03bGo
gZAdBRZtfKz2VNm0NF/ByhL+rmTtu6bYbzm48znrmPvelYdqpvfNILblKLIt
MwILomUu2Xe+7GfJ/ZvrS/nLtnUQ6eZARlgQZZZUDK8s5ewUlLWUNSrRQGlF
8y3fqVVGD+V7RxThT2F4Lx1wdy1Z6vZcvEqG9+rFPW7pkrtc5esmw3vlL27H
vT90Nz+1zR0/fdy98eTN7of37nR/uZLO+AZ0zY2/IhqlhAfIlzRKvnkw2jK8
mp98DSmLeazevXz9NE8iFQdmH1bJMNQNGlcLpm3Q5qDGCDcec3l1o5I/fHVU
0Ed97ZhX0Hz6lX1xmHkpdFuUgpt/JdWMBpZMZ1EfnkUMtkTyCeLXpIHjZBNU
ncv/pO8jR7GySRqnn5/tvPwkEi0nYHpLOGVwheLAYq6LVec/98iLuymcJ6eZ
lKduuGej+/TylewOSpGMa5LKgvkpZX8naqbAGBaBb+mqLDozYZFJhNiTp1ni
nHBeMA0wWVbhoWOX9jXp0j6Yu7Tuqps7+qy76fqv1xb069ff5J49Oudhhsay
1oZVQSk6mq8hZgzGdN17ag1tegfqpkiDP8iMIFkB7zI9vnJvvA2+1maxfAhA
QPiDiF9BtsD/hX673Oz87OE/ZceepY/GIgfFAWHu+ghZHN7GrdMEtFnfUrMI
sWTY8SWk1PLFhJlT7IQQ4TVi2SSZMVAN0Anz9LWtkkCtrdpn1/GmlYdQLGN1
f+UreSHenJIgljqDDWrz9o1frgmG8RQNZoscZHtnL+IrmAlAezsLh+PzYPgP
p+auELbEklAgapX2Ih957MwosmDRJue+PtlkjuMucQ9MfxRx3I/2P+CWSBx3
/oR76uYfu6d2vOMuXLrg3tnxlPvxj590J+ZTmsQba/pxs5VWJ43aQq+rU8yB
nIOoOTmU/W8rSstnJhdWrDZsL7wsIuaWlnEdAMTmo2Udg78n/zWfcPYFCNWG
gqA3YwBIS0Hr0HdtrKyG5hZqljYO5CDSlFi1srlL+fzIev3q53T1k9LMBsou
+XacY+CfkRhxiYrTyDiSe9Wm7KQcLv2s6VQh1LgoA99JwcY/6VsH35OdTOBy
yx87XxJkbuGBoGh158SOB55/q/7v23+71VS77cqOxBRbtfiwu942QeRK9o1s
Ht/+uw6+x62ncH/8QA8h6KYMtTCq7rI7u+mX7oafPu6mDp9ypw5Nucd/coNb
uumsZxIwozrrnvrxEvfw5v3undPvuOnND7slP37KzQ5nVE3MChcN8tDa9AE7
gQNIIS3ewGSxqf2ok7TX2m3Hq+1wJomq5jpESH3GrEFQEqwTxdFCj+rLlPxr
tz06pc25TuQf43k2Hz5yxKwFUlSyhyaW1q3hGXXmMtCAoDMUx5cjfCi+U8JX
M9WS6yty11Hy11DHrai53qvdNXEwGrahkxnc72sBiLPQSCNu23fS/W11dn6l
OjuPn7xgzhrohHbifb7nLK80geM9Uk3it1u0TDOcIDJ3opSVaFWUlaVI3uuC
oKreL1i2Lp7N7vIFtzdjpe5xFy47Wpm153holXvolhvdd67/jrvx5w+6VYc+
clecbcyM+BqTPfLGHshJB6N1TXCnMvt20SAXv/AaPj5pT9LLCPKqLQeTXVix
6UBMYZkC6+o50I1iQtf+8NJ8pExVzqreEabU5fSrmwOAEnZb3Dpc7TqIIGxM
pmMccYLqawUTE9u+VPaN+aDWgU/pcP+v2jydCqwLhFunrpUaQtrSRKeq6NFF
f8zzljgtK8cfkSfBLY9M1Xfx0IpdMa0iFa0z2RRMIEAuISGXUnRaLpGWFQ5P
YiEBvT3eHPcSJoNZ4qPttYMaoOyEZznHmy2VD5GWQ4rXY1VNY/T/c/12aGQ+
iEYOeLwdtMPwmkFsSxQ0FzAUih0HcDG3gy3Wbfd8GU98jxKWZPfkCd6W1jdb
kHX1f03nBEuYsNaZaBjGw/BpTpg2fArhQ6Mra7KEygMNwm9odyXqRRvbN8GL
1bWFHU9HAZ6hjrPFylOZeqjlsmQ8aftBU4jmjHvYclA9VErj1dhH3iuzitch
xWv11iNUPSvaDfCyE8kh83SEZeumIfJsVciYYI4iEJlrEpAqpFTxCxNEu5UP
oAcJfJzmj4K0IhCpJp+ov6n/M9jE5PjNCNI//7NAnQw7x+RBruhdnTQt/ruC
H8gtFuIkvcucrZT/xMq9YpQ8zJ6pOZO+gkyspxU9WYwU/eTK6pH95fwEnf9w
TiHyfyasRQmS+V87NHveff9XGzvMSS87KHJrp8CAkwWqroy61uvkKAdHc8eJ
NNuVI0HBCJTKc+QOEkdRr3NQfrQFZF5QvyQXjdJHZATVJJPHvbGsjtJsBFoC
NMCX5j/17SvMc98/EW/L9Mwa0nUZk/JB3A9FoY53CGk7sZJjyNwNd5/4n/kp
gcabOfm6ToByhJbjwwqfRySzOg33KF+ZaqpN83Wa4HsoS8ndLhR3cVYkn7Y1
irofAVylUS/Q7h4bBTrE9fisvL2X/nQ4rpxHXtrNp9lq/l564/hzvrCMnqoF
YIPkiX59Bf+SF/n0YxdcIcvZFr4N3adV+cidL5pRPSjtF1oDYfjN7a6s8gl4
EMgqloVhCFmlCW27NkAThnKAIyq8XJlPg0dKDlGTrLasLRPAaEuuirITvpeZ
//a371znDlbn4nxUGZosrJLXi/anrq+XffvQaQleyUoL6c7Ss9Kd3btsB/+8
pT6tcOG1svwAwSLfW9kf5tGJ+Ql8YKtp5aBybiMUVcXix0JhZmMTF2QRtewJ
Qq9raGszLM4hTeDfV9dh0TkRxktrnp9y1ezy/kYE1lmla7IL/c4DpyP67b0K
Xhz74qsH7dxvuw4k+3rZbQBZyUHhf5Lzwj1AqaV266NTcQ1wizYE50k3kt26
zCA8im0b20HtVGo9JA8sjde4JjGa30Qzw2uFpDUn8GsysskDKa2rLAawrCvI
bWdmo1cwndJslpg2UySKQfNbDBNf+doRhIL5fxu3W/W1EzJr6QB3BnaTkWvc
206vwNPW3AxLW5zhxGIwJ0oYtohdjCmwIXcxjL55TyKNbdbR5BqS0dUK9nWM
p2WQM7PzwKl4Kzyx2Wf7jfZl4x9OFo9jKqMmI4f0fLhaMmV5PIbiT4BUmmlp
nI7yoDt+XkrUVDY4vhcECvgIj8igVgazUMVnIkOG6Pa9V/XchgMUuEPeORCL
TGtivD67vsLUolhLWBspSQ6PjsaWXZkTmjtZKHkqR4cm/D/LVG/pq/5Uf3bt
fr6z5C+09HFvCenlFg+hJAyHTJKarYRZQLkx15uD4FhjrZMj396HyFT0a6b2
V8u284VWBKZ8KUguF1K7m1HokjETm7YnQR28tT0SzlZGHzRWMu5+PHPFvfi7
txqFzJl+XCjq5TCSN9UmWutRc5g+tpHI+Wt/Ri/rBj1sPVoQz6xJXuZrONWL
oDiizS1bNy39hDD3XXjBaNTQ51Io3GoHGGNZPQV2TJ+O7x04cU482J+zJUg+
hHWiKBOwGGxgoWlJVxgEC07hGS0xX1nUAooWiIMt8dOlg0tbCk6sWs6KldQe
j3Z3ab9KXiF/b8P2E5J3lOwMlhucT2xfaDZx/KywIXhiSRYSL2LPnIeZqsM8
tfvdmkj0d7esdG/sO9liM7uBhXPdJaL4IuACbG0sMp4U5xEIaudRzZjW1ZGn
DqHv3KlGyWTjdaKQF9tFNaeHocg9x2TzwHPM3f30m/FCzxOpdiwD5WdTv9FQ
IZPdGWO4MaSk/vNucATJQwtlbWNrBBVhK/kRi+Ym8p6RkCZ2NeZSrQs/Zen5
mJGSBD+jNXFLfSxcTr1sG+ahCCrG72Y1+f4EvVEMq9md32G6mjkqQgUFys5B
yB6c32a1cbOodeJC3VPkQEtHdlG4AeCWwgFopnthkcMhGyw6M9BTU2bkh/dt
qm/rhU0Hinlsg56oo2FBfmBoQpe8qAR7uU6t15ElMAT1kPOMJE0FEh1ubVWe
/SKqFcukNLAlG6gtwct+jSx/3kv3klLjFgil3KzK1U29cDIvGOdEQDqYazFI
9JCrpxETzS4aw4hbR3e+w/hbgsIsXmtLJuTjooYf3VoRUqME7gd5Rqr/lndm
jp28kNKALXJDini0zehBBgOdXRD/6mdAlw8PqigzAQutSSXnEtlVzr22VniO
XNL9OnbnAVjmyKjx1WxxnOHDkLU/4bk9H1yUd1YYF83eJVyuH2uFbry3qZLP
7ih5CuKByIlGWVuyIokGbbeLeX5jY2koKOcKNVCPIUFoaxgu7n9CWgF+jCIg
t63Qsy+h1nyuO/VFzrH68ezMFTqSKPj2N/3Z+j8zPIDuKVaA4QoPGO9h4ceo
AoxnixtbOYMoYmgsUlmpI1a+mv5R8pnI0Bn9xRPY3WTpRZ4VbpzZxDJU9B2g
lc0f9dZHXivgAF+w0QXeHhZ3cdG9wPWtqOWbAE7oo2Rk0ibC9Txzeq217Uzj
uHszlcQ3JsDSt0XgevUA7eQaDG/yCDK24xrlvaYifGV2TM7lr/2/6ePnMoye
L72v3bbKffmf6sKlKD+ibJQuLYF4DRIFn3whSH802f+xaDbDlFBCQsmG0fjp
Z78iI9dCL27pTNNNXobvn5yTgWjKNk1hLMIEmYVBPYH6hcpZ9pWFhVEiH+rt
OnGZAGywscSIxNIrbZsHR7swJU6JI+e7VEHlbcc3bD/OzwnhiEKLejhv6iSN
sFkIW1qBbftOjpi1AwuhDx5Gt4hzlbhEa03eLY7sF36+sXG6NK/jl6PYBR2R
imJ4l/5EORhz9tosan6EcJalNKfekQDpH56nqjxItuywYAMZiPue22k2p9Xi
8vGwk638L4AqpD2q/LARYtzTCMhLJDeq7AbDVyhoK2Q1OzLcn7RKhm+NiJrs
se9SyaaV5FWkTJqDouDI+v/3eWtfK87gNUTpmKHEeTGinSD0aIjOXRrjcn2k
5FTZKENrONaCkkoWmp8005ROxCtxcqSnWzKsyARCUT5l6L4FLbRG26wiJX0l
9G9Hb3uZzEd+xnaq2ObjIgRSjBWjlh4OqWuT7MlYhg6s3nokLbXZTLCvMrLw
hBYqdf7eiMToZZx2HjitBycD3s9POmdaJNpSE8jt3DoSYii9QH+vmMygcuK4
42iOaVdmY16ixlwdIOeoMku0jUfGu1EsPtEUbx09o248w21KRz20vIvZL+EC
qJ4cu6Lhu9i0Isyzg1htkzPAcYzdhkiZGrivrcCHclr+J9cwEGrm+Lly6aqn
ju5kKK73qLty9ar7yUNb2KJCuYNmbjwEyqd0iE4IyPwW2ka9wsRqw8t13+Xn
EW9T6mwqHQZg4IAF+jt81DqjZctgniEhUaewDWSpdaaoGQwPWUhv0GX4iaAH
zoKIjpSirquKIOp7YaHbQiJgQowKubYR/cuFsmI3mFGuzqh4JmeHNZzc4Yq5
sJyfTMvc7FJl5Ru6VUGWw5dDBs0GDoazkYKW/jL1tgMxjVh5KtfYqoVqy5oA
HenSBJdQrd3strSdpbkuB1GTrkcRBbhX3QKq2AV/ec/hM56sMxQZx9/xaPAx
5EnAg0KaAJ7mkmTY9iL4IRJXuDsu0uo18Ba8wAvS2xCeGss6lMkzLMZAli4q
y6qWTuDNqJQ0d+MXu5sf3FLrXYKsHXwtjARnPEmkzWKdtakN4AFHeG1rpY2L
1naB2O6zGc1QMjdIV1KbCuZcJ25ZqPXYdfA0PMCpLTe3cLLV+UzOZZSjqtC9
mpdHvsjWvDexVukpj3a5usPU7nehzEqt3WTF2WWO2K5MUszvRNGB22pS2rWx
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
Yhlpo/pauPGtdgu5gera+pFAPW7IPLTLca7xMN++dvf6pWuC8TygbLDFzAbm
JjSHUVjGkGe3WHmB+HQcWr8Gu5Qccmsm0dbKbRhB0a3yUIoBU9aDRfkjTJJH
rDfeu6n+zO2/nXJH+Hwr3N2kfaMr3KOUrZ7d57IcXiE07AvjgOia/m2uWuaV
Xg0YLPJ65YlfJnJwZheBCoeaSia4nRcYgzyTi1PI0zDGmwtS60TQ1ePt2qbP
RmRgMbeRvWgj6R/n6JQycUrc3VLxig2hxF2yGHqQXZF/JMXGAzn/cV3xknN+
w0BIyd61yr7CKg+Wl6illrnalwgt62vHKvhRLho8QsR5JGFVj6FvFzvm3j74
Xukht4fgJtJlNlktZKOVT+t5ans+cjfb//MsML+8tfINpaSTzCa0ppbZbNwE
rz5277M76ve/e/c6yAsGA96WDdPtpo4UEihM1sUzPbosbOirThQ+ki5ojKtS
5Cm3YuOBOHI8F5yf/gvg7/pD2a9uX5VSJ40CcGBlGkBqmt8yE5k1PVsRVQmj
KSLfzGiW7sAgMAPnCowlde3IDRJneWPlK7wzuYQu48xy524RewQ+dnyQOJRk
0lDbe6tYrOW5vDdJsW+UH82hq/AWdCl4hhSliiJLKxEpk/1eEFHZ3VER70TE
h6pQtH6Wv//lK56TAh05s3JMO/+iXyV7rUlvnYJqc6xUyhh8eZTLyGSgBcaW
lG5RC7WNWeT6wnPp59Li1sCcXqc8gs/5CJEBiZSWpDELKW3XgOfcSZ569dUg
wp8byjdozZ70NTdEt4AD3qYgZP5ivG+q05IhEKkApcIO6YjRcymeiG16/zqs
B5YHgfG8VHbyn1m2NkoJPbchWciZIIfLNHaJ0uq3faTpTpKoB/JF401EZmWn
xl700BbLKlZ19Iob8A2ps+rIkES9Dgy7kjmRuwKBDDBpmftSOw+cosf2WjR8
bI0flS6v96d+tWx7/dUf3LMRwQTKPfEGE8wSxfVhaFDq5L6umjHIwkccLL99
ylKI1Y32CZswXXOjr+XeTf5+r9bm9AkV/0NTe94pDF2+LHrZjgjLHBqxZnoW
FAuZq7LvO5ZY7twVZooJ4il1XBhXEJa8JbIP3C5Uazbt7A+KsZcnldKZpaPW
etk6qoAtkQ09XIKM3OyJlhkdz+fMlqac8pxCMQd7JLHpxtzDf9gdb/cPrx7q
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
o6vW//vV5n+P/Lv/C54eDZw=\
\>"]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Problem", " ", "5"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"montecarlo", "[", 
   RowBox[{"10000", ",", 
    RowBox[{
     RowBox[{"1", "/", 
      RowBox[{"(", 
       RowBox[{"#", "+", "1"}], ")"}]}], "&"}], ",", "0", ",", "1", ",", 
    "1"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.619118964440238*^9, 3.6191190188898582`*^9}}],

Cell[BoxData["0.693`"], "Print",
 CellChangeTimes->{{3.619118992239072*^9, 3.619119015547339*^9}, 
   3.61911978022998*^9}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1:eJwtlH841Accxw8p3LnHyo+dbsRujKYfoqdfvNXkaqXVUdTUKipNpUnbyLMe
P9PIHJ5+oKGjpuRIi8qhTmgyctxZE987d+fcOd8y1Pzcd8+zPz7P53k977/e
f7xfDocjeUcMaTSaP3X//S+OaF42DO32zrenj8/NkRgs33O4n+WB7lP8ibgZ
Etb07owqli8sNXMhk5Mklq21LLnOCoRR2OrgiXES6zpWVWSxwjA/Ksr4bx2J
hjyx5yVWNOzvpTjNyUgkxqf98BMrCcYGBf2HKkiERZOsi6wclLM5LtsPkzDJ
2Vr05m0xVuVszmXUjaC6w53LtRPiTMGn399wHUFwYu8rcdp9SHwjuAcL9Iis
PON2dewhrtI4oQpzPUYzpS0GBvU4zRRXM9KG0fKkqb59w1PUZHhHhhgO43jM
VvO9w42IdnYbYsTr8MTUfa7sZDNW3nKozWTocFPQOGv7ye9wLWcEp2Zp4WMt
uhFQ/gJ5ohfRJzlauDX31jS5tqPGZ/+o8vEQunwCRkpHOiBLKY1dvGMIJ8wi
OrtXdEKfZXNZq9WgtSdIxMyQYIy+I+NZggYBfsFypbILx1pnE57ba7C6MC2o
kCPFhRCpO5oGQcxmd4Wfl4G5ZU+gcfggVFvbBdbiHvAC98tvLxxExbX+mJcO
r7CgMiRYUaNGSarRRZfYvxDlvNJyX6ga46H7tEcf90I85lrRaqUG3TeFV2nT
h1juWC29UYU4CxVDHtKP4kqlrSRGBUbdUprMn4DYBIIxdxW8vvtyRjxJwG/l
sjC2Ron84nTBx/lyxE7JmmyLlTiw26PNdJsCi6WVbbwQJX7rPpJdN6GA8wM9
/6GNEmtfVBiqLw/A667ZN3v/HMCSzUfHs32VaM4pE4VdGYCnhyf/vlqJ0tnJ
8b1fDaB/9NJzQbIKh5JU7/scBjC8alcyy12NqvfOdjNKBZx0bloDiRrKgsi7
qXcVaOSc7TwdP4iZZy720igFfu7qDuVxNJCas013eilABjTwDRs12CCUPqaZ
KXBvt9Xna78dQh07/lSeRA5BW+J1xUItnH5kXZ0qkuNdc8i5hU+1qAqnux0/
KQfBrx+3OKXDucQk/j/r5Jh4uZ6VwBxGvBOR95Yhx+kcx4aY2mGYbBAyF/cS
sGlztFAe0EMk8xTECQkEdJdNs2f1WJSaXl2URGD066ITvbdHcAdcZ1YQgfqD
wmTmdhLzux5tjHMj8Kj9xLa+HSTOtwgDGj8j8MDb9YPyXSSqgybPMiguY5fk
+wdRu8i+oMt3JZDbk1uVTu3E/s7m3DpnAmd3psjNYqjcMmKesSOBpT77vRbc
pPIY3+nr1gSchLZGsl9JXHEUWWqsCDja9bTcvEOiMMXPy53iD6d5gX6VJFqn
EuqaFhGYX7MlIrmWxPaPjsW/sSAgX+5xzUhCou2SwQIunUDvL28PSLqpXQdf
sM8yI9BjLuQIekj4zE1xX5sS+EPnUrGpj4R7dGnLGRMCtbfsm+OHSPCdX6UW
GROosX6dvmuYBHMib4l+HoGq5FyeA0mC27W+ZQ3Ft0Ot+hrGqD6HzLkdhgRK
OjsFme9ImMnX2bEpLtyYefwg5Z2Hi7yNww0I5Ff4L19BealWYTldRSNw5X9v
2a4RUToj8C8+l3Fj
      "]]}}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.005555555555555556], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJwUmXc81d8fx4UyymhoKaNERklFonpJu6yiJEQilYiEilBGqJSQTYlIaNiS
vfe8Nve6w13uRYPW1+/+/rqP+8fn3sc5531er+fzXnm7m2cc+Pn4+CSV+Pj+
/7rRgbD0SSAD5377nDmaMwjr/umNQqlsmBAjvRf4OfAPSC3c71eNYeubE4fW
DYIbUZ+7pmQQk3uuEmalqTAw7WU9dWDg51vN1OlXHLwZNpYvFSDB40fNT4md
ZLiLCzuTI6fAvGnI/+YyC+FXT65PcKiHx85l8mNMKrZdt3FQ54QjB2Gk4To2
LndMNal/L8bYpx397e79eCkzJfItswu/TkusIIfSoe/fT/JdxEbz84dUc/U+
WJnpzQ6ljCHp3esuvyv9oGbSarxsuFDpvMA5rzyIxBXc1fts+0DaEjeXpMgF
xyaAzXo4ge076l6V3JkEv9Yb2ecnSbg6ejM7q+A50g9r5234lgEaUzDz7foq
hCslfM4uJGPxvvMGyiG1UGK+EmyhshAmyVweUzQC2rvFP77pkJGZvIZsVdwJ
nR2Xlx5poCP3HpUpJ1EATU0Z4vfWXhT8ni9/mTaOXx8eK9fz1jlzJUFFW5SO
G9Ocn09Ws6CRmju0zacSq4TSHYyuTKHo3/CVNSwCZB29WC5XiMgRPfm3gFQD
A6NDs7X1fchtz1zR/ZeMjRq9LWPSXPBJlL3la6lC8ZERy0uN3aArGXeZ3BjH
xpW3dto3E1DxPZZQYMLFdbf4My1/hzBbuvVPW3o63tnsUjigQofTFjGHR99p
8BZmJskVUWAxcrb6TjEHG8OOX330aBgHX+mvng5pxcPzF29fmJnEmz7GRf6S
ZqSaaX7VypmA/F8lr8B1xXA5XSK+7DETTz0NKPnaLEjf4D49oPUZgz7dEjWi
HESYqauaGo/DNyX86GNuK3aTDdWPm5dg3d3NNP5YBj5vfJtMFmsCe+Xfq6VB
kxj4/JFdWDeJC4FhEobHmCg2sjqwso6O/SEnQq1VaVA3vd94J4GLO3NM020v
S/FtbdOD5j2VIL//Vk+5NQl5cYtVBf0kjBey00J3sOE5rHR+x94B3NPaq55W
S4RfyWZzXxUuLIuEVltsY8Ag8cLGJxEkTFWwT3IfU/GnxSGokMzGQx3NJS83
saAvp+6zNTkX0jtezK59NYJoCR+/tmIGIldvWLTzXSZir697de0tC5sEDSXP
NNPQ0VKgdk3jA/Z/36C/VqwNi8bpYnmiRfjsc5P4fCwSNw1cz3DKPoN/xmiH
QGAFb19PVl3u4WDxK1l/2fPdcP7zvYDuR8SSpNuCwwvtoE9qRbcUTiAkjvDc
yZEO7sGui9fPktA+rnJOd8soqkpq78+ZpqKv1Uh9YrgQ3zycBvPcKHDQJKYJ
uZIRa7Fu2kqXi6dVr1pvPqbg4hWuBa2Yib/u7YG3qSQI3Fnwi88og9NX07KN
VVNIFVFo6ODt96BzON3qcB+E7S80Jrm/RNBBE03lTVNYxUf4q+FCw47LP7SL
65vR2e/X8UIgFwFueh7rfpIRtyJQektJAx5ryBkWzXCgrPpQffjMGP70X6Pk
hLNQXC1BH4ulIK1KNHWdDREzkU2wEh6B7X9+yRp5dCjaKZ55FO0OPFH5t5zL
RhXxpU1qxCiMvvkcE0qpRExcT/eKkjo82lE8rbOSgEr+mIovjgS8+bft3PP4
JoSWyA8zTAZRfFZ7cdVwKPytlpMf8PWhwduz8kdINz6NlE7r69DwOKT/R2UB
A8GX5EMl9LpwqfX39UtGVCwdGHz36xQRfOZFmSK1TGxP6FCL92TgyvfnwXkV
DJhKNVetz2OhRMVCjNjUixupfesGKASY2Uo8kGl8hWeNW/K4j1nQXSG4sow1
BIKt7Gj8OzZ2lmisrqSwoTzh+l/WRhq6gtVDBe3y4DFu+q/Mg4SmvW/5NvjS
0CRaKX+D2Y31PiFXnyh+BKFWTX26rwUtc316+u5DyN+6Re7/+TMj5r5dPrkT
7v46x26f5SBI3bUArEmcCLrwucWrCDM2gqNiq4chGf3+2lXvGsjpjm9/osqB
xZRg9z3ePST2Zh8o2lEC8VX+Yi43GFh/pP2oqOwUnlEL+cds+uEXYTqm/ZEK
7TzbHT3VbOh+P2K0dst9pDxn8h9+QUXaq22G84fICM5Yd0UtngCksW2s7vTA
Y7UURVpnAPIRGyoVQYJW2JKkqxeroHPuscTTh2w8sqN2rZ+g4/Sq+tNqxC7c
CNngHyPciO74G1c1rasxtjzeUv4bFTuGbHUkHFi42VZjUbY7FWa53GzBD02Q
yNEwCnIZRRQen5k/QIfCG1ei53A7fhgMNzrHdeO/jaxtSTrFyHX9+vqPRz7k
WZ4SUvQ+bNFMdRxU6Ib+2/QjsswhkNevMgqPHkPb61yz72+5cG8cCjhwjosr
voHLpP3TYeIzdeXVUg70Fm5su2DMQnOEd+rjpEJUNNd9bWN1QumW6IEwXh9u
GXUw3G1IRdCp3evt93HwsOd4QB2vb+Zi3gl4FzJg9KrpEV2ZgmmbeU5q5yT6
Jv1Iq63KsTWYulz1TgZEuRdSpGgDYN6SkhoQGoWNkmk7LSgWhlm0fTV0Dk7I
yvkJTmfgsTftwr+6OqyvT4mUNSajaG+J6rzuOG7za+2u8M9BhYX3KQHnRuz2
7Z/YOEfCYzluruULEpIDLNY0bGpGvrz393v7SpGpwRBy4e+BfS7FtcuTjZoA
1zv3dUlosLuxPEetFmfq3vu7/UfDtbyBa3n8hfAgv52OWj6FQLe6LEmPIZg3
eqdxeD2fRWyp0n2ahmmnX3JhyUQYLvSfTCzkYIO6iEuFywS4SR9/BfDl4WeP
+OeVGMN1W5nvG44wwH/t2lCKLBcTnhbXVlVPIHNlSMuf8CH8DoX8iDIZSX2b
uQKnh+DqkP728Z9UfH5T6LfjTzNCTtkGxdWOo+cZM9Fc5ytaU1YrJpGrobLl
foZRABUK67P+6uf2wWQdmfr59CCs1r6rFQv9gIKDhMISNzpMzGa3xiVO4XSt
RzvTg4HLN0sXp81FQ8rc3bzcoAMCZ9eP/aVy0GX2+UHOhlZ8rZh7lW3MQbNT
X1k6L5fsu7kZfgH1aPy4bO325A4URuy7uUO6H+yaTbnGAwSkXC9rFPCawOWD
buEiFUwIUR1/l3/phRIlfMSloBoERbsdxen5uMbtiS9fM4lDKiXtxMh6VCoZ
yq43G0PTnqJH0V8n8bCu1rh5tBfnGzd+0bn8FapnOs+bFtNwh1x78a8cE67J
Nyx+z/N6TO1DyWlqEVrmaUHHmkfhEZ7lv6DDwp0VfLNJ5B6cipk//zOvGgmS
Mkt8NWgYict9KRtPhTGdFiN95iPmR1IuOsgycNJ63cXssD6w70bcHFtbgniX
7S8m1dpA7+2vXhowChfCm3GGTSMuGHz9G9sagf3ZRSe8dxHRAG9L6b3dKLuk
f3VqiobdDtb+ya+78G3L2UfnVzTALsHRIq6yDg8bhUqE2u7hcHJPdbrNKMTe
X21MaKHgsKjcL2JCHtQifQ08TUjI0auw7blNRuqhruS4vD5eb1NDfOun8Pyh
7dF5GRa63ko25w1NITy0v3hFShfmfq15Z59YDVaP6ZpUCyIivWT+xhQxIfKC
33fucCZEVw0dj6RS8aqs74BxQC92PNXevUuZCbLP1u29vO8zoGtrLX0xiCif
rXtKTcl4OSTy/fJ5EtquvF3rs7YfezRFV96/3AYB50IlORkyXlvyRYccLsCF
EOah1EoapHbce/kkugZeSffzkoay8Sy66rK34xhWtAkwstr6caB64tYL71Zs
sLY2rS9txtzmzkkRCxIkxD9V2pYWI/x5dKRleR6sAgLuS5ylwT77E8vtNe9z
w2wEmtXfYfk+DVNXhUGsPalR1qE4gF2yd4sO3GGj3Fvs1lZ9IiaUfcJ3NvE4
aOv025wKOnRDx4ILQICNPOPlu/5qRCWWnDB1paNnivZXM7gepreSL0VyOvHX
L+XQc+YwnklKK0yHkcFeJiG3MaUcdi6c/x4fYuBdi8v1aPePWKioFV8zMIBz
YSoSO7dMIVv5rpVwVgfyivZEK85xMGI5ruxP7wFTOvFomF4LhJJvqEqeIGFF
xaIfyvZToEmYs4TspsC9FJ5XWsZEr+83965OCjKC6YsFDg9BgDZk1Rc7BacY
clNn5wc43xa+NHWpB/M/3HW2D3SibEuQgXBqLfh97Z/6WbLRLWnypyP+Df7T
uf6n3ZMJovYSbkQSCfaJdoyER3TknFwvEDjQgdBLG4ysrtLhf/lZ8rr6Woiv
0B66ZsfCdf/nJj37zUF4RynWdGNgViX/zNH9LKxcGnH82AsKbpl5+WwMGkUt
c6JmqRgby6StHQ8MT2HLO/7oJ30MOKgeP/l1hgGi0eiDVYRR6Ok/faUf74/c
m/YhfgOTUJ+piavXI6LjU3d4658mxLNs52jrWMieWfi94MPCIeLG3bvEx8Ce
iDI5LjmA2w4Fklnz3UAW84nc+yIMesg7TBxqxZTE9qGGFDKuOQ4/1FGtwuSy
6FH6qXYMmvmXX5FqxdorJ+RfbGei03pxoqR0NxS1ezmf+cj4d91+plmfDjPv
K9bB8hwUKZ1qi7QngP9Zl4WiKgOx2JAhdpqDpgyu9vyNMaR/PVpcNd4HnR9d
q51V0tGT+HF9uNwISEbBM8tvdsGNFtj07f04kgrzLRLONeD4xRPu20S4+F1w
p9P+Axu/FqW4RV5pwt9qX8XV/EXo4ls0tHt+EtIG0ey9st2Q13w0+snzIxSj
rz89bshCAstWZXiWCJYff5ZU9SjK9uROGS5iYKFEbb9qXCeS/f9qS36kI7U2
3iuwgoiqY8vFhZOH8SchNHRMfwxLDhIj+G14c7RU/XPQ80zc3Kpivu5XIcys
P9CeJw1jL1VCxCtpAIZNNnZ+XXT0dW06qixCxlLBLPdgSgfebb2/acPjIZxZ
ORmxfhMbuZs8e4RtBvEk9bqt9+VaBETu32PB6/EjzokJ91eQceXsKiurg334
o2gbrRbTg5SUW7vmr1XhQMGN9S11lZibtdSzTSFhwjGhSpTXz5FGlRnDZv3I
vcpnzHEj4/Od+GbSw3L4080cI6wncJi2cNDpFAkzXqPfqHQSRA5WtckrJePC
5PeOzbrVSGof/1E+W4O03PsRV9bweNP15XPZzmH0Fq8wz4hmw9Rmb7Z80SRO
J7xcOPWDjQpnfkZByBtoSM77NvpM4t7FsYxDRnlYa/W9IbGuB8p/g3aMxtDg
+OvZVXu7YUxulr16UoKDb/w+Hi519WhSyKz8xvPL60+sJC/bDyD574GoEfsJ
SMReNHLGBGpeOzkvfZiKAutBuVe9DLxymNksFfMaPkLHXxFeB2FG5PzuXndv
jG0eUes/QkXepoaoqg1s0OvEFAL+toLktZHYbzQBUaemPnXeuT4Q25Pq97IK
p7MHX7yL7MXi008fGKwmITFHytlD6w0k78ru9fr6AbJCWVZxVaEYMRM6fdOX
CaWLoZs0H5JhkPTS8qp9BWwzVjZmFTCRdWrUdjaIijqbG9fE9dqwrH+X18dH
JKTKXP92j92JpxFLsrqsKbh7W+Bb/c8hfK78rgAXIq6MOR64gU7cJSUtYiry
fOhlusETTToWkrY9v3+aAoUiifqsFYkIjVuydtODHJipjnhaBXGxvwDGX/rH
8Tyj5knlSxqi1n5Lqasi4l6nqNwP3r3aUC99dRlxGLcXTJRK1WkormEZnTtE
QwaF/49fSh+aZLROzy7pxarz+20k7rFQs6ij6n52DFb27FxH/vcF57UdPzV6
01FzPITaJUDGojaJEIWKASi+SmOcF6TBkEtZu1K6E7J5mU/2NPZBaPF1/Uxt
OhpEFhJb26eQOXj479IyMnKKjhGXCfXiZgJD7qUtDe5jmxRdT3BwbF4p/daD
chzdbUuuu0GG89IhAX3vevwSW7vEe46LP9IxcluJVHTvlihbun8Kx3yl7L8X
8nIi4aXwFyUqtq+b51qX9GOiZWNbnXo2VMPnH6ntG8Whg67p/2WQcKA36ijN
loyfSpEcM99RvBV8syD7/RM2vm75kv6GBfWSw7dL3hJg2fPukcdAOaSLVnkX
Le3FuZhWmcHeKUw/HP1qEjOJ6ItdeiH9DMhWvko8kk4Gufjd/NXHXEwGaF/b
1ECGzrtaD5H3TXh0z2wPc9kImFkRs1ORXLAdXx//TZvCL2aNvrNlN+R8Uxi/
szgIlfnZ4zDQi7OW6SanRCfwy05vBa+gsXTPm3TKMiL428MO766lY80jSVGH
dxzUBB5te/aeDna29amqxGFQ1SpCwuWm4KfCMRY+R8b5k6c3POD12KH+zQeV
Dpfzen/2WsEpLp5lSL4oKuedK8tveH6eiebSgFPYTET2yHE3g0ouUsJt35iN
deB2lbivVjgF6uwW39O0j+AnxVpC3RNeXs6VmvK9mI6xKFmoJGD7nw6Ne+Ff
cH9TWZRqJRVXbCOeGS+hoz2OWqmWWwHLxpevmPZkeJtpmMz9YcNk0D+IacXA
lFV2tFMUAdENKSylC/WIUbrVcHWYC/0vJwkh0o2QpQTm5t+lof3mHrXTxGz8
pzf7welnBALEBY+dfd4Lq3nBni/+LOwqQ0NdFgn+7wnBo+w4tG0w7nsf+Bkp
wwM8BW6B5f3W7XPS49Bzn/4gdikKY0ru8b9Bx/T1E3cWv2Dhme/51PPaA9hb
HfyppK4PRV/IrkF9PigsUiMicRJTntEfDxbRcWidwvKWtmGkFAdI8bu3wG9F
jsqqtAEIBeUUFMmRIdWMh79Wj4DFbPjV9CUe8uldV84OUCEqzkz9fIaExW/1
Gl7MDWG1tkF23lMaarNbI+PMmeg/nTXMzuDCULeHU3t+ED5mqRoy+ykY9SAc
WOVAhsrKw4dn1hGxbnfvyvwVvPxTU4/Z/I+FKdGn9eI9k5BIKY9V4lRgIdxp
RY9jKpQcDJ/cqWFBM0F5h7ujN1glgkFLnhJgnB2VGQMyFjzZS4ppFMw1iXTV
Usjg9Pc+adlCh+TGniSnzlpk7pEpGpSkgKCgff3mMg6eKb3PuGzQgoO3ewNO
F0/ixUKXqGIAz78rLfNy337FLuKivR+zW6GZ07d2bA0BqudsPks86YYmf3RM
lTERZPu/TTrLJxFe5s8fzc8F5y9fYGPEEE7MCXV99qFjUQSF4LGSjGSBC11r
RqZ4XpRX4BTE47O0DCb5CB07OkNON+/qQEpu2Gm+vX04nVqfm5fMhstVrys+
gVXYV7xewshoHNv09BdHv66DaZ8JN0+6C6v6Xn4tP9MED4UjuhsyuxC1Z/6e
ku0w1AnZg45SBMQzuhra/8vHSKr8T7nwLNxTDgvZIl+AjXw3dKpO8uZNx+Hg
WpMJRF9vCTNS74PIkcDb95d9xeODb7savCkoOGTt6tDDwAmFBy4agZNYtmro
9rhUA3oOxo0TPxdB/beF5dqBTHgT9+ffdxlH/ja3/LmtLKSv+Zz/+mITQurW
3LBTm8Jx2aiI7jW2yEySc3/Buz960oEe7U1T0Jf8XPa5nwbqIm6+yL5JfBU4
4fRPrhPKH3NC1lfw+q+niDywh4KiySfpSpFUlM0arLj6qQ5K00s8XH4TseqB
8hZRn1wM2htV8s31YVxP1TY9OxuJubZv3vqyUZzJvFy4tRObxd/OGHnx+EO9
9c6ZxWzYBTs/OhnCAKX7v49XpJuhztUu8+crB03F9vH5xwm4y3dwfeoOMi6P
Gftz8rux2yhbqdrvKy423E59vofA45uytJ4rVHDHPAJqH/L6WUJMbnRyAEHi
H0YMLhTDL/MusZFXUsSl5SmskxyovrrLrCfSePeFP4abPAXGYeGMkzkkdLg7
/VO5zIbPcNqqp839WDWzoLellwXDlxkCadupcJf1bOkwoiDBJjt2zpkOkepd
jd3tXLAkdHws3rLg3nfjAPvZMM+rtzyYzKHwenVA4M4sBxSZ2RoXVifkOHt9
/hRUgVukvo/7jwgB6+TPHwi83FbZ95UsTkZcYqxlKZOE3ZVpH/m3VmOnt/Ca
Ky1EqPxQe63iSETJ86Ev7Tz+rZO1CXA/M4zlhMX+nmpkHPyo8Hu8hAPmhpvl
b3jndnhTt8cuZOMfZTFOn58EfddvttfqHpSyGmJSXIqwMujS/rn33fi+qdvT
N3QSK1cFf69tGkb5i+qe0S1U9Po/3rgqk5fjdr9uLYmhw5qpdCm7rA6aa/K/
XywmYvuxMVGl01/BJ3VjkeWiGlzsFLM8ZjuBpHvScWltHAzG7tRUkONCPOzM
u+nvZOzLE0tuifiAhp4Hpe8tCZgTDnBnepLw3u+l8hGJOMSYk/5Rf5Xgd2uX
zM4ZMtLaTt3hOIxjUfLT3tPEbixIookvn4GAjgHViwIkKET0enDcm7As+7Z7
Fo0Epth80r7kftTtW33ef5QFjzcMv8l8EppOePOlGTPgpdE41OrXBNlTtfX6
JwmQKZDeHyQ1gtDDcnqGzyjg25c2/H6BDNrZp1G/cgdwI6Cwe1/fKJyNiwZf
nIpEm22N/LMlE/gpadXpEp+KSu2BH3nuU/Bd8sB5oouLPCfx2rTwUajSHRMZ
rkMYfmPvfvfBMHz36ASUXKJhWKEx9vRKKiIVLFNXa7LxovC7q+CzNjRsW419
7Cq06sZGXgnpxsNveyNeUIOwI8w0cTCXitMBUTKEcwQcfNIZy7ep6P/eTLu9
k4rA8tVzls/bIftPuWNjIg2S71kuW5tGEbNde+90QRdYztej7pTQkaZvpV21
iIYvtz9LLR5jY/q8Rfnhunaoar5Irj3CwpZ9w81jPB6ruX/O0WHbCBTt7C6N
3GHCp76iSUJ0GJmCr49t4c230Hry+ksCDETuF6qoO8TBFULYJumgRmjdHd6z
2pSFg/PbUi19x1F3tvq2OnsK11WN1ZxvERG+J2LreyUiNPp+eQ8XDEJcqULa
w70LL+ZWWGcnduGmjqPF08cMLJd6FGzxcwr7fA65VY9xMSYmGz+6igiLcnPh
S0ZlMF18UuxY0GvwKeYcdNtGR97Akz9rOyg45WWTPZQ3BPdLyl9fLyJjsOYk
MSp/Cj19eRcOb23DX+eNG5+vGYbzsaOpev8xcDT4kHyHKxf5/94Q056konF/
HuGT9gTiXl5M3eLbC1HhlY2/T2Ti1qov8taFRHRrSLpphnxEvu3OlVt43v47
8bUMtZmON3b1rdKvOhAT4/FuVrQLb069f9LizEW53MWcTWw6WsJWWCjzepLf
pKI9n1MDo/cEaa+zHBDMZT23EWJQ9Xwb+6FcMSzX+o9WvJ5EQeSFr1kZBKgV
aVhSTIrxpmzg6EIJCyXVE0lc1V648DuWRZ0l4V+g1Gmn5jI0+rTP745gInrz
gfkjo5MIHhnLFrrQinm+ZVPO6R+R06mY+6GgBxc2bjiJViqGs0U/ltj34GT9
wv6IyG4M/95wQHzbB8i8qWY+fjqEKKn8l5tCe+FY/Xom3ZqI+tBkKWP0YuMf
uwCNl52YL19is3usHybPSEsZ+8ehdkqxwMqlFbsdNCjn3/HyKb96ffzVSATL
S/34oDzI631Sq3oNAVYSfGcDDZvhqDi21fbxGI5WdshJzXXB1iJ1yq6TiKBK
AR2tG6NQKHY5Y3WxE8v9151yT2iBQq3uBTVCC+jV1O5hBm+OF+883eXDwbhP
/a5VSVNwDspvpovW4vOE8BfVo/0Y+t2/WE+bgunbJwJHfIdwZ2Q0YwWZCfPk
mDF6RSnKtN5ln3rRic7ZXWV3X00h90TUPW8eL8eEv96TljuBb6t/SwUWtUPM
7l3V66UkLJs8urWhpRP+UjWHg7UGEHpLYmbHVTp6BQLstvP6UHH9g7f+0ZPw
zbJZvNVhCl6rBxr49xJhKfN5Mj0yFRuVZ5/9SCHiXPJk046pKvRIvvXUKCNB
a2v6WY1LZQiUCCv11OnHPs8fZloDdPySaned+T/fMJ/RiwxoOKnqWLC1lIhb
Dzft3etPRcK9u/EtOlRUzFmqHcimI5HUrZMzy0ZPstCyzCeF+ML4ody3bhgN
55qz3B62Y7XLh7dNTyhYf012/HQhDWYPWW9KFKhoXOm2N+g5F9Om2/lOzLGR
VF4xqHyagdsfDF2Hc2swMfNj6KQjB+ln7xDf8nJQqP9IxmgfBaKWzg5B6mSM
GPCaZpiJpXaUi/yHYtBia3Img8eFK46kfI98T8Wu0DqZvL3VCOfKfhlbGIfD
3SL74h9NqE66Fbp65xNs6MvSsq7th+rqr5v0xciYM3X82njxK+L6VOpGyRNw
NX1cfXxJFaQyxXzu+HPQxC/tJs4axBFTyCtU8DhNsGFkV201TPR/fJ17kYnG
6raL1mlkXJ1UPeLcw/O9fVxXYaUmmCq/WTqiQUUV61GRXzsHnhq/fVOe1SNH
8Ee/zigB+kuy52u8KMgxL1OuCS5EbPgBQsb0OBT9FSKq/VvA2et648x4FRKz
RQyum7KR9WtWfo3EOHwKvgnz/8fE6fmLd15cJ0Gm2mp3RAYd+zLaW3LesPGK
aDJws4yGfSan/65jTuDWg+S5lfb9vHU+ywqlcPBYVpZkt3QCa/66+TNtSZi5
vygpW4z3/Oen0W6HG5H3qj70YEA/arvbb4urs6Hx4i5VDQycX6Z9Td7wMVr8
d+kQKgMhvPPxtPJoO3SF9P3NXHi8FhsUT7xNxO+clPzuWwzsmtYU/vCnBCkX
tHcz1zMh+TBA43VWEnzn37/vvM1BYV3GVXIvCatCSv4908yAWc+Pn4mKVbhn
c8MwgNSOux7nbjQxOWg0XyZoXEXF3YBiA88oHufO687+y6aidrax/+vKYfQP
ijqm5k3BOL952yIzLr4Zf7pQSuhB8lspr84LJMTKHFlC6KqCTO+WzFYaB1N5
45l5O3qwJ5/6Y+mxHhD8k/n1eZ7q5qknPUAewT/VTtlHW4g46/rRUe95Ey+6
VrdpscgwObBVeLvIMPx2Kdwu/EiC7bnDn9R4vX3KULdt1GsCb81ynox7dENv
z4uD76d7QCNOHb6cRkXAj+1N4YVsZJw6HBeRWw7DzU9zzU9RINyx4rOwZiey
pRXs2Dw/eGnmJXVYqBoZP6/y/6joBa3yGymvgoYlvS+InuFMyAoSby+/UY83
qlGxUt9jEd22qN1SewhaSo/K30sOoqMuxnit8iRsPb4/WZdKBEHFdLcXsRkd
OWorZJPoMDIUiuE/0YOJg51rL89wcO52p/TM1gneudStXBzdCBEpnLpkH4aD
ikJ3xH5RcDNygvA0kA0BQuCc/Wg3xm8JnqmIZCPsop56SWE0WKqD90WuU/A+
ed+uJ/29KE16a8BZTsfrR0eOfzGkYbETNeFs1hRe/Vx9K7l0HJ8TXbgMz///
zuafsD6YCp1ASr5SOBGZ+9HenFEKMoGQ0mXIQniNho7g8xqIuqd0rMzuQau7
1rP8m33Yt8PUzOQdCUJl0wSv5gaoH1loWZsziVCHDFH7k9WY3KXYUQ4SKoUL
7j//RUTlpw0/wnjeccllMpi2mQXhKvn7C+8paF2smz90iogza8RHF/9uxlLZ
E85yPJ402uy9Y3k8G6q+P5xkeT2dollWaL61Gy5e+Y8ULyRgr9i6h0ZHe5Fs
031wJbEKL1/eVRQMpmNJmcdQf9AUbts46b/PGoWgEr1KIIqLTaWm97/bjELu
4dCLf20T8PWbMFjM8x7+edVWh9cMTMRk3SLxT8Ln9CW5Js8RbI+58+fJQD8C
x6YSs4y7sIn29P65IRasdU6I+K4h41lYPN8xvUl4MnTjf1vSYWh7ckmfNBXP
h/iI7N+foeco26n5lomTTke3D1tz8Cds4OwZiQFcv6vkU388E2nEFc/EA4i4
3NNlTaAyQM+9JZj+gIwHIw7X035U4JV4z2j4cBZsshkJ3aeZsD62ec37ozVw
3Xvrd+EOEj7UMQPal1Qj5HHhXJzYS7Dc9719kTSM8KBlZyKzitDncGCzczQd
6+uOPogR5vWU6fO+W99JeJc9XZX5ZRyX8/er2J1JR/qw6GRiNhfB3450JA2w
sdhzOnTq7xDWdi4/WfWlGamLjz2RZqdBONci7TuvnweCnUp7v/XDLtKthqRK
w6h7s1POmzbILdBSjI2ncFM2Df3sDtyxi+rb6kuBBmm5r8Z2nmdvkxlKu0/H
jXbPPt9mGtbZ7brGnB/H3Tsvx8zbBpBBWxArsu5D6X5NJ7U+MrRPWS4XdpzE
Ji9Bl1UXKfBPufnpaikd23UnT1eWVmDmZhGHtJwG34RfwV6fKPj9XnmimcTC
5ezDR0h3aOifc9Am141hs6pme4EdGeQ/Kd7Z8gRwuzZ2Tv3rRejVqgGJPbwc
3RBEi+KtJ/Vfl65YwDDGhdWrhGXycXht/rJEcjUik/bmf5rgIKSruYZ0iArb
LReDAm/1Q/BsZLtbGQXmlzi1i30mcL0s+u4ylT787L3bL0WZRJuI9tdrZ6eg
yWScm9nIQcEBy8dJQyQ8n9rX9pVNhosjv46seBtuJhFTvg1048sLjXfd81Rs
Ozj/aITnEdNJhjtfEicRtfnLoloRGiKVawjzHX3QPM9IoX6fgKPmE4vgdxx0
qMxs+Cbbi/noO20eilNY51XzSMGNxxnqNudSphl4x72f/+wCAZXLixRNwjqQ
HnF6Veh4NY5eU5ct7KzF/ZcmUvqf6NClTbQ+NZzCpIzmcGzGIFbqG6tIeHfg
ePaVcpNIJsSMJQKIVALIr61fiU/SodB35aGfYyQirD05BEUSWladi914j4pC
W4e1O91ZuKXxOPKURxf+7f3CXrGRBUE+hoW+Qh/4l89Px/7tRFr9LeKBTb2I
TtO/uE6MhJW9c+Xn+odwNaJ4WonXf393Da3zlyNicZ645FG/Blx5qW1urVCP
/9TS3h85S4ZZ3gaF9IE+hKhdGZWxHkKZL2H5Sq9ObPNUnKcsbobaiV5dzxvF
+HPN4OOBhAkMxFw+FtfIhsmcuW7f7mGQI3UsX77IQ0a97UafoxnYuUyrjLO3
DbPxR4O0lSZQU/J6UU4RAwUnnMxMrZuwVGDdwwtlbEwoRK8bON0DcnbnJmnD
cQxsG/DUPUkF/06dIxdfj0Fk0YoNtQkkeG4K9xIL5mIb/ztqT+8YOmhJcerP
erC019nV9ygHrY1+1NI4CqLPLZXvHfuEGD3dA5TKTPhp2e9cXDeJt1gso/aE
hNxFWRl7Do6j3pVvtkesBh88XJU1z/bCbEg3/fOuMQzS/22+en4EW+JuGf66
PQVaipuEnQAdV3b9NVGzo+K/R8+/+Zh24GTNTqfBlTFgrjdazM4fQY+78X/3
OPXY+n1p/ZuwCay7X5bJdSThxrJo2qdyNv4yVssdITQiLPZLXPuiEtQrFt60
edCOS9pKnrvucJA3E2RH4K2zR6hqgvE4Ea/OKdkqnm7EI6FlEiWtzXi53n5R
qJkNHIUOetccIuFqTELxCbF0iDaIfogMYYNSOzHT+YPXizGSJ73LivGEv8R1
aKwcLxLtfetXVeN+BO1VWiQLf6at1T7q87znNFuKsq4EH9fNJn5RoSEk/wxp
8QAVGb/etK517YKM2KIhgy8kHBazLhS5wcDK73E7GYfHIax03eCkTT0Glyj9
ZWj2gtyrqUf4xsQ54Qat5CUciC9ZIdnWVo0VRYqxOesrsajn1t8MPQpOnDs6
+43nnxvu1TR+uEmGa+qCaWFuAeaWXjVcVTyJ5k0NfEf5hyDv+MBG7jwR/3qu
+vwZ5KCb0p4zsZMM+oKPja8zCYqem3e5SlFRd+L9r/JCFja1jEgqCU/B9pSK
751oFt7OpsY1lA7A+K4ZKD978J3zr4dJLEN2ammTEK0fh8qHaYdXt0C35KX8
fSIX812Ru8NNurDohZpVy8AwrrtG5nCff4Tn0qdfugZ5+yXVvzHFkccL1BQv
MnMcE5OjFiOHR7F1jdjM780MCIre7Az7wEaU6OVhj9QidD5xbjM8yYHaobTb
CyeYcDipd8TkVzecLnEtO4NJMN0WtfvLtW5c+TV/Ty+SA7n84M38jAEsXV03
aj5DhXnSnba7/WxUlBlZtsdQcFn7kUvDxy5cD+2Yyfjbg/qcqkg6L6cDBYr3
ni6iYDJ+0MdI/A7yvbtOcpazUQKJ5OYFMsTnVXz9Runw0Dny3+/n/fi9XEDm
l/YAZNQf1Lp51PH4bePTwBIubig6WlM1xnDWWCXD0oTHQX+aw3UMWkH3pF1a
VV4HiWLDHSpu9dCrT/ey5nm0UeZVEY2xKRhF8HuucGvB95Um95qUGDAQWJps
wfceHh/4KtydXiFqUkPf8/AEqr2W1TgYE+HPmn/16dMkLpdamSQx+iBJuSu8
5ekUntSuUDwhS0TLTaVzNSks3N0oKyr4gwbhj7rKL8urcSSpMmG7ZRWS2k6F
P10yjk9d/8VmxJDgplb7PWCgBtJR++YH9lMR8Ve//fKNJrhviWVqiPTBzrmI
ksDLC3WDMwMbDo2jaaZvztN9FP299f0dBoOQaNI6Zp7Fy90VgzO1d2mwjVhV
67RyCPRyms0l9IMRtHJVYEwTQq7t/OLzrhE7rJcfFDxPhdXxV/N6VtHo/S31
y+tTFwh9JcKrl9JgP8Vg6hUzENV06s8Xpx68OjLdaJFWiaDcpksn80lQEws5
9v1aL9atzLDXkqHDYMlSjx87ubi+/uk1N082nujGPxDhEV4FX+GYzq5hMGJN
n1vwOCKd3vC77t0gnhodz98iR4V3+azLxyvJcIK7gohwK9QnwpbKWNJQutQn
bVyN59NagT2BplSItf57uDUwEm3HykfKdxCRk6kW4VQ+gf27K1pSMyn4Of3k
mEPNJObcBHsztzBx4ov+W5UlDFCTdyaGUvsQPm7SZxRPBiXYg1I20Ykr1/4J
XkodxYV9t66F907g0OARWwvevVh+xnL50I9+BAy9TEvm9IHBtaLXsGphoTfb
sVBKQWH+iaWiilwUyAgkK/dTsS7Wd2hKpgr/iFlif9yGIZ5+f6E/ugsfNMJi
3B/w3o9rHXWmj2K/oHdQ8d4hlIbxbd4WT4eKa6yOET8LJ3Wt+iNPMbE1Yscf
TwueJ639axTI862VRpZH9lZ/wIf+oBXJn8aQsO6P9cPZ9zhztmpkiwAN2/n6
l39TIcP3Q2eKHo/7cz/uepz0YQiR55Uy3SR7Mbhljd8xx04EupekG5+YxH8x
GT/aE+lQ4kZGWNf2Qft2iPw9qwncb1unHrWIjP+M0kZTG3hzttXi+OrSj3jo
LGa+6GY1hrx+qXtqVuJS+iq1H/VTSNstZaD6uxvOhLNalJ09sDhy+FpkQA/c
tjZe+jvUiQ0CG3M3LSfAbNBMWsejHX1aNu9/X2XCJ2y52vmSZuxXM7zntJgK
Ja3/blve4vHRo/ClpZQpHA+7fuTROQYmF24ZOPzug8dR6vWb9wdgZGwW8865
GSdPXJwX2RMDuk3IzVEBJwioMyP3TzBw7ugXLUIcGS3N00RaHxVml+1XVQlw
kNqjeOD+USoqOu+enVk7DqctI/kz4nTwN1m4vA+mYKBz7sjqC/1oXe008EWl
AQ6bpoUm9cdBD3+5ffffblg1xrvOHqhE2Uav6Ks1BChZT87o0LqwR/q/xNw7
FBDnTIyqdcYhLnHB9/uvIcQcX+GotnccIVqhU3M/u/G+LvfpqR+laG+3cUBw
C/jtnzR8qRtF45asndOVvLw0jfnSP98N65zE1JJjZGg59vHPLWNA3oYk4lJC
wHJCWgpHkwKu0n/lQkNfYbV3a8W7yhSE016+XEqg4cTw6V/1y7twaqF20Yvp
KcTtWNQcYUWC5oGY/yZ4c7CHI/wwgVIFZ1eRotHwCYgKSqfSuztBDjCc0B+n
I7nCoqRumIK4N27jT4/VotQ6cONYKx3oWt7/tGEMdNqbYxvuk7DLIzDZdAcH
buY+7ny9PeCc6ziuK9YIp3sfe2wXdeL9s465XV19CKila4mMEqGqeKgthuc1
Wxx3NVc1k2GzVE7SvqAVrovHu4TKx0H9e6ngUmA5Fn1blVAWQMA6oWDB8Lvd
kD3Dkbn1kIOHr2yL4nl83jInlz+6qQVykXtPMXJoWN9JbPu3loaUDSv7zOOm
cNY3N2+GTcJeFeuexYk8v79l9VHWYAr/Oa7qkXcawY7hdH7LH4+xpGBg92cn
MjKPJnvK8jj/UVn29kD7Tuy5sJN/y0067IZIbjuWdEF1efa/T1vzoeGqGGW2
ZhgnWv+MP4moRlR6uNE3y3S4LNSdW/F2AvPTbYr7PHvw4u5tZqAdA2209J3z
a3m+ntO/59VmnmeYL7EK0CcjRffG/ba4CbTr1HlyPr7F7tGf11JFObDU/Ras
+o6Kfe+K9txNiMbkGZmtK5J5nnPBcJd5ZwzcNqZ5XG9vwwvOi8HtAb5wvq01
fu4yG+bH54Pqi4ew7t2K4PMHuYjdLuAStKcD+x4deXuASIbY4adL4nP7wOe2
oJtbQEJyrfiGmVMlICdaufnx+C0u1T9bR4MOyYlLqXrMDgiWr781+7QHqwsL
DzxyY0Kl7033Na1KhMm9aF1WzOvpza+/qG6bxDW7k+Z3eDlqYduoQlzaiO3U
5CMkcS7WXSHPGPvTwHbzDB5z6YZIwcXDfcvr0D2qmXk0YRL79HZEnThEw4pQ
kcYdmYNYEyotvoI+iZLdmzdxLOhQY1x062SOwHB/xdfBb3TItb+TCpMfAk38
WezC82Ys1rZU6Y0hIPNBmMa19CZ4HTa7GDZOgeapx18/8LxmcadAtZhxJjJ6
zaXfcvuxzfg9g9tFhPnZWdIRcg90d/2nF/ahF8xHlwovzExgu8vsV25SH36H
5Z8LqOtDYF7Cdo9+HoclGdAI7j04oxS8R1SlHu8dFQS8effxuLtTvGrUFJzC
5CV6qGz4LHqyQDw8jNmdi0hPppiw/+dVE7x/DN+vrnjc/KwCJZqbk100X0D7
5uhvgxMU3Jdyt29+WY6C7AXBlJApOGft3aZv3w8BhTP7k1KouLfNLeDQzc+4
VG061/KcBJHgGTUNIhMfZj/Ffrfsx4plXOPNPyfhpTOr55bCwazRvOHe5UQc
9SbIrnKMg7adYVDxvUoEsFragqgU6IZt83cW68PF2Hxdb6FhrIlOkRZVacba
S1nlnxcmYVtroneUwsaBdYNlO15OIIqmuqXCaRK/Vh53LhGj4HOWTUv8GZ7f
Z/2pIhtwQAlIGqDGknHY8fjV9UE0+PRV5999xfOtZaYiTy90QfOi+tV/J0l4
Gtlds7erBreMux4dr6Ti/RMTbYMFNjaf0Vs7ZMbAp3cilbdNm8DHbz+5r6we
XQOnY1buZiP6F/unqhYVDF8tO/ObJNjpVt89v5WFw+u4s+9tR5GyVZR4xnwU
3RufvEm7yYCAl9veFYc5sHdP3rdlPRtftg2eZILHX0qSg9mP6iBet4HkueYD
bJpS7x1sm0Kx0WjEZu2vUD4yl/C6ZBR9P41K/pmQYH3o14/fslSknlomKsTr
v8t/xEoFu3pwOeO+RsFzFj4VZn7NlaPD71fLjJoQA1vjFa4qJ5WB/DZtLp1E
BXH0nGICmwWjhTmCUEg5rFa1NxsqTMDfaeK+YQkT91PLLcLuDCGBNRhmvoWK
sJ8Hld7l0+H73fWwrgcbQ6N607KbSBj/yqfnTJ3CJ/a/6a9nyNi21YZQE8CE
96pkjzEzMoRX1bVdPcDEra0iT/L7q/DBTk7niQMvJ7vS/Mi7OYiTJ4s/Cu2A
k8GfuutPmWCs3NIvz5vPgmvTQj0mjehIGnxzrXAUiiU/Y+t+8e4heerb9cpJ
rL97cs8u4178SZLOdVxFgEpkqvb42RpEeC313CjE42BWnYsZi43L5F0GIxQq
Hli1GSYdHIC3ncmuo/tegL5e9N/VF/0I3LJr2U3eXD2vohdIttOR6DR14652
I37N04TP3abDZ7nLgSVVU3D3or3YfJ6C58qqB84P89avpB96C0xInSi4lzZG
hbAqq7W4mQEtaKSH3xqDs9jRhv2qFBTT5d+Ui7VC8tmblLhHhQgty7o4cmcS
Va8Pmh8X6oXG+9Iu3V8srGlrcfD+M4X5wyn0cl6OKbQU3E3ZMQQtWenVvjzf
7JehlmcPkUCpEiwaGWdg+IE1NW8mDVGHM2aJyiM4Zv1XOJHXu/+uNFmWd5Fx
onz0elhBF9qfU3WYpkQYxZgPkLqq4bw/eeOVnzREuVicT9caRcmxHZVHPJiI
8Th7xq+nDye8Vqt5f2/H6DsaZZUrE4/bHNcQ3MjoibjBjNXoxAnShRv6h3ke
OHCkxPUGERc25RyJ560nba5XJlWnF6cTvwQEdFNxPsGcLPS6FE8uKFbq2JPw
xyrIJE2fDpehwta3syxcH8qc3rb1I6Sqo7XO3CtF/kLIMWEtLiZoQ6TOg51Q
3vc2RE+FgdtKU0tt/0yAtM6969kDJgS1jE0fqpDwVeRb8fDGPpSNl51aH8zj
0PLnJq/Ux2G/I1KyYagbi4ZfzA3IEFF73KxL8nQtPpw/3ir+tw2MQo60vDID
i/kND1z9zEXuuPGo6Z5hXIjPePP50hRKe2Or2PmliBefOHjsIhsnox9sv7mH
De8fIQZ7fWrxlm9m2/CzNhh8aw04aMGE8GjupAKdjqyf9tvXpjWgpDX8gvgh
LnRvOX2WmE6FIWHJzZV5DYg6ZnCb3U7AtW1+4ms1RnBkZ47Mylc0fHgvIne2
bQgFtaPL33awsPR3/5/X2dWQtL6WSBdshuEjm6LWtE6E5rZcTDWhYPcz8Xpx
wX78Z6b55phuCzp7hJzLCplQX6XwhcuhYcmFzOiec50weEowlCL1IuhA8AFD
Pw46CYuukjp4np7wj2nDiYWFqczmE2uImAuytnxtVQ+DnV3FhW39EOV/YXDy
aCactLnGzztHwXwv5X05i4vpc0nPjw8+w43Q0KQBHodMXzsponmcjpUESVbx
oQkkVr84+JfnhT1SSvttH4wiZ8WOid/1JAwoVMukT/RAhj/u0wYbIu6ttxs5
8qMEQ/fqZk9P8/j9/ufDah5j4E7d/qnmyvPV1cXTB1aywBrgGDV/e441fD3k
4194z1m17t3+oB3uyrYzLTzPcNlsoX7WlYid++fWHTxOwK/7ojtdS1gwFYkx
cGyg46H7Ws9O/0xYU1s23/tGQJJwo8RSHRbiFzTLdFzq8Exn+98Pft1I3NCn
KKjFwE/zywunwmj49/3u87F4GhJEJ6VHeXNtu4q+/XLoGGzNlfd8zW5E7qep
Xk0rMqzihY9cXTSId0oxmkwtM/R0ZOUKeg7CLkGT8pO3L23Z616pzvL8/uWz
TelJY1A9FLp5+HotOG59syr/pvDrc96ryhAWIvJ2LG/MqkRa+odtT6u7cTP1
V6x4fy2qVM/E5fExoaVzZfb7RzquR8mKexmNoIC+Y273EBd3xXUThiuJiN8Y
0TJ9jwvcyn7ETZyE66RzW7ZvN8YEzPz+O8bA9ZUbd0OLCMcNE3sr3UgQ1W+K
kCNTYeOcUhIVPgjCMf6KzWq8OejaGTY3VI3Mt5E5yvFTkBexio2oj4PsY+Oi
LVkJyLuctU4okYvS3eWl//FeDxbs+9ghVQcPYxfllM9skJ53P6zUoUGm1W+V
riMTsgL30v1DCfhrJjeSuaQS5k+D5kSUOnGNbLRxCS/n13x7UETh9UTU2HAO
dT0vl8xW3472JOITN6bwgyEJz76NPbxc/ga6FIs993hzv0R7t06fIBcZOe0K
z66zEKp9cTjhNgWRbhdJFhGVCAnIMF9jxMTCEl0vh84p6J1PMHJ8S8ZFPoaZ
inYp+mT/7Zf8zMSRbp+yK7s4IJ5dW0erGoGV/pfA2NPN6NTNYh8YrcI+Hlta
XyoH/6m7vrGkYlQPaZ4ej87H8UbHimYev94/YiV1ire/kTfiPybu6EJezQdf
/mUcFE+mvrw+1A/xXat7PWYmob/hvv8rtzbMlL8Pl/TqQbaXzqbKzkFcCTr2
gRbMxiPxqsOtkxMwWvZLt4F3/4yKPUqOx0/A0XeZ9oNCDo4Vbvlpz+NjrBXZ
bP/gM+7F3vHW5nHn/sAfbsaXn8P8cVykG5EItzM7L9d/YSFIxKiS7krG7/QX
PZxCNjg1UUL3Q4axLmbpXVFe3u0/SOOTEePxbADleJMXGYW533MqP9TCocfy
t9BGFmrilZ26QMB2k/bbpsEsJFGsl4Z0TGHq2+I8v0skPI7wSgvZw0Fjc3Dd
jQUOVLP3PvXq6EPeJYnGhKh+3P0sQPDT6cf6tZEXyToPkQTOqxyDfryRNqzQ
/96NGr3Qm0IFZOAVc3lXHRdeUaP7qHVMVHnS5wt8hnG9o639vdADyHVXzC73
Kgafg+ItQ4EhHE+7GmASTcEi9jurRTw+l+TQmBrbx3FC+rzW0LkOkDuXhR6/
w+BxVuX8mjUcDCmm+9dJUuB02FXQelkv2CVi2RHbOrEq5rjZs3EuVljJfDm/
nAo5g4Qvt2S42Ki2MHPPgI2Br0evGevz+FEibZtzIwVn1BRY0nfIOJV8/oVF
9wQiUj/sWciMgPvNEulEfiqGY47man3m5f7jCPPfxrUo9oh4debkQ6h7XBot
+UZCYfMVpuylfqSWe6/I9SWCYLwtceuKSeyduQkh6mcc/s7c10IoR+WUS6jD
kknsUXJ+I/mHjvjciPbCmBGY7nOgZvUyECnfeWXv+Cg2P1cwfiDNgK63SvZD
nf//z92krM3L/RzK1Sr5NxPYdsIrpsG+Bgq5636fbaxCsETMb9f5VtgdlVRv
7ORiyOzBxwz1KqjOx9XNjo1B/Hy5XMuaUXiRVeOaypjw238nmH9pJWjBTkEV
3lOw1bw4mD1UiKwTtmJ7fHqx0o8kuoM0iIqQ+0kysiwoXA3f5cPHhdSeg/8K
9pBxJlbA7tEPMih2124Evx3EwQ9p2kd486UeZ6/kIFeFHcLjK5YMMbFHSzSs
ksfjOl7lx3eyepFy0DVkLo0Equaibb18NFhFC605ZziGka8t2ya/lGD/HxsL
9V4ScolEPWY+CXHthZkaRVwUnLpwNuY9BfVrdlc6rJlEYmrQAVP7YUTuv7A+
YvgTRIK2lx7sJIFEFXKP+jyIGG19nV07Y9H2R2uNkVsrqBteBdd1TGD4i/6+
qNcMUGcTb66KHcQDsThjyRNMKE9MudKPDeNZ9LXZexZUHHLjKgjOkrDVWnc1
qprx9f3XVwO3ShCY0mwsnfYVF3U5c+ozLPyPgvOOp/r/ozgqyYjS+BopDaVQ
yoo4kpTQUKRUpJSRJCNZoUhGqZRkRRlJssvM3ntv173uve51B0lI6nd//94/
7uO+x+uc5/Nz7+PGCAoUfnhCRbHmFYWRX2zkmkWJnCNwvD5P/HaIexeWaZ1b
49xBhfD4yuyw1z1gaVufZtXRYfWkYaNkMANnfvGxuCLJ+HerW2qFJw2L0RXy
x0cHEXtv3ju4bhJFt93aLs4O4aZ2t+Xf9AZsfRE3IHxyHKZ/zoZyLQxjSDbx
v1jFcaywKLUw4HD/yz9KExE/WZgIVZf24mdie5JM8lueQTz9mGww1UfG+1QN
nzXak/jwX3VERUQCfh3li0qdI6Pd/vimtUQyRuJ1Bz2+d2Dgl9Zd3mEKZlbm
PlbewULETFDQa/lu8Eh5qMfJD8PdweUi3ZiTr9tMD9hKtqNR0HFHjcQY3La4
N1qSIzA46zlkEczC0QFHxceidFy77ywuxOGTysse51Wy+2DBfi/3XWIU78tV
rqU+rkX6ZU95DdsxxF4XeSxYP4Bau42u1x4S0XO5sDrGcgKbc7vGTnA8J/2J
YbULx1s0xRoNNtqNget7uHXCsRwoSyuuJX2rgYfzuS+3n7Tj2tbQfhFO7+Rg
/uXv1eV42HLM12HjJIp3O6hPyNMR5DoQAlFvnPhrLBCcN4k7D7PyTs514pvt
GqWSQA4vThfJ2v1Jw3nt/XHyW9KwckV885YQDj+6poromg/gaq2+IFWaiFjn
9eX/lU0i7+Qx7cYjQwjia6qSqGcj6tL+yIdxbBzI6BsYXSzEoZmTpW+fE1Gw
9Pevkf4gvgW2vO6zGUJj8ebuhbY4DJsEzFTW9MNnnUl86YNKLGwZdDJP4eQ7
M022ntO39kMe9382jqFWqW1g9fVurL5V+UPJgQTq7FIDKSUeLXZBHkqHW/Ep
0/TgiT1j+Ju+8/TtkjGkNbroHjJn4+Ie3kSz4DZ8yBANOsz8jljy8JHH0WzY
lP0Wl+wvhvHt0Uy9bXQo5vVnKnaUYfmTT+nLltgw2ybNU9XpDXPG4YYvei24
w8q/RX5GQepR3auRdZx7rmtesPkoG7vamuf1M+g4/XGsavbLGL5st2VrSLOg
kuPvnfsiF/epSX/Tqjj9qUG5XDDXCB0ngwUhm27ctw9cf+/MR4SHCwkEbknA
4ZGtUh84PvFewCf9zS+OP/RJ3uxvycKlys/CQ00TcLDZwlzk5AOvzDubNeY0
cB959PFrHAv8Ji1XXn1kQedXJ/eo9iCWxf4sErpCQyGXr7TINRZm+jVv0Ti5
kSV4YF2wCBW3Lpfb9Zu04GLxdpupTWw0rrrjHG/LwMOwo5pn/KthZv20x2Wi
AzPWLn1RIQys3rDpp/5jEly6eueSrFgQ8Ei4faCMBY1/Ejf9f9GxQvPWy8Ou
RFgzbHOWbWlHfEEYn71MLRSuq6mnFE/g4/3Sh9apNNSERTBWFFFQGc6bs3a4
D/LSueHsTXS82z61ve0vHSd2mPTKKXfA4tPTWE8REpy3KDmOFk7iusmLamXV
7/gZcO+8ID8RfKnFAfy/eiB2XXglO4aBwGWr1m+abYbMUUORKWNObvMXFJuq
ZMJQ5u9bBZOr6Ny948wSJ6+1YmK2fAgbgrX652NFSoVIX1zcZGBfhb6hp4NF
AqnItrAe0B6sAVmtI/mPFxOeymHi54v78LyNRjW72oqTEasiIuaG8XDqpJHz
6jE8v//ij4Y2Eavi1+0WzOnHyhGb+62ParH9aNmXOQ73Sl24EnYpgILMVZnf
tMjteJpFDNzZS4L09NitH/5ErJg9GegwQYMtLjn5maSArvHjd0l+E+pbT7za
6UXAyK+c8//10nBs/1hI3t8BDGrfvj1MmcD86TSzLfYDmJlTCj9aPI50U0cR
raVesCe6VIX2kaAwukJgp9MobhUOrVAqbkPd0E+1bVFlkPbU/irQXoZ1/w6o
bUljIYlkzjuyiYLP1P0FFYZU6FFdhYXPssDSvLd6TcArBAUvufu9YeNTdV6B
Xu4QnOxl1rTOdSHu+TbVW8ZDEDQtbDhVVoMSzeCQ1/X9mFLOO1nmVAjeBb3A
1Z+ZOKE5qzyX1YuigK4Hd6zZqG5sU8lr6UJw2/QFn3sEZCdX8+dLUmE9EHOv
/QYJP71eXjNS5XiI1FDYxeFIzL3IEFbzHsYNve/Ga/w4XnGl0pV/GQkLq3vH
ziVnosfak7v03QQCi+SmqmeoILsZ3Vj8Mo7fPncPSQcn49Sgd9AhPhquZr2X
OXqgExf8XYp22nRB2kJ53h4kNB1tfbXLjISOglCj3lwGimyfnnKMbIT4DZbT
5RdkxMQYT+ZwPHqj0rfmG6eYCFXyVPPzYeCw6Q8LL869ceUSnnKzIuBajkr6
7vZOWI3EnW2V5HhCh8rqdsdyRDt6PszQTMOD/KJ0wVQ6HC5st5DVJWLq1Wt1
o4PZOJbo3nyQtwO1vffGlRPzEETsmZePYKL5gqvTj7ZofJz0Ki6bHcXxrZqy
H8RpME+QlBC3JME8Ml1FVWsQq/Y51n1NZOCeTeZgkzUD/UJ3n3r97MNL8k3Z
UsEJEIPeNgdvI8NSaV7oxgY2yj94bvKYG8Wy0/ZrRqeJyJJWcDu1vBIZA0Nf
2+TJCFdOd15r240mlaLo7j3DeBUSl1ZL+4a926UFqgLoMC/PGrC4M4HTz9cb
+cf24ZRv5GpJcQ7nyL446d1ORefIwJjiEKd3NP7ucCb04Ne6bMt7Wl1g8Zrs
6Odw/ujsvLjFVDPkOlLnNrUzMZ7b2bpyYQClM9uNrIKyEaIS8KCfexJW2csO
PlhTi/Azp8QXzCZQdvrasGJ3AUzqno6pCfbgVUx3sS+HU7fXVx4iR5LQJRW/
8pPYEGLMjIubrz9C6XJC0fkfZciaczyW7kGAun2G+xpOfklt+Xun+VErHqs5
1HUxqbC616cWbknBch3J3RGcHrQ1rv/Jwz+AS8pDdiqLfWjp/yvy0b8P6zVq
lxf9ZeBHRlRL8rYaLH8e7PnbbBiuL169a6tiIS5ma1HGZ07P2+nYbFndjc6v
fKPqbe14sUxM7MqXegTud3vA50zFyvYLlTO+bJz7npEds56Csnv++j86iVDT
M5qzbupA0mObUMu9bOwoza/k7R+DO1eEyL6GbIypzvtLj5IR+2/XPvmTVMQG
6C8qTtJwcY3LC/vpXozMDpqFydLRkR5kf/5FF0a780PkBwdQE12ofZXDj3WF
68517GYiK+0eHx93JRy2bggSK2dhw+6E5euM42AyHV4rScuBZ96fZsWDdDyq
ef7fHw4v3aobESsI5ORy79x+lXU9cBlP5Nf6RsfelSRri0o2vug4HZZobMGL
oHPDflppaL2k7jPM8fz1L8x0s7oG4ayz8+CyG9U4JV2oHPakF3UuR9XK6WVw
qCQmy/wjYapWeEWjJQ0N4tw6B6PHUM9r9ObRNA1zVzc9gl4DdsuZVNl+pIHH
ksG8cWccmyT3vtZRJEOnr+paP6fvB7bu296fP4Hew7/PHeF4SOKN/XUi83SE
OVpoe8yNweHiGf4t+1ioN1tgvvvQiP0by2uv0B7gio3XgLgSERWrZg9e8Kbg
g8oHNy6O33u/OrfUNVgBQ2/tMb6d5dhx8JN937YxcC81+t/3pcFY4MfpQ2ue
gWLu8Dz6BAHKTtE3hCqpGA7as4z7VSuerxi8xr2H49e8TZYb73ZC4Khe4nsx
Dgf4jxj3u5BwLKm2wvvCGDy7De+ZPMlAVZDZvGxINagrdEcsxFKRpPXq962r
FLwu2q2gQhyF8GbR1o8NTZCjW1c4vKHjXvEKzbfSFDjMvjnEVcIET2nrwTN5
BDwcKv4gf5aMjZGZSx84XCjec3y5ljMNw4+2t7g/Z8N/dEo6t2MS9JZbgpYs
Amx+5pN1z3Qg4eT2uM8HW2GwtGPMmUmCoATjBmq70OTmWvHakQ2N2IDgZ7ad
OFE98vy9zFPAJmNKmp8Gl49c9tyPmcjOypacPVaOr+rXwpfPsdBsWJ+ZcjQP
ZyN7Upr2DOLj+M1O481M7NaZVTX3KIfegMxd5dX9cE//oNCUNYqTRvsOLOvq
w+oJX+OODSMQ6LEqcpWcxFbfVaKp1hS8PEJ9vSarHwERp1bmqZGgs5pxec+l
LgwJXNIW8BhAoFraM9ddVVCPlJU5bMBG9MKDRdcGNo5KORUNvx3Eo+8pcSYm
k9ghSYxM7mDB6ajentPcjcggf73roEfARlHP82bLqHAc81mZOMiGQPyYsdeV
Msi0Xf+l9igPjgqij1aM0zAe7ndQwHsS735/MH8UTkX9EY+VCb1EPBP+1bXy
5wAKD/pv0SX1IWK7zrvVLgwkV975Oe/EQNl3BuHa3giYBU3zMdVocN5kOD1/
lAgnz4BUiu0Ihnsliy5HTmLTdC3xE5OGvm1Ns/6eRFylJdocc0/Gzg16m1b6
+2K+i3xihcQk5rbPdl9268XE8Y5lG6XH4M//84mFdweezNw4cg2TGE/ju4Cn
Lai5LNCweWwISZ+b/c7ljSDJirzKrIINsX2xHgKiBEjYhwyz3kziy1TxDWv+
DNQd/bCQd5qEAAHzgT9xHM5LEafNyrDRGq7nlvPjPe6UZE/VbaRDcowVrhWe
BPfOL7IrxkdRoSs1rRxfg2eyN2YDV7vCJSKAwl00DEO36EN/1g3DgqT/YH1k
NW4NiwpaHKrCj5LDOuFrC6B111P8pi0Tkc59b9fvZOD9ykP/bOI7sUKId3+F
zyTyAyftMqaHEXSQlNPD8dQLOk6T38S70FfQftuhtwfaZvTzExYk3I0WWBnc
243r5uu8kospuNkuNFzQREVTZuvtH2rjMKvXeXPgQid+xl4NGf7AgCnp70ye
MwXakqM3v0uUg210E4qiZUhod/Mu82DA8foUT5dZC+gCaUVOxWR8uLhyijf+
/x7nVJhqT4VbQOtYSGs50qMUEvjPTsBO7d7H4O85mEhPcZ1QHURm6mDoYXo7
3qc79d7I7YD+Cc3FgE9kaKT17yp1KcatueXCdk+YWOPTImrwmwzphdtsvwfd
qMkRekF83w/RN0O1ZT9qcL6LcSp4fTqO+FwtuLs/AVMaSSWi8gRcCZjy/Pl8
BMq8KxttPJiw1S0evLiaiVN2Ctpns0k4mTz1cx0nj+VozppDcy2opuVOnnVk
YVV4cUCaHgNfDuvIrJ3j7H/5paG+7hF85Ql8bTU3iT3O7a9umQxjxPmiT7k+
HcqyPavGderwbWyrw9299YjlixbQVOvBXS8Tx/NlDBwSTGE5bODwqcbz9xKh
k7BPqzkkf4IFB9MrmimceWJ6n365O20IC9sW7/10p2NuSOfvfvUhzJ98s5RD
b0G5WoJP+gABz0e1YqLsmJBfPqNVY0eHblpqCl/8KTC8gkbsDnagafZJ5tFF
Fra5qBRIbGdhNuGq94p6BnqH13PXZ9GQ+mZz23+bv0HCNXqo4QdnPXcOzm/+
nYPgs+/+CieQkKJe5MP7jYGlPq5ECddyvKqp0cperIGTesMDEZNiRDLisz+X
JuLMXkrGDcM63MlP/hDsNgwzvjM1ocpkaNsXhfY3NuDCpjdyXL+ooG3KM7jK
0wRzre9Sfvbl8Pk1GlYQ3gE5sSTmwRAmtFyFjlQQGyH93L5vt9YkKPxNcgpv
u7Aq6baS1E028t0qZUwtuvBaydx1U00q7ukHTbdub8Zc1+FQp8FRiCjbnYkp
b8GD73ZZ73sG4fDFaPHiVo4n2hwuIm3pBbMg7ETqxi8g7nN/blHehcGsBd2A
Bk6OJ8TUWs5W46avyX5lFRLEROx5tu0hgz7l+Pvqizxs3hDHn7l6EP1ObaUH
7fvwULuoUKeNc348V9zZtjTUks7uPTQ/CpfbL9WzZqpg9eUUcSOHf3t/sysz
D45gwFCD9C+CAJ0tRzQOC01C7M8Cf/6Kcaimn3/9/CSnhw0M35MmIvD3xYTM
wCUSbjitrQ+3rcN5UTbVTYeJrRn30b2BDIuvSLSwH8PEwyDb3IJJ2KnfPao0
TIKrwA6J3/tHsaBCd9ytzPHKVteYo+oNMDy0nXdi9xjOd0vo7HqeCcG/fuFh
/8ZgeMAq/WQpGbcP1oTNl1FRGxQ1xbuBiBHdwoc6Af0Y+nl4lbWEG1a4x5zX
Pt6OjlJS9x2RVMjzvOW1zONwgrCiD7dRHxKl+Gvdhd+iQdGT769qNPY6Zo0G
mLEw8vnUgbv76jDN0P8hc6cYfaYRV7sDehHvSPIwHOjH5tbXem0fumDLm6GY
cHUU2Umq7x1kGcjgFo6ecxzGijjHsTypUkzUZL+YCGBh5Z6fb49z8rPRf4Xm
bc59pPlGbhYRGMKEcrZomWgjfHTzzj3kacO3stO/oiZHseH+3ZDE7EHcOyPV
37qFBf2oaWc6VwP2Xnn685Y2CwkGAnZ88p/gz0VZe+40E8IHiNn0qBpwsYfW
UalsHKlvWshJ5vRBRYzSqQoazK6yFp+RaFBUte8t+01EzlW/HoNzY7B4EKK6
tLULyUX5ZlsLmbjZ/3TnOoFykAeTlehbBvFsesdauY29+PtoHat5QwkOtbgf
MJdtgc/nx/zMYDZUPkeJvBGvhCXrpuibhEkc6MxrfxJBxcydlqrorDFcuLkl
3SyyAauD7N0uS5Ox3HXnsOQ5Gu66m3u9XhpF6n7dfcs/deDVL+uX1bMjWB54
ok75Fg2/fljqbjQbByGdv9ZaZhQzUVXNxpFkGGl4V3ZW10Ms+M9tc6lv4DH/
K9XOWwPDESHXfcOc3K8cUn3gmoUz20LPmjqTsRCbriX1i4Z0I4OvpurjmLy+
SfzCBzo6XZfr206Q8Wl/oLr7XjIMLUjvS99MoCTs0BEPn294INonojJYhjTF
P1K6osOcuSu1X1VUhJsHfXuu3+tEynE+PR5Ovyz/6zj8oK0KM4NV13z+kJD5
ejbR6xQBWSYp3JOjbKz52CPKfEcGtw7X6z3WLHx7JndduLgTt6tqX24eYuDM
2o1NapsJ6Hha/5CxuQEhJXZyFiUtcHnE4trxvhlmLnZh4rIU8G1Isf1gxPHG
iN9Xl9YP4MQe1TkL3zGEKgddOqEUj+L8ympyLg1+Tnvar/zqRLchD2X7ywH0
7rpxhOsOET6jBm8eaVJwl7clzaf0AaqG5+XC13D2xXjdm7J7A7goqfZBkS8b
RfxluVyEUYgGndmTpEjDUd8DajNvqTARVPnZNVKK5b9kEojH6pBU+SQywISB
jq9OmTRWM3ouR3iPnmVCavXe4XdWLARtPXm+mDGO2IWskXjjMcQ8G9jpxvG2
5EpFucTzY5gq+MpFsirC1NfmkCUzAtY+lz1pcmYMb/bcWd3o1IzOtvXM+q0U
iD27eXxpgomIrOG8NtFJXC8SE+t1boLIjGTZwTVMVFpf/iP5mQC+DFO/ho4J
eNlS7GflqBg/b5784U8pfMiyVbJrafBhtBLZv8ax+Cmm8o/4GC7F8s5q7GrB
k3tCZo6vx5DyVMNa5D0VQ7EOFPNvRLQ+mkkyjiVCynPUdGTGFzlhMYlpB/tx
+X3J+2iBZEhLFIQwro5gPkRi8H33KGrzti/zNZjE6db4X3rL6SgprjGTW00D
SUUmqYubCLqY//vkXk/cs7yw7wyViIz6j29+/JnE3zVhoR4GScgwK9/78mUz
Fn/drTIvnETWlZFlVzZNQLdXs14ioA0ZtltoPx2I4H6dzl2q1Y2LX2N4T70k
QMzleahUOgW8g+MPxxvo2P7ZRnwZlYrQ/R8t/8wyIfdLWfSUDQUXd8lbS10a
AqtDzlI/kIJf+lHKgsHDKC979/rnbD1ujDjtfUYkIm5ZmC2PPwNaEysq+vPJ
OLng55vqOY79A7uJo2lEnNK7eddKuRPhUpdkqQU0KOwq6J2SIUGIz1XuV0gP
Lpj50dLKBjG5NHj+Rd1HbLyvRKmu64aZuLg8b98Erq06G5+zshCP+Mak1FeN
wbku6IYuZ46MofxRWoiFNTbLcig5PVjoVi3VFCVBr8P47GwrEydMNZnbS0ch
PnZu4WPnOOYq08NG1MqxITFN3t2Yiu9Ncsce/mHAa7j2WcqZCfg+b6goUhjG
Eb2jtt75+ZAgL2vQe9+FVJddnxkOw9i3e9U3t+FxqHCPppVYjOLx7dqTqQJs
TFY5qUt2vYWxXcgLpjYJmiImT9jylSg+nRcY1FKHRTmaQ9orDnetPhsbXZKF
WM8mT1XOORTKTk1xGbVhxv3muq8aRHzcSLabPD4C04/3d+lUEvHNtp/79rEJ
9EWulRCyYeJz3urtXund0F7Z+rv+ziQWYtIL6Scm4UzbLf/6QhU2rE3cR9Bi
wP1KstHvqAkOX6WZHFsgYJVvvpKjBQVR8deISQHNKCpymFLpase4Bok3njmG
sWmicUsQGa+8hSieW8ahdjPwvI9HGexa7RsWnHtBqVoY3zbD6UuJa3frJsag
KLVe3CaEhPLXLGtSdDFa9+rr5AzXIOrBI+qrrfm4Gn37QOnyKGh31HVLvumB
qs0/u+9xbdikTEtbx6LCLl9x0PFyNXY2qWZu4ybgV3PKmfbaAvBuO+ah9GWS
42GGxpUe/SiWDrs4tJKNWzN/6Otz+rFFI4O70WgcssH3Hyu+LUVW49kUD6UB
dD+OTiw+TUVL9ZW2sBQ33IsUik7OZYOj6lTe5clgVSSUvLnMRtART2OhJ0MI
+THF7W3cB4M9+dxVTUwsugkz9yTTkLjtbd9Nrl508xVKKVb0YE9F++s8XyJG
K56pNpmOIXfo2uHNL0jQNtex+iFTh02ZrUrP/uTg8Is88Q8aQ8gokKylE6nI
eGzHvmhIg0biDcv0kiIk/arydtL9gNs/nff8TS2Graln6br7ZDiyrNTcL1Ow
55kffR21E2v4bp8M0CrCdKnDtttVnH6ZYtWrLo3j5CotR9KebmhtDuc6sY0M
sxC6roVKJ7ir1eqc91GRHvasoZpNwIB44C45vU4cPvyf6EZ1FkwFYqrnSyvQ
3PDvxcIbNgr2jXb8EqHAKe2xx8V9Ewi/YWNq5ZeFz9xJATs9xyBwr0JAUIGF
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
QnfCr5NkjMaGhvXc/IbeGjs/0rJvYJIyPp03HsI1As+zVxbR+M33I3Cyexjt
At/+vM8k4Mg7o+P7q3rg1LaP7niVBbptXovFhx5oBZnlROdwIOElN0J2Z+D1
CZmjGfu4ua3fW8Yvz0TZg6C4ujRufthsM5g4yUGnWphxjEwaRkce8isWcM/T
r3CJQ8AQcvaZjiVzeV/pVEBfct4IsBD06KXLAL5810wdvUWGv7anlGo6HfbH
p6vHghmIvfL2wu7gVpj/017X3DCMvekmoRt5BmGnuiysKZwOpcDk1aEHJ2H2
0ExIJ5eFjrsCuj5zmdy+aEq7CBZss6JPNfUPYyNh0SRjCRueEnf2qt1vRP6L
xGwf6W/Y9Wp23OgECRqJ+b5NSdy9tugdfWfYAvcJj33HU4twLsFzUOkNCSHe
VkonPJswOr/Cu+08E06O8nPZVynIjPv5MvtQHZ7bSZhmO5PBPDGXkD+bhJXq
avu6aibgESTRQtjJxqGGrssqxt+gdq1DWjCagmCe/6JXKbJxdUUpn1xZNYoW
L4r98mlBSVvbzw/PSUh616VY/j4KH+WjpSkvqUjEzo7I6k7kBjF0Ntf3YY9L
qYfIOAMdb96T5P9WIGxmxGRpIQU+VUsqkw9UYctYk5RvxgTk56Wvm2QRQd21
6hMpdQjelva66i/a8f79m9dm+pWY/VLtNPatDz+3Wv8ov0pHz8Lk73/ujdA0
He7lk+7D1IsAgpTdEOJVHD78OD4OTdnJj1M8JIibPA37WzOIE8+zjV8HdcDm
RmUavWoIHnoSyZdecjAim5L3lsnNwQ0H15prkeB7ak9R1L9KKPhsXXryIxkQ
lejdG0jAZpp8WtraYYSoDsue8R+DcFbtp9zNo9isfr4wkUiD5ROHp06GTDw9
n/jvkEgGhN99/jKv0QTH9qSQdj8yGJ9ESlbbE+DvzqPeZdSKNwl6M3mbn+C2
OztReaYN7zYYG44O5QG7+VVe6pGweSV/ROSVYbQ+XLzWGkHHxa0/Pqj/mMSW
30l39n6rhJh5/8kf+iMor9JfKXh6GKoqBHXDjFbE3x29e2uKA7OE+i25/AzI
NAsp6b9joTxsa8G/T5Mwvmh7tWInAZlRjVE5M31YeUWwK6m2Fpdl0o94nGdh
ZTi/moTdMC4kfg+2zv4G7xqJsYFtJPT/VV01nT2AZ+miqqbejVgnoj5+b7Ya
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
LYSGEPuOZuF2NiRczBvf1DLx9EdH+N8HRfCY41bMRfXikOCaeBHPUWxOXN3r
LshE+l1IFlD+/3/4T70v4aAytLni2LqvcDh+b6dG8wMcMPMo+2LPg3IFPfjA
NTtMfHRHqDQJh+J3Tp+NI8DY25awTqYMrNSfgYpKZLQFrTnQLz8Ew4NSN81u
0RFd0cCdud+PIVXZRaqHq3F48fd2K3YdWgjBf8LdaRj5CYrAiidQuTy8ymD1
INbU5TbIWnSg9NYOJWoaG38etHSl8XPq/Qm/6OntmTByqGoU0aahq2ji7utt
OVBdu295aUgtWIkqe4kryqD66OqtkhYyrtw8lDBono0tvc7Lpvh93Ry397pw
dikuKiSZXrj5AVt3rowf/EJEdulm20JGDuxk1W13vByBSTJ3Zd0WEki/ZrZE
7GUgKzfJssCXAq7IRuskfp97F90pcbLuw/4VDlIryzKhlHfLeDs/P0ZNN236
zJ/DkCaFBgWxfFi7L9riEvEDOzTfeob207D4hZLXIzf+/moanNJN7EHXljV1
OzlfwVBe/TUun4jI30NbpZ2p2BeqvXt4jopKxRl2TI4PSml/zuXQu3BzX7dP
z81RLHmnK5h2mIIT9yLXbhAcQnseq+6QWyu2hv91ZarlYFDN1ndy+RcYttRf
WmhIwZ4tJ1c4F43C5KOGgtsVOu5uXSqxzYsCjRKrnQu8SZB0G/2xu58DF3tx
wRIdNlo+vnv2wGMU3w4q2jamD8Jv8s/u8rkaHFR0KemNyUS4tWza+xf1QCGB
EvCpBxMrlV5IHSYjK3FFrUpJNw6tS7sgZTaCN02qCWmHe6C+70y3z9t2OEZp
Mfey6PzeSPh04TwTmW9Ny4zkORg64H8hriAFG+1vvrxrRMVZB9PS+wZ0pJxa
eUnMpwW0veWMsyWDaM866CM5yMFEs5xv055c6Eprbj5wiQyi5lzWxH0C7BWN
Lhw2yoBERKJ0hzkBvn03CdeMaiFMDayMEO3CwkcnmIoDPJzhbLNvt+4A4lWD
ZfYwITYSV61uQIVKueGDFf5khDPK/YcWMtHnqHr9EX/f2Le7c0ndfajWknzZ
8YgF93tbm31e81AeUe218BYRj8YvZXzm51qCjd/ccbUqHLt/Xq8zugnZLkH6
Ads60DlgQUi7zoHVc5e1C4ub0PLSNMD1RgU2Ja2Y9ufzN9U6/bxjD99rT7zY
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
le89aalubBS2u3isnQjuC/OW8+z1XfPklsaczBRk8vRyFHPJSLO87B9No8I6
sdvTy74XOdSeedW9M+htkHGt3zAEy4EzvUslJChIkqcD0rIheu2EWW4RGX6K
EgElp5Xw69rE6/U/xtAo8qlMxL8Lv44dXtEg1A80xF1x65xAhEmd+Y49QeBS
e2nmv7YGqxTm90SUlMPv9a3HvL968UTH15LImY1vGSc3yeQxIf5drM6oiV1n
s6V7agVJUM02HTRl62FfQexVC/Z4djHucLVrdqJa6kSy971ehJzh0av0ZXOD
tpLVc+dsVIpWi1381gXn9ICw0UwmzD7Qa3dcLoNC7af9Hr9noHkgZp9T2QQ6
14jHGKQzceBky5ev+pM4e+TSubkcMnaf5ss92daCHV5zgdl5vTgjkP/WsY2E
MymKLvpZROhe232cRShCq4smT/fYDP6cnrIeCCDi6iLTYs8SCYfNE7g31Nei
LvvySlMHFiaMjX751X9E+aOHQ2PtzXCNm3M3aWNg8mNepkQpCYZvfnnf29uN
SYMRGbE3VRAVEphVvEzC3YVdW9TWk8Fh8md78956bFc7ZL01swqu4cfuFf4M
QRRj3SO6GZs7QuaED7kR8Wj/g1DZmWGsvXgvTO4mW2cNd1pI8w7Dx+uYdwV7
nvb3fTpPaTJgdvpTG99uMp5Yvj/nrjcMQYdMxQ7VAeynyQ8fedOBLnmOVp18
AmY56GcqrMbw7nS84DhnH1xtou6fMU+E4av1eiwKCW/G4FzlTMfCh0s+z5qT
cL/yBFMii4EuSmCM7eEQRCaYPuZJrUWMd5hH7Uc6LO0OXQxj+6RtyMsPy+w6
CP0WbtknOISY8dPtkro9uJizuHGleA+eLT/gPXmlCR7nHuU+ezqDtyNtTTHf
B3C/Z+b+w9fDWPHLXqnqLgHqEvtenRohQufAes7vRb7w7vHa4/ajFvsb7a2c
C2agRi5V2KuRhx9Bx0+4GE6B9ChclxpVgYxHTYobY/rR/musxL+qBVcOT/8u
//+5TI6v3z8YbMV+/06XCLc+NJ5bXl5jno6C3Auui9pUaPePJPoTx3DVsvRU
7PM+eA90f3pROon2F9d29miOgH66Zqegfy0OtK/2WCqowiq/qwucbL7ruu3U
E/chFdW7HgXzRFDQ/EePfkxtEkKXbbX/TBWjXMJeUIaegPjsLfU2EhOIVBx5
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
NhhY1eHbcMXmPGs6dqQW6D4rmYKkZ1Kli1kqTFzj7u6Pp2PnEkLiST02jn1i
PJKbKoDNznXKXREsBFNaP1isJyPNW1R+8QgLcRULS+75k3B/7q6WRSMbgdus
k9W5+as1vqvrVBMdvq/b+aUOTGJbjGuvQyr3fCUXZu9tnoK0VLbiJG8PzLof
ukt/oGNp36mHryVYUHHTcjx8k+vTjufe7HxYDb2K5IcLtXSkGEZh2X95iBS+
UjZR1g+Nefk1GSv6sVGCA09+Dux0JXx2Z8fBd334hAYmQPtztYb//hDEEtzX
Ku5m4mXrmjYN1RJwlOsPEGXZiODVc1vzfRxTVZMbbI070Rog8kPTqwoqPhYf
9QS+YtHGxEGFO8e/jBJ5Iq6RsFko3aSL3ot7qRK6p5d1YzyVE/PAYgBJdzaH
3uJen7T98uNphcNYQ24/QOGn4QnjSczQnlZcKvJee2eRe42m0iU7c/vwoEDt
C918AEf+BcUT6hm4vNNzJjr+HU60XiOpFvagRofv9wEmHQmLGXcLhEZR/tdp
ydlN1ehR6R5v621GjyDKztUxwOe7j683mI2SjR9yZLYwsdb8Qa9s5WdcX+ze
mSNDg6Bak87h8g74v19hvfFKJz5vHQ7VtKPivHnI2rVHRxGl79J9SYUJ7ay6
/XvGRqFPzBlqFejG1vo5o/dRFBQ0NyukU8m4p9kpoTU+Cnp9Y8ip3WzU9BdO
WAz1wL0Nzxs30fHrV9Ed5R/D0LURfbe/kwRpefPbM34E6MR2vRnZ04voP09+
+zt0IXrnwZan3BxpKLWuOLKYDNXEKyHKwgPYVr4/4uC2IfzXPWKuvaIXI1KH
X1HCmXib56v29ehXaGhe8jzkWYlB/bAou80kWBF/ipSRh8EpDzS26mtF9pd9
S3+7TOJahqf5b+VuBKU9Kv16jgr9pIgU5osJVDjt7Xb+3Yg3G4hqZgN9OO1z
ImLrIDcv95pLbrtOh+dGzpfKRzSs2X3e91sMFUGinV1xztz8JTgcdYWbf04e
srj59/0Y7in57jl/rxe8RKrt5po2NGbUyo64FSB3+UO/+T85WB2zjpZf74um
QpbgYbU+8C3SRrfJctCg9OuUyQQLBR13Us6qDeGL87xv1U4W+EP8+V9kU6E8
65+YQevA9ldih+4IlCJ75TivqFY9hD+Whzzwr0Hwspvt+Rez0c8TuuaJOA0P
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
Uu+92ApEyrzavpTH1wLHhdjXzozhf/x8dD0=
      "]]}, {}}},
  AspectRatio->1,
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0.48},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{0, 1}, {0.5000000051020408, 0.9999999795918373}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6191189923345003`*^9, 3.61911901563124*^9}, 
   3.6191197806512203`*^9},ImageCache->GraphicsData["CompressedBitmap", "\<\
eJy0vWm0HcWVLngL3UkSYEaDARtsl6vqdb963f36Vf166w3dvV7/6n/9uzyW
wa4y4AHLYAE2shgMNgaDGVRgAzY2gw0GgxBIaEAgkBBCSCDdq1mXQfMsXV1J
90afyMyduWPn/nZEHNFaS7I5J09mZMSeh2//P1/+3mX//K0vf+8bX/3yJf/3
d7585WXf+Op3L/kfV3yn89Gkv+rp+atFnb8LL+nx/9/19NA/xZ9X/D/Vf0T+
/1eK/znNufGDbs2zd7sZ065wV0yb4e5+do07OF7ezh0ZcrddfZsbOlL+57EP
n3bX/svXe3rd17/+9Z5J7utX1t/1/Nfi3ymp9+srLp/EP+r573m3OKW4vL9z
+QH33jN3FZdfftX17vbHl7rtYxNd3a2vc7PV7uk7rnPfvfy77ro7nnarD4z3
/F/KYk+Bn/WjR5Zf93y5+J9PdP454XYvutVNm/mkW7ntgDvw4Ur35Mxp7rZF
uzvfdP4c3+OWL17u9hwv1zpxeMjdP22au3fJcOe5mzdv9v9u3eZGy5fp+S/F
v1Nz7tujHcN/Kz47J3t9/vpd83/qrr7taffWlh1u58g77i93THPXP7HJjU64
kkDOzr/txEH3zr3XuOt/v9yN7Njqlj16nbv63nfcwQnX83/CQzhVXZ7x3L/i
hzPYuXiXmz9zups1fMRNlMtwR4Znuekz57tdJ1xvRS2dp7hdi+5x11w/y728
6bDrHEXP/5Fzi0lu4sBb7ubLv04sVf37LTfz1T3F7f5L3u3c8Z1u7k03ujnb
j9c0emLnPPeT6Q+6TUeJTxNvN+Dc6AZ3zw9vckv2llQ2vneJu+mH97oNo/ru
96fdPtjtzh1GN7r7phdPqRc9vvc1d9P0+9zGUSLTzr8Tx93uVc+5X11/tbvl
oblu7b7jldSI36OXVjY24p6acbW7e/EHbv/Bg+7gzrfdLT+4xb2985A7fGzi
v2bdblKxQff+8Eb36p7wuhuvudutH6X9Tr0f2vB7Ihsev7/c8SPD7vZrbnWr
D03Ul08cWu1uveZ21zkyv5Bixyc6XLTmpX9z13//VvfMhuIsm1eK3KM8tf6O
2pjjbv3hnW7RzuN86f8t8Tb1wfnrvv1NN23WArdh9xF3dP9W99pD090P7nnb
HRh3qauqN7qjNt666wfuukeXuS3bt7ilv7vO/eCuFf5W9kZH7g9I+7XWudwf
kuX4Ubd7+0534HjJLp0P3KF3H3LXznjObTvevF3kdrTnXtrtWfIr98Obn3Mj
e9e29jxpVQPFdfdPv8E99ef73A3f/aa77LIr3PQ7nym0Yva9OsQzuukJN/1f
LvVizl36L9PdE5tGC5JKoWx0f1VyX+PuXXu4ljyH19zrrhFy0vPZ97/v7l8/
2tx131J38zV3Mb6N3q6fJFNH5a966Fr3owefcTf8gCvSxBV5CtjtFt10nfv1
ug6bTYy7Yycm3PiRrW5o3S53jPRn4t06uz221T163bXu0bc6Yu7IfvfBW4+6
a6/9nds6RoZWx9Y5uMY99/vfut/+5m73/e9pAhw+Rm661/0Lf+qu+tEjbsmG
bW7b+iXukeuvcrcu3OWVa/2KHV2+6t6r3JU3POpe37Dd7dk27Bb+usPCd7/p
9o83r2jfrZRNvW6iQxh/+tG33KVXMtpOX0uHwfYtu9td/aOH3OLhD932zSvd
nLt/4K79/VZ31KWupdnuEffotde4BxatcR9s/8CtXfSAu+baR90I2+6J43vd
hpWvur88cL371rfFdtuPqbb7K8TdJ/a7dwMDc7XbT8TY78YPb3Bzf3O7m3H1
le5fr5zmfnL/bLfm4Ph/t389ueKCYx+95G69+ufMJI8+0E0cdR8sfsT9/Prv
ucuvmOZmPjDXbR6diPy6jwmGw+tfcLN+Ms1d8S9XuGkz7ncvrC+NqVowHPvA
PX3THcWiBuzbVmZ2QbOK4/PJinpGx064TR/uK0TR2PET5xYfT64/9n87Hxf/
vXbLHvfqO++74a17/GeVROuV1xJdDnUu/6cfP1f8Hdl+oL/6eO7SLfXHb675
CNxkkn6TKcrHG97fe4r/WWd7/Er9n87XHWnW+bLzWedXrvpTSzh62IK3RtTr
aGv5Y15f/SEtjhwcuUnVo7U7nmPf8XMVbyjb3lO+XK97d+MuvhWTqp/IO/qT
+YS+e6coP/GLtLerdTaTq9uIk3Sr1u+sb7Pxg331bfqrPfW36ex48Gj/p3nJ
5gT9Ly6ufseXm/I78PZEUiql9WlP6RnQf9KrP2DQpllxE3NzK/ZsVuXZk073
LEHFC9/aWu17X3GNIJTKGGqtK8Kn+w6OFdzu/x4aHQPvDDZV49PO1eAmZIyw
jw22nFQLoyfnD1fX9XopUAuoecu2yJ9zEq/2kfFlXCL8bfFvIxeHtux2wyN7
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
E6YHojjCnLJK50Mlcr4lOosc2rwshNT15ijCLFVBBqS0HT5IfazftA9lyhMa
V596FiQ0MCEfMFBV931xWdPUu+LRnYx3dkpQ96tLETJui/I4T1ngyLPq8fWa
DO0L2QBr9GoirEDYLolPFwDh8cuHYgoyyQMNdUeRIwlT0EYR79Ia+uA1lSIy
MIvQIntVUlvjhDdA3Py8gMwqdxgHN02MIoTngrJIhQtwEFngVhs0q+/czFG3
5c4r3eUXnu/Ov/Byd+WdW9zRmfbZjk+6ZRctc5PHe7s4c2ybu/uqf3Jf+/KX
3Ne+8T1348ODK886/7QyehnENuSMkBI3KwnXbOW4u+y6Rwaq55CUuDw2mywF
52Fy5OAN4aFyVTJakwgm9rXbwFHdrWaGM6dBy0PmbxtwZtjYWUUoUm9ZOq2Y
8ig9ODgxzYqEMgvAXxEdbZIsjQUB2o6Aq7C0eTlX0k3Y31KauEOGGI2y2TfW
TOwmVB2pZeiUO7Ruqbtw8XL3zP7X3esvPuOWL77QLVt3yNWrcfJVt/Ghje7V
k92Kue3XL3QLr1vrnp864F7c9qD72aUL3VVPHnEDVeQL+DOIC4h3St4GcdVU
vJ4vHjiagu5K61g+kFy4/gxX0ckDT+2tJQogQM71yZQY7cEFJFBPjOmzTnMy
czNvR/Q6AltrEKMJmAgWfhp4SK+LrfppcqLx5KQDfpNVAFxqOEiYb9KlW6en
74RVfnYBaVpZ1FJGYII7O7wKGJyXUwfdmsWL3LXbjrvZ+g9n3fFt17pFi9e4
g6dakR58bfaUe+PgAXfk5Gx7/Vl3bPI6d/G3HnavzpiST/JaUMSp5B86Mt2x
Cv3s7s1+0UvGJCBfkmkB7SW1CPB8Y0mlj6xPuvSX8Kyr0ItHQ0/M8Dli/OI6
Bs2gCL/3cXyns9ujgCB5/9WVG3ajO38IPCQJNYi9MJP0b5MWpyCwE44OEVqE
3TH7NPC0qGvSjxUalXw7Gq3zZo5xv7ID3uYyqoM+vdNdvWiJW394ZsSrlpnD
j7gli652O6e9OE0M4ontbuV133QXfeVL7qsXf9fdvPJud/mia92uN/2m5c9/
LAgOT9BMuKYllT70Fbc8js4hqzRHqiGV3pIFOh04g18z88HbuyLhRzpNJ/tk
DLD68d0F7VKJeVox5f686EFQ4PG7+PUX4I9lrkPp1upuSFERC0OSKWYpMnFQ
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
9WEnOBI6FVEKO927qa2e2ltU/U9KWBIdLnmGA+lBcj+T8KF0BjWxYLkTEnKr
i300oVa5gPJ5CpePTTU1ajAaKss5E+CZiOWHwJMT/AwYFLYnrGCmOqiGDHbH
PiRYq35+fvfm+goVrBNaEW5cNSpSVpDi2eeQHpG8Lys37A5sVNfzihjK4qyl
/++2MYUf0bguuF0ySOYfxIJRRyNpqPiQeC0cAWLRg4nhOd3K9d3NWRW9zVWL
2g/Pah88SG8+M1XvlTmzKp9EAVWMqUS1/GGXSbSqZaT+eKw4xFSPbEENQRi/
w/sOHK3TJZ+97G5jh7m3b6ea7f4TMuyPTNIi5WUJhmD1caIYiZtlepg1RDzZ
TSSKGeX8wvVYefjmH1K3UqX55rwc7IqjxIv/HbFtXnjNoCB8bunUV8/M1AXx
IEm8SyAcEtqRxSEMOqb8kQekQ0YyxGzZTRvqe3z35g0lPowZ2ye2aFRzoZsF
zkU6R4L2OVbGnAiTYxVDUJUhEDFghUj30gQr6QH0WZ0So+1jsmwaS8vmVAbk
oSDvGuIJXOeu9tGorqaSyWMZuH0UL4QpyOUdEHLpCW9WgiktA/wyZFq7h1X5
3f5Xj6GF9JxZCq7wr0SqCgr4awD6bYPn+ZiHKbRJ307Kq9lojK80WDCdYqm+
zOjhbenO4j/JyhPymVo6UjHzJEUQNo+RxiPwvPpvUjj5kfxD1eGneQs9KTK+
qj+HGOVz2o+VWCA/n9RDGOLpZf/UzGxdmV5d5fYHXiCP8h5j26cpOWVZsxlx
NkxG/9zSSkQXQwqt07MVkBLJIo0eYnKy2QeGa7AJQk8UFZKb0fbfKoIpqLgh
DTRni8dOuQzTnF2PHIlz8MdlRe+oN1l5iMGE1lqqfGyx+okGLatYqXTFsHoq
QrJRxkJvShK2p9M2bzgJxMk2l/lZCEcnTUek9YBsPMEw0Q6TPLgVHJKXNOWp
P+LeKWSDKBP7QXaY9KSYrSq5mjUhRnkXyR14croQpRE0Cr26xEn3pWUrhUXP
ajSUc4WkrmGOHAKITww1uiGRBiubjI2EhuQZSEMKkUbiRxWQ/xADSnR/WW0m
OfcmoWL6tJ2D/1zbZQUoEVeDvFCZnJhdcKZY/GrV1vrb//D91aZYqMcjKdBP
lh9zk5qpwD9HLmu6ITwz50FKYhkozqJC0pU4NBN2FAIQg2d22eaaRz4RKWsC
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\
\>"]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"Log", "[", 
    RowBox[{"1", "/", "2"}], "]"}], ")"}], "/", 
  RowBox[{"(", "0.01", ")"}]}]], "Input",
 CellChangeTimes->{{3.619148903027884*^9, 3.619148937976324*^9}}],

Cell[BoxData[
 RowBox[{"-", "69.31471805599453`"}]], "Output",
 CellChangeTimes->{{3.6191489341285257`*^9, 3.619148938496986*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"1", "-", 
  RowBox[{"Exp", "[", 
   RowBox[{
    RowBox[{"-", "0.01"}], 
    RowBox[{"(", "69.3147", ")"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.619149080889895*^9, 3.619149099152096*^9}}],

Cell[BoxData["0.4999999097200192`"], "Output",
 CellChangeTimes->{3.619149099951138*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Solve (1/2) == 1 - e^(-0.01*t) for t", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {"Result", "Results", 2, 2, "Content"}, 
      "ExtrusionOpen" -> True, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}, 
    PodStates -> {"Result__Step-by-step solution"}}, Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Solve[1/2 == 1 - E^(-0.01 t), t]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"solve\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox[
                    RowBox[{
                    FractionBox["1", "2"], "\[LongEqual]", 
                    TagBox[
                    RowBox[{"1", "-", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "0.01`"}], " ", "t"}]]}], Identity]}], 
                    HoldForm], 
                    StyleBox[
                    "\" for \"", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, 
                    GrayLevel[0.6], StripOnInput -> False], "t"}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None, None, None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Results", "scanner" -> "Solve", "id" -> "Result", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "2", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Reduce[1/2 == 1 - E^(-0.01 t), t]"}], 
       XMLElement[
       "moutput", {}, {
        "Element[C[1], Integers] && t == Row[{(100 I) (2 Pi C[1] - I Log[2]), \
\" \[TildeTilde] \", Chop[N[(100 I) (2 Pi C[1] - I Log[2]), 5], 2/10^5]}]"}], 
       
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              StyleBox[
              "\" and \"", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0, 
               GrayLevel[0.6], StripOnInput -> False], 
              RowBox[{"t", "\[LongEqual]", 
                TemplateBox[{
                  RowBox[{"100", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "(", "2", ")"}], "+", 
                    
                    RowBox[{
                    "2", " ", "\[ImaginaryI]", " ", "\[Pi]", " ", "n"}]}], 
                    ")"}]}], "\" \[TildeTilde] \"", 
                  RowBox[{"100.`5.", " ", 
                    RowBox[{"(", 
                    
                    RowBox[{
                    "0.69314718055994530937448036556070007919`5.", "+", 
                    
                    RowBox[{
                    "6.28318530717958647692528676655900839987`5.", " ", 
                    "\[ImaginaryI]", " ", "n"}]}], ")"}]}]}, "RowDefault"]}], 
              
              RowBox[{"n", "\[Element]", 
                TagBox["\[DoubleStruckCapitalZ]", 
                 Function[{}, Integers]]}]}, "RowWithSeparator"], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             
             RowBox[{"\"(\"", "\[NoBreak]", 
               "\"step-by-step solution unavailable\"", "\[NoBreak]", 
               "\")\""}], {
              GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
              LineIndent -> 0}, StripOnInput -> False], TraditionalForm]], 
          "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "More digits", "input" -> "Result__More digits"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Result__Hide steps"}, {}]}], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/mathematica/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox["\"log(x) is the natural logarithm\"", TraditionalForm]],
             "Output", {}]}]}], 
       XMLElement[
       "info", {"text" -> "\[DoubleStruckCapitalZ] is the set of integers"}, {
        
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/mathematica/ref/Integers.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Z.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
             "\"\[DoubleStruckCapitalZ] is the set of integers\"", 
              TraditionalForm]], "Output", {}]}]}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Plot", "scanner" -> "Solve", "id" -> "RootPlot", 
     "position" -> "300", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Plot[{1/2, 1 - E^(-0.01 t)}, {t, -300., 300.}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{{{}, {}, {
                  Hue[0.67, 0.6, 0.6], 
                  Directive[
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   AbsoluteThickness[1]], 
                  LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQzcqp+fn//qIDDGDwwN4rd5XbiUQEf8JF7VkTmBH8
Le+U5rubF8L5E6t+unZUFMD5FnqHZvFW58P5jQJVqeFPc+F86wsfirdk5cD5
6pYBdnEXsuD8gsMXTzbbZsL5WtpCM/ccTYfzxWysVZz00uD8Ei3lz7c2psD5
ela6ze9tkuF8qc/y5wNWJML55Z0X447qJcD5fJOuh/Bqx8L5z4ID8trZo+D8
BRfc+DWkwuH8/fP5NJLeBsP5BzVDThz6FgDn+/NcO1DZ6A3n93r1fI0xdoXz
Ff5WF0kttoPzd61TufngoSGcX6YvWM76VBzhPwOdIIZzYg4wfrPU1OW3Y43g
/ATbFTJz9e3g/FBu68iaelc4v7Noprz1SW84/49hXXbY5QA43z8i7nwpYwic
f+DwgdV5P8Pg/Io391gLHkXC+acPab+4zhUL51vf++Uk+Tcezl8c/GdSwvRE
OH9H1B4HRdFkOL/QIUo3rTsFzv9ewx8Xp5gG5/PcYfV2npMO57+bKFxz2ywT
zi9R+//6+8kshP/uakswOuXA+Tmv8zv23syF8+9Kf92SFpYP51eK6gicSi2A
87M8XqZbGRQi3M9zXFbxLYJ/hauiY0JYEZwPzS9wPgAjCvrj
                   "]]}, {
                  Hue[0.9060679774997897, 0.6, 0.6], 
                  Directive[
                   RGBColor[0.6, 0.24, 0.4428931686004542], 
                   AbsoluteThickness[1]], 
                  LineBox[CompressedData["
1:eJwB8QMO/CFib1JlAgAAAD4AAAACAAAAAJrOvp/KZsD2x9ZLSNEUwBY8OyRC
LmbAypPStJmWE8B0KiPz2rFkwMJH5hPI8RDALjotg+88Y8Bm3lPd70cNwBrz
H89QqGHAzKIvAljaCMB3idFexS5gwHGY1ldeMgXADpLXVA0rXcAeRYsAFLEB
wOZTUG6HB1rAgHBWHB1S/b+g0EYPKBpXwOyAkzElUPi/v58OKGLtU8BcsvZ0
VoHzv8EpVMjC9lDABHa5Eq4S779PDNbAeYFLwNBFihdyeOe/jUqM9VwzRcBq
fD1ECubgvyD9e3Iaoz7A8Bfha3Hx1r+6riTZ4OExwNCYTjxJEMm/di8RdwXl
F8BgZwxpYISvv3QwLFIAzhZAcNnlWJ5frD+DGpWn210yQIgTw6cHesU/YD2o
HJ0vPkBwOPfy/KzQP1ULO1l8f0VATIzfeqFd1j+JcpkfO8lLQNZXxj4uSds/
/DF+a1bTUEDSpJ3MdVnfP09YXs91AVRATiRO1e+f4T/Aw8CrbvlWQE7ZBOf6
O+M/eOzeBXDiWUAGArX3F6PkP8vCK+jXCl1AOv6mwET85T873vpCGf1fQJqC
vCBJGec/o1P8kmCXYUDCZ6bolCroP7havEAhFWNAIbv8mhoM6T9xQFotZotk
QEoqOeyQ0Ok/93wPXl4hZkDY3eWTOo3qPwzcBUtDnGdAmFrAPPko6z/ukRN8
2zZpQBVz8lotvus/dCb/6/fJakAIhyhYKz/sP4ndKxgBQmxAVPkmMrKp7D9s
62+IvdltQK9KCV3mD+0/3Rv1tGZWb0CEzXomQGTtP3kVLBDKZXBA+2G7xcCt
7T9qSOlnOjBxQF0xbKxg9O0/owzHHSHtcUB2J6I0sC7uP5SUHJls8HFAAQUh
QaUv7j+GHHIUuPNxQAzXksyZMO4/aiwdC0/6cUCDDl9hgTLuPzBMc/h8B3JA
AfT/iUo27j+8ix/T2CFyQF9zIBLFPe4/1Ap4iJBWckDFxZPMXEzuP8aSzQPc
WXJA/mdzOEJN7j+3GiN/J11yQHXbgCsnTu4/mirOdb5jckAbmCOo70/uP2BK
JGPscHJAlsV1AntT7j/sidA9SItyQJLaSnJ7Wu4/3hEmuZOOckChKZJuWVvu
P8+ZezTfkXJAOcnx9TZc7j+yqSYrdphyQE8d8KbwXe4/eMl8GKSlckAb/JyY
XmHuP2pR0pPvqHJAZpZb9Dhi7j9b2ScPO6xyQIiAG90SY+4/PunSBdKyckAL
YpFWxWTuPzBxKIEdtnJAnhjA551l7j8i+X38aLlyQI+d4QZ2Zu4/FIHTd7S8
ckAWATK0TWfuPwUJKfP/v3JAyzPt7yRo7j+8v91E
                   "]]}}}, {
               GridLines -> Dynamic[
                  Map[{{#, 
                    GrayLevel[0.7]}}& , 
                   MousePosition[{"Graphics", Graphics}, None]]], 
                Method -> {"GridLinesInFront" -> True}, Epilog -> {{
                   AbsolutePointSize[5], 
                   Hue[0], {
                    TagBox[
                    TooltipBox[
                    PointBox[
                    NCache[{69.31471805599452, 
                    Rational[1, 2]}, {69.31471805599452, 0.5}]], 
                    TemplateBox[{"\"(\"", "69.31471805599452`", "\",\"", 
                    FractionBox["1", "2"], "\")\""}, "RowDefault"]], 
                    Annotation[#, 
                    Row[{"(", 69.31471805599452, ",", 
                    Rational[1, 2], ")"}], "Tooltip"]& ]}}, 
                  DynamicBox[
                   Typeset`ToBoxes[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = (
                    NearestFunction[1, {114, 2}, 3, CompressedData["
1:eJzt0VtM03ccBfAK0qKoVOQiyEUIKig6QFdE1O9gQwFBBtOBgnZohAkCUrnU
MG9YWW1gONGMwGRs3NV2awc22NJf2x/YGpRbAbn2D3QgBRtgMBiKY12yxPc9
7cGHk8/LeTrH8VRy+BkDEon0Txj6fACW40tLBAr/+vmDnXQCMVtYiXESNero
MBmXxQwge2myuZdtP6pNaDAyHehFMTkeUz1ZPWjhdiYbQTcqXaO2LhjqQveC
PBiqm52IdS6G6RrYgS4Z3s9g6NrR6astzl1VbaigfqTg+/hWJCVcVj10akYu
1I/8jhQ3IeFWdvywRok0jfyNNNoTNOZ21xM9wsj8cjVtxzIZ8qRNupXPiBH7
E11rHVOIrI/wbh2zEqC6uUZTpfN9JOgbydWyilF6mG1N32kW+nFlZqc87Tq4
DC+zvxb5A9hOiRb2yKvBv7Tn+eFIAfiFmBn+USuEHPqLq+5CMTQetlv9qZkM
XjlaXG4vxJCaui0mz/IJvOinhscqlUC/uPclJbgJZNu8ONioGTavEI+VBbSC
rTjB34jdBksLBtWM4XaYC6s/2bipA3p20TdsYnVCUgR1rVN/F1je+S1yuV03
PIgqqZxh9sBn+64EKOt7gXsy0WnPYh/MrPzYsO7oAIS0+dDsCtSw39j11ppg
Av79BXDaKuoQQ/V+z/+453IfE5n4nhrEZb2HokvVsJ15MaaIpwYTB2GOdaMa
FOc8NRa/v9t9LuVPG14YAdw+RXlIBAG2P8eKck4R8Ppo2ejKiwTUljrso1QQ
kLR6UlHxgADnDEn4AT4B+UEnvrwhJiBlujDfUEXA1qh4+9JuAgYbvKv91ASE
FnRLrmkJoBhUBTpOEiBNyOiQzhLA7DxA/+L1u7+ty2cXtzyree//1ODN7WiP
6QQy6Ppmv0e6Fl2PW++aTB5FunWFNo0UDfJNWiSRtwyiK7l5Nom5fYjhv2Le
cqkLceacQ0+tUaG87boNZwtbUFON62Du8aeIub61dtyjAeXOS2aNsyToTZqF
udt8LZpV0Vi57VwUWMMZNw8qQa+OSzgtmSy0dLDnreJ8FghUhzbmjxfBqymb
dENuOayLCOAkmHHhebwuu03EB+0vgg0T9BoYifvLuGXsEaRo1zJiSXWg9KK8
cVc9hsgVo6ED+WLwf2TPjiBL4EqS74W7ZxGY7PW2OnFQCtlWT1JWKaSQvm7I
4b6vDGh3Lk0MV8ig6XPqmT6KHKZu8634UXK4IRGTdCVy+I6qqjymkQMjIXti
mw2G/mfE/ulADDN2PPmLDAxDqwWZ9fcwJHhrJNHFGCK0u3hv9F5NHP92dwkG
H4tEBu8nDOSqt/WcSgzRJeSHZD6GJOVGRZHeGGlNvrsAg3XqpO+xXzEsprvP
V9RiwBeKx3Y+xkASsHc06P3qENPliAhDEZvifUGMgRnt28aVYHjpLRD5IAyj
vrFRT/Wq3D4UaaT63s3izPMyDKLlY9OLejmVu+1vyjE0xwpJFhjD39fdxzU=

                    "], CompressedData["
1:eJxF02lQU1cUwPEImgjIorIIAqKDCooW1AYB5RZaFHCrVAsKSsERKghq2MJQ
BTHakIFqRacMVEqLbGrSkrIMJuQluSxxEFnCaiBPSEEWGaBQqIKl6Uzf8cOd
O78vd87M/Z+N4ZcCzuvQaDSW9vx3f4TMx5aWSMKyaHZx6/MKFPBt8+PdoR/M
buHERErU4I4OgzFZWD/YVnrJ1NW6D1wZXbfCuP8lOCzTZao3vRf89m4Kl0A9
4EIjtWXOQBf4gb8LS5nRCeZcDGM7+nWAr+o+SmJNtIPPpbXYd5W2gXNqh3J+
jGoFS0mHVU82vQA7mHzifSK/CVy9jRs1qFGANfXldkxmA3jE6f4uogqDTa+V
MXcuk4F3MSedimbEYO5nE6017Gqw5QnBnVMWQnDNXL2xwv4RWKgayhrl5IMT
j1tXqM5xwD/rp3TKE24gmH9wme31oJ/A1lOit+7yMrBPYW/z0SAh2PvIGt2/
KqvBmaHdac7VYnD9URvDz9fIwG82ml1rz8Xg+PjtYbfNG8DdfSYBEQoFODR5
32vG4SawbLsrD694Ad6iJx556Nv6YV5xtM8Kbht46a1OGWuwHTx3vPZs/eYO
cO+e0PWbOZ3g2ECT1Zv6usDm9/4IWm7TA34cXFAyw+4Ff7E/1VdR+xLMPxuz
yX1RBZ7R/1S35mQ/+EibB9MmRw32XOl4x+gwCf5/X8A4YZXJAEtJHN7STrgb
jxNUnzpd33m6JI4SVJ83Itc5XqIPE1SfE2tzreoZGoLq0yt2kUbf+oqg+kzN
um0Vk6UiqD5ZPnrz5ktdBNUnb87+WLiRkqD6vL1jYv2F3BaC6rOpwvFV1uln
BNUne11r5ZhLHUH1mTUvmV2ZLiGoPhcSzEyd5isJqs9ZJZOT1c4nqD79Knhj
pv4FBNXnm9MSXksKh6D6XDrY+77xcjr0KVQesssey4M+30xZJeryi6DPtYG+
vOg1fOizOWriVpuoHPoc/U24fjz0Q59Dkf+sbBmpgj6vjK5mRdBqoE+FK2PB
WfkU+gzSGz7Wny2GPn2qbLmBdAn0mRrrFXf/AgF9GuxzszhzUAp93rJouLKq
UQp9Jq4d2PDISwZ9Mu9dHR8slkGfTV+anFcx5NDn1N1yi/JgOfR5UyKmTRTI
oc8fTJQlpzRy6JMVfWt8uxWGPvuek57Tfhj6nLERyLuTMPQ5YChMqX2A0XIP
A5n4gRpFu2kkIfkYiR++PBRSqEaBo3sEC1rvYCeH5QnUKC1m7Pu9BRgZbKjO
tKxXIw+zGJbgF4waL+7SmP2pRvTS97W8Egy9hxTQn9DLMZq78reV4DiJYhV2
jXla81WNRUcCSRQmrch2FmJk/WuEKDNcuw/xk16nfsfo3cmHw/rJJFpMdJ4v
rsSosnDDfkYxiXBc/sjupxjFGk42Fj8mEU3I3VmntX2SJOBAOYm+OcR2OCHC
KNv/zNc3xSTK4zLc4sTaf57OzdZVkogd4tXGl2C0LTjKtrCHRK/dhCIPAqNX
dW5l3moSDXtFBD/T+lhOj+T6KImUTh+LNFKMGDqlfhsnte9l5KdclmEkjU7q
kM6SSLR8ZHpRa3bngdCv3pGIV7LXNkOOYb9fRFTTzDBG/wKrncc1
                    
                    "], CompressedData["
1:eJxF031Q03UcwPENnY8oCAjIQzAlniaPegQM+P0iURwKC2g8yMZ42hRRth+C
CCtZeAmhBYxscCIpilikya3SJPcLbsoUdUBNEQGpAIntNxQEsalR1+/D9+57
33v9873v5+79pafnxmaZUCgUbH7/e9KWe0y9UWI45b/1GGHt+3prZ9qCK7sZ
dZWLFqwg1jdse0cMriqaiygrFIEDvdvrVhXngqXmRVkJI/vATM1kniI7B+wW
xA7jabLBoo5udWnoHrAnw6K2TSUEW4cwXcK9BeADnhumHl7OBHsHe5UaQjLA
dlNO99jNaeCD5d08lTcfvLr6fvwqBhc8Gsfef3RpMvgrzVYzd7sEsLJhtXu6
Pg78i0d8Z/sMGxxjqsUPSaPAx1nHnqdsigA7vyrG7BrDwD9ddOl7POwHLvBZ
c5A2YrMwn+/GWMpda5R0qd0X5/u5/mB+aLNDvU8Y+IOVzCTJ4QhwOVbrxFRH
gY1+H+3l9LLBMYm8e/nUeDDegX+zf44DLtQN0kS/J4FvtzOe3F/BBTMHX4av
e5UKbowzVvO/TANfSW5D6WszwGI02UtQkQmelZjxeHQB2PQRLeq9k0IwUWUp
6Q/YAz7g+mZiVp29MN8Aw5YangPOmcgt+7lvH3jA/rlCwMkFH1q70fxWlgic
HTkuDPYVL7zf9KYjXb/gX1cUllVyMPD//wVMqbt7veGWAJ+5qY2K7LbCyT5v
yXoUtScscbLP9m2jlp1PzXGyT8Fg3IBh2yqc7LPrjI9J4sNlONmnWK5N4PnT
cLLPtyIqKFaXqTjZZ4mI4+AY+0pJ9qkrkfm9zX6hJPtMaZ05wJFOKck+Fxdc
tbhoYVCSfWoiPrXBCseUZJ/ZktAtK0YfK8k+J22G94qfapVknxp5dMh2c7WS
7JMvNN3DP3JJSfYp6htJPJXaAn2WWXacX1qkgj5FgbPPjC0a6HPHsaGi01wt
9KlNuBHmvb0f+uw5W9+VnzQEfUa7RP9maBiGPqP7Fo+9ZP4BfS4x+X7WpvFP
6DP4dRO+xTgCfdZ93Oa8fd0Y9NkubHpS4/kE+qRfM9bZmY5DnyzPIF2lZhz6
fDAwIgs+/hf0KU/GQ+bcJ6DPtXnPkr2uT0Cfy466JzIQHfQZP+fq33pBB31e
Yi3njprpoc8jd4pc0Uw99Pl32jUV/q0e+uT65bTwp/XQZ4Hbmc3feRNITY1D
bc6kGKXS6O+e8yGQTxwwqytTYtT0fnVXrS+BZG90XBnzUoyWrk5Nk/oTiO+O
vBeSpRhKnX5TzgogkLYKp94HdAxNzXO2UIUS0LtKJetK2UEgN6rvLHqUhKGv
hXmB4TsJ5Ee7DYfduBia31/CcIsmkDrPu/nXMzDUXr6h2RBDIHyWS4ZOhKEn
VPkmxXEEoivXhEZWYGj1QxZWnEwgg2tcr8o+w9DTHtX7k3YRyL3a4s1DVRga
pH76PCCFQFovuDIK5Bga4zjZNMklkEK1xPbsufn7jSflvLT5ed7vkRmaMVRw
Ytd0YDqB7OpzM2O2YGhZif2ARQaBhI330HpaMXRlehVHlTk/r9hd6vgDhp6y
xcfqswhk/dyHxt1XMfTz+uElBQICsZL2HlS0Yag11V+xU0jA/769SW9w2U0g
/wB2staI
                    "], Automatic, 
                    Hold[
                    Nearest[CompressedData["
1:eJxF02lQU1cUwPEImgjIorIIAqKDCooW1AYB5RZaFHCrVAsKSsERKghq2MJQ
BTHakIFqRacMVEqLbGrSkrIMJuQluSxxEFnCaiBPSEEWGaBQqIKl6Uzf8cOd
O78vd87M/Z+N4ZcCzuvQaDSW9vx3f4TMx5aWSMKyaHZx6/MKFPBt8+PdoR/M
buHERErU4I4OgzFZWD/YVnrJ1NW6D1wZXbfCuP8lOCzTZao3vRf89m4Kl0A9
4EIjtWXOQBf4gb8LS5nRCeZcDGM7+nWAr+o+SmJNtIPPpbXYd5W2gXNqh3J+
jGoFS0mHVU82vQA7mHzifSK/CVy9jRs1qFGANfXldkxmA3jE6f4uogqDTa+V
MXcuk4F3MSedimbEYO5nE6017Gqw5QnBnVMWQnDNXL2xwv4RWKgayhrl5IMT
j1tXqM5xwD/rp3TKE24gmH9wme31oJ/A1lOit+7yMrBPYW/z0SAh2PvIGt2/
KqvBmaHdac7VYnD9URvDz9fIwG82ml1rz8Xg+PjtYbfNG8DdfSYBEQoFODR5
32vG4SawbLsrD694Ad6iJx556Nv6YV5xtM8Kbht46a1OGWuwHTx3vPZs/eYO
cO+e0PWbOZ3g2ECT1Zv6usDm9/4IWm7TA34cXFAyw+4Ff7E/1VdR+xLMPxuz
yX1RBZ7R/1S35mQ/+EibB9MmRw32XOl4x+gwCf5/X8A4YZXJAEtJHN7STrgb
jxNUnzpd33m6JI4SVJ83Itc5XqIPE1SfE2tzreoZGoLq0yt2kUbf+oqg+kzN
um0Vk6UiqD5ZPnrz5ktdBNUnb87+WLiRkqD6vL1jYv2F3BaC6rOpwvFV1uln
BNUne11r5ZhLHUH1mTUvmV2ZLiGoPhcSzEyd5isJqs9ZJZOT1c4nqD79Knhj
pv4FBNXnm9MSXksKh6D6XDrY+77xcjr0KVQesssey4M+30xZJeryi6DPtYG+
vOg1fOizOWriVpuoHPoc/U24fjz0Q59Dkf+sbBmpgj6vjK5mRdBqoE+FK2PB
WfkU+gzSGz7Wny2GPn2qbLmBdAn0mRrrFXf/AgF9GuxzszhzUAp93rJouLKq
UQp9Jq4d2PDISwZ9Mu9dHR8slkGfTV+anFcx5NDn1N1yi/JgOfR5UyKmTRTI
oc8fTJQlpzRy6JMVfWt8uxWGPvuek57Tfhj6nLERyLuTMPQ5YChMqX2A0XIP
A5n4gRpFu2kkIfkYiR++PBRSqEaBo3sEC1rvYCeH5QnUKC1m7Pu9BRgZbKjO
tKxXIw+zGJbgF4waL+7SmP2pRvTS97W8Egy9hxTQn9DLMZq78reV4DiJYhV2
jXla81WNRUcCSRQmrch2FmJk/WuEKDNcuw/xk16nfsfo3cmHw/rJJFpMdJ4v
rsSosnDDfkYxiXBc/sjupxjFGk42Fj8mEU3I3VmntX2SJOBAOYm+OcR2OCHC
KNv/zNc3xSTK4zLc4sTaf57OzdZVkogd4tXGl2C0LTjKtrCHRK/dhCIPAqNX
dW5l3moSDXtFBD/T+lhOj+T6KImUTh+LNFKMGDqlfhsnte9l5KdclmEkjU7q
kM6SSLR8ZHpRa3bngdCv3pGIV7LXNkOOYb9fRFTTzDBG/wKrncc1
                    
                    "] -> CompressedData["
1:eJxF031Q03UcwPENnY8oCAjIQzAlniaPegQM+P0iURwKC2g8yMZ42hRRth+C
CCtZeAmhBYxscCIpilikya3SJPcLbsoUdUBNEQGpAIntNxQEsalR1+/D9+57
33v9873v5+79pafnxmaZUCgUbH7/e9KWe0y9UWI45b/1GGHt+3prZ9qCK7sZ
dZWLFqwg1jdse0cMriqaiygrFIEDvdvrVhXngqXmRVkJI/vATM1kniI7B+wW
xA7jabLBoo5udWnoHrAnw6K2TSUEW4cwXcK9BeADnhumHl7OBHsHe5UaQjLA
dlNO99jNaeCD5d08lTcfvLr6fvwqBhc8Gsfef3RpMvgrzVYzd7sEsLJhtXu6
Pg78i0d8Z/sMGxxjqsUPSaPAx1nHnqdsigA7vyrG7BrDwD9ddOl7POwHLvBZ
c5A2YrMwn+/GWMpda5R0qd0X5/u5/mB+aLNDvU8Y+IOVzCTJ4QhwOVbrxFRH
gY1+H+3l9LLBMYm8e/nUeDDegX+zf44DLtQN0kS/J4FvtzOe3F/BBTMHX4av
e5UKbowzVvO/TANfSW5D6WszwGI02UtQkQmelZjxeHQB2PQRLeq9k0IwUWUp
6Q/YAz7g+mZiVp29MN8Aw5YangPOmcgt+7lvH3jA/rlCwMkFH1q70fxWlgic
HTkuDPYVL7zf9KYjXb/gX1cUllVyMPD//wVMqbt7veGWAJ+5qY2K7LbCyT5v
yXoUtScscbLP9m2jlp1PzXGyT8Fg3IBh2yqc7LPrjI9J4sNlONmnWK5N4PnT
cLLPtyIqKFaXqTjZZ4mI4+AY+0pJ9qkrkfm9zX6hJPtMaZ05wJFOKck+Fxdc
tbhoYVCSfWoiPrXBCseUZJ/ZktAtK0YfK8k+J22G94qfapVknxp5dMh2c7WS
7JMvNN3DP3JJSfYp6htJPJXaAn2WWXacX1qkgj5FgbPPjC0a6HPHsaGi01wt
9KlNuBHmvb0f+uw5W9+VnzQEfUa7RP9maBiGPqP7Fo+9ZP4BfS4x+X7WpvFP
6DP4dRO+xTgCfdZ93Oa8fd0Y9NkubHpS4/kE+qRfM9bZmY5DnyzPIF2lZhz6
fDAwIgs+/hf0KU/GQ+bcJ6DPtXnPkr2uT0Cfy466JzIQHfQZP+fq33pBB31e
Yi3njprpoc8jd4pc0Uw99Pl32jUV/q0e+uT65bTwp/XQZ4Hbmc3feRNITY1D
bc6kGKXS6O+e8yGQTxwwqytTYtT0fnVXrS+BZG90XBnzUoyWrk5Nk/oTiO+O
vBeSpRhKnX5TzgogkLYKp94HdAxNzXO2UIUS0LtKJetK2UEgN6rvLHqUhKGv
hXmB4TsJ5Ee7DYfduBia31/CcIsmkDrPu/nXMzDUXr6h2RBDIHyWS4ZOhKEn
VPkmxXEEoivXhEZWYGj1QxZWnEwgg2tcr8o+w9DTHtX7k3YRyL3a4s1DVRga
pH76PCCFQFovuDIK5Bga4zjZNMklkEK1xPbsufn7jSflvLT5ed7vkRmaMVRw
Ytd0YDqB7OpzM2O2YGhZif2ARQaBhI330HpaMXRlehVHlTk/r9hd6vgDhp6y
xcfqswhk/dyHxt1XMfTz+uElBQICsZL2HlS0Yag11V+xU0jA/769SW9w2U0g
/wB2staI
                    "]]]][#/{600., 6.1545902763278795`}]& )[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     0]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     2]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[
                    Part[CalculateUtilities`GraphicsUtilities`Private`scaled, 
                    1] - 0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt]}]],
                     TraditionalForm, Graphics]]}, AspectRatio -> 
                NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> True, 
                AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
                BaseStyle -> {CellBaseline -> Baseline}, Epilog -> {
                  AbsolutePointSize[5], 
                  Hue[0], {
                   TagBox[
                    TooltipBox[
                    PointBox[
                    NCache[{69.31471805599452, 
                    Rational[1, 2]}, {69.31471805599452, 0.5}]], 
                    TemplateBox[{"\"(\"", "69.31471805599452`", "\",\"", 
                    FractionBox["1", "2"], "\")\""}, "RowDefault"]], 
                    Annotation[#, 
                    Row[{"(", 69.31471805599452, ",", 
                    Rational[1, 2], ")"}], "Tooltip"]& ]}}, FrameTicksStyle -> 
                Directive[FontFamily -> "Times", FontSize -> 10], ImageSize -> 
                300., LabelStyle -> {FontFamily -> "Verdana", FontSize -> 10},
                 Method -> {}, 
                PlotRange -> {{-300., 300.}, {-5.20437735079212, 
                 0.95021292553576}}, PlotRangeClipping -> True, 
                PlotRangePadding -> {
                  Scaled[0.02], 
                  Scaled[0.02]}, Prolog -> {
                  Opacity[0], 
                  TagBox[
                   RectangleBox[
                    Scaled[{0, 0}], 
                    Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
                TicksStyle -> 
                Directive[FontFamily -> "Times", FontSize -> 10]}], 
              TagBox[
               GridBox[{{
                  GraphicsBox[{
                    RGBColor[0.24720000000000014`, 0.24, 0.6], {
                    AbsoluteThickness[2], 
                    LineBox[{{0, 0}, {1, 0}}]}}, ImageSize -> 13, 
                   BaselinePosition -> (Center -> Center)], 
                  StyleBox[
                   FractionBox["1", "2"], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0, {FontFamily -> "Verdana", FontSize -> 10}, 
                   GrayLevel[0.5], StripOnInput -> False]}, {
                  GraphicsBox[{
                    RGBColor[0.6, 0.24, 0.4428931686004542], {
                    AbsoluteThickness[2], 
                    LineBox[{{0, 0}, {1, 0}}]}}, ImageSize -> 13, 
                   BaselinePosition -> (Center -> Center)], 
                  StyleBox[
                   RowBox[{"1", "-", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "0.01`"}], " ", "t"}]]}], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0, {FontFamily -> "Verdana", FontSize -> 10}, 
                   GrayLevel[0.5], StripOnInput -> False]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{0.3}}, "Rows" -> {{0.3}}}],
                "Grid"]}, "Labeled", DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"], 
                  
                  ItemBox[#2, Alignment -> {Inherited, Bottom}, 
                   DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  RowBox[{"(", "\[NoBreak]", 
                    GridBox[{{
                    StyleBox[
                    "Right", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], 
                    StyleBox[
                    "Bottom", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited]}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center], "\[NoBreak]", ")"}]}], 
                "]"}]& )], TraditionalForm]], "Output", {}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "3", "datatypes" -> 
    "Solve", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.921", 
    "parsetiming" -> "0.747", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa12831g1af6878ef68iee00001igbgc35f6560021", "host" -> 
    "http://www3.wolframalpha.com", "server" -> "19", "related" -> 
    "http://www3.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa12841g1af6878ef68iee00000f84f2gci7770ga0&s=19", "version" -> "2.6"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -7., 
    "Date" -> {2014, 9, 8, 0, 0, 51.977851`8.46839329508298}, "Line" -> 124, 
    "SessionID" -> 5743596645359859659}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Result", "Results", 2, 2, "Content"}, Typeset`open$$ = True, 
   Typeset`newq$$ = "Solve (1/2) == 1 - e^(-0.01*t) for t"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{80., {1., 10.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 InterpretationBox[
  FrameBox[
   StyleBox[
    FormBox[
     StyleBox[
      RowBox[{"\<\"(\"\>", 
       "\[NoBreak]", "\<\"step-by-step solution unavailable\"\>", 
       "\[NoBreak]", "\<\")\"\>"}],
      StripOnInput->False,
      LineIndent->0,
      LinebreakAdjustments->{1, 100, 1, 0, 100},
      LineColor->GrayLevel[0.6],
      FrontFaceColor->GrayLevel[0.6],
      BackFaceColor->GrayLevel[0.6],
      GraphicsColor->GrayLevel[0.6],
      FontColor->GrayLevel[0.6]],
     TraditionalForm], "Output",
    ScriptLevel->0,
    FontFamily->"Times",
    FontSize->14,
    Background->None],
   BaseStyle->{Plain},
   FrameMargins->10,
   FrameStyle->GrayLevel[0.85],
   RoundingRadius->5,
   StripOnInput->False],
  WolframAlphaResult[
  "Solve (1/2) == 1 - e^(-0.01*t) for t", {{"Result", 2}, "Content"}, 
   PodStates -> {"Result__Step-by-step solution"}]]], "Output",
 CellChangeTimes->{{3.61914844591792*^9, 3.6191484711433887`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"1", "/", "2"}], "\[Equal]", 
    RowBox[{"1", "-", 
     RowBox[{"Exp", "[", 
      RowBox[{
       RowBox[{"-", "0.01"}], 
       RowBox[{"(", "t", ")"}]}], "]"}]}]}], ",", "t"}], "]"}]], "Input",
 CellChangeTimes->{{3.619148335255855*^9, 3.6191484074473658`*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Reduce", "::", "ratnz"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Reduce was unable to solve the system with inexact \
coefficients. The answer was obtained by solving a corresponding exact system \
and numericizing the result. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/Reduce/ratnz\\\", ButtonNote -> \
\\\"Reduce::ratnz\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{{3.6191483980358667`*^9, 3.619148408262867*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"C", "[", "1", "]"}], "\[Element]", "Integers"}], "&&", 
  RowBox[{"t", "\[Equal]", 
   RowBox[{"100.`", " ", 
    RowBox[{"(", 
     RowBox[{"0.6931471805599453`", "\[VeryThinSpace]", "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"0.`", "\[VeryThinSpace]", "+", 
         RowBox[{"6.283185307179586`", " ", "\[ImaginaryI]"}]}], ")"}], " ", 
       RowBox[{"C", "[", "1", "]"}]}]}], ")"}]}]}]}]], "Output",
 CellChangeTimes->{{3.6191483471715393`*^9, 3.619148351728177*^9}, {
  3.61914839803752*^9, 3.619148408268702*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{"30", "\[Equal]", 
    RowBox[{"1", "/", "x"}]}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.6191267444791727`*^9, 3.619126750049971*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"x", "\[Rule]", 
    FractionBox["1", "30"]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.6191267517460823`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "Integral of 0.01 * e^(-0.01*t) dt, -infinity < t ", Typeset`opts$$ = {
   AppearanceElements -> {
     "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Fast parse", "Fast parse", 1, 0, "Input", 
        "{Integrate[0.01/E^(0.01*t), t], -Infinity < t}"}, "ExtrusionOpen" -> 
      True, "Formats" -> {
       "cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"{Integrate[0.01/E^(0.01 t), t], -Infinity < t}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"\[Integral]", 
                   RowBox[{
                    RowBox[{"0.01`", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "0.01`"}], " ", "t"}]]}], 
                    RowBox[{"\[DifferentialD]", "t"}]}]}], ",", 
                 RowBox[{
                   RowBox[{"-", "\[Infinity]"}], "<", "t"}]}], "}"}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Identity", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement["moutput", {}, {"{-1./E^(0.01 t), -Infinity < t}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"{", 
              RowBox[{
                RowBox[{"-", 
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{
                    RowBox[{"-", "0.01`"}], " ", "t"}]]}], ",", 
                RowBox[{
                  RowBox[{"-", "\[Infinity]"}], "<", "t"}]}], "}"}], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral assuming all variables are real", 
     "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegralAssumingAllVariablesAreReal", "position" -> "300", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Integrate[{Integrate[0.01/E^(0.01 t), t], -Infinity < t}, t, \
Assumptions -> Element[Alternatives[t], Reals]]"}], 
       XMLElement["moutput", {}, {"{100./E^(0.01 t), t True}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               StyleBox[
                RowBox[{"{", 
                  RowBox[{
                    RowBox[{"100.`", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "0.01`"}], " ", "t"}]]}], ",", 
                    RowBox[{"t", " ", 
                    StyleBox[
                    "True", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited]}]}], "}"}], 
                LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 0, 
                
                GrayLevel[0], StripOnInput -> False], "+", 
               StyleBox[
               "constant", FontFamily -> "Helvetica", Magnification -> 
                0.9 Inherited]}], LinebreakAdjustments -> {1, 100, 1, 0, 100},
              LineIndent -> 0, 
             GrayLevel[0.6], StripOnInput -> False], TraditionalForm]], 
          "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "3", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.143", 
    "parsetiming" -> "0.748", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa28311bg7fga6g75d086a000067dg5842h78365a2", "host" -> 
    "http://www2.wolframalpha.com", "server" -> "3", "related" -> 
    "http://www2.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa28321bg7fga6g75d086a00006927g7i04ff71ca0&s=3", "version" -> "2.6"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -7., 
    "Date" -> {2014, 9, 7, 23, 27, 37.222166`8.32337662068599}, "Line" -> 110,
     "SessionID" -> 24190340719069411275}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Fast parse", "Fast parse", 1, 0, "Input", 
    "{Integrate[0.01/E^(0.01*t), t], -Infinity < t}"}, Typeset`open$$ = True, 
   Typeset`newq$$ = "Integral from -infty to t of 0.01 * e^(-0.01*t) dt "}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{700., {497., 26.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"-", "1.`"}], " ", 
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{
      RowBox[{"-", "0.01`"}], " ", "t"}]]}], ",", 
   RowBox[{
    RowBox[{"-", "\[Infinity]"}], "<", "t"}]}], "}"}]], "Output",
 CellChangeTimes->{3.6191464501308737`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Solve x - y < (1/2) for y", 
   Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Result", "Result", 1, 1, "Input", "Reduce[x - y < 1/2, {y}]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"solve\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox[
                    RowBox[{
                    RowBox[{"x", "-", "y"}], "<", 
                    FractionBox["1", "2"]}], HoldForm], 
                    StyleBox[
                    "\" for \"", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, 
                    GrayLevel[0.6], StripOnInput -> False], "y"}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None, None, None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Solve", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Reduce[x - y < 1/2, {y}]"}], 
       XMLElement["moutput", {}, {"Element[x, Reals] && y > (-1 + 2 x)/2"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              StyleBox[
              "\" and \"", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0, 
               GrayLevel[0.6], StripOnInput -> False], 
              RowBox[{"y", ">", 
                RowBox[{"x", "-", 
                  FractionBox["1", "2"]}]}], 
              RowBox[{"x", "\[Element]", 
                TagBox["\[DoubleStruckCapitalR]", 
                 Function[{}, Reals]]}]}, "RowWithSeparator"], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement[
       "info", {
        "text" -> "\[DoubleStruckCapitalR] is the set of real numbers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/mathematica/ref/Reals.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/R.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
             "\"\[DoubleStruckCapitalR] is the set of real numbers\"", 
              TraditionalForm]], "Output", {}]}]}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Inequality plot", "scanner" -> "Solve", "id" -> 
     "InequalityPlot", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "RegionPlot[x < 1/2 + y, {x, 5/4, -1/4}, {y, -5/4, 1/4}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[
             GraphicsComplexBox[CompressedData["
1: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
nhefu3V+bZk2Grq7Wbj/19rmrc7xOXWl+vOkPr1OVi7Qxg3++l+pvpx0xwsV
lbPk2M3f/BLjU6Ipc+4fWFa5Ulb99Wff4+q3cPSJ9iHr5I17rjsc7l+k5a9m
3f6S/0bp0y01J6/TUX3uriarc+q2yN8efTEjKKBQM274fntp5XY52f/6r9OC
DmnrM0PL6gp2ybfPfvt5+5ADOv1Q48u+mfnydkT4/MSwAo2xV0mwv+tKe590
tc9poV1Hcu26epPdR0bZfbWXjUMaj/KMS8fYOCXIxq1LrQ45a3VpgdUpM77w
1K3XWQ4yzHIRP8tJNg/x5CbdLUdJsVxlkOUsYyx3GWkexM+8yDTzJNPMmywy
j1JuXmWteZenrQ9kl3l39QfPS7Fe0C/0B89LsX549wvPR7GeePcPzz+xvnj3
E88zsd549xfPIznfX3n1G88PsR559x/P97A+efcjz9uwXnn3J8+7sH559yvP
l7Ceefcvz2+wvnn3M89DsN559zfPE7D+efc7v7+zHnr3P79Psz56zwd+r2W9
9J4f/F7J+uk9X/h9jvXUe/7w+xPrq/d84vcU1lvv+cXvAay/3vON769Zj73n
H9+vsj57z0e+72O99p6fzvd/V9dv7/nK9xus597zl/Mz67v3fOY8xnrvPb+d
/fzV9d97vrP/498D7/nP/oB/H1gPJvRp9Uhgo306sPv7iXGJ1SpPb+uY2myP
9qq9EObvV623DBnr5++Xp10zIppnJlVp8ag7mya03613v707P9y/Sr+K2f5n
w2479faggPdrkyt1yrRxZ6cE7tCbrlvWL6F9pfab61d2us82vbStyfXdVp3S
2xbtODAsNFvPzZ6UldfplG7tUzYnOS1LT4WcfCsqtUIjhjwyJj5noxY2feKR
Rt0q9FLM/Keji9M1d9/6C8lp5bp4bkX3sHPrNCvBf21QQLlG9Z3YJcbnO133
/NwxxellumKi/4XeASm6slVtx9jAMv1Pv8SJt2Um6eLilyt9M0v1qYEnr3vB
f67OW5qbnBZUqsE1Or+mcqRc2To6MynupP629OVT94YkSNXAxx4ujC/R4OUz
79tZt1zy97b8rtn8E+oz4cjIPwpWy/rnajqEJBzXH5a33JcYtlaWFG1ZFpdY
rIPe15q0oPUSN3xRq8ykIl074fWb8jtlSFTVvz6pTT6mvoNvu7fKN1OeGfO4
T7dVR/XR5JK2DRpskR7nb58ZlXpEoxc+1G1+bba0iT3zR3JaoS57f05vv5pt
0vBy9qTi9MO6f+qJJ1eV7pAzMxN/8s08pDfEdB8cULhTDjSJHhWafVAfHhUf
lZ23WzZ+FHwyPueAvjb4+OTQ7DxZ3rJVeHbefv0s9MH3itP3yJzPfyqoKyjQ
vODZn0al7pMT9qrT7O/yjb1PF9vn5E27jq6168oAu4/m2n2lpY1Dy21cUmHj
1Et/esYtaVaH+lpd8q7VqV2tbnnKctD+lov0tJx0uOUmhyxHjbVcZbzlrAmW
uzRN9njQr82LPGuedLt5kw/Mox43rzJnmcez/mreJfespw803vpC7hvg6RNZ
YH0j7a2PZLn1lQy2PpNU6ztpa30oGdaXMsn6VHKsb+Wo9bEcsL6WXtbnUmJ9
L0ttHshpmxdync0T+d3mjTxk80ga2rySV22eSXObd5Jo81Ba27yU3TZPpbPN
W/ljsGceSw+b19Ld5rkE27yXMbYOSN8F9xWdjtzj2g/8r+KzVc0aVWvpNzM2
F8Tudu0Hyl4f1zbEp0rf2XZkefr8Ha79wM6zfT+La1aprYrvn5W0Itu1H1jz
hl+LTN9TOqryxn0Nx21y7QcW/nF2bu2dFbrcd/3CgsXfu/YDU2fsuKGbf7mu
j9+S0fO9Va79QOSNn78T1b5MP10c2erxyI9c+4En54+vTe5Uqqt+6rVueOhH
rv3AyA7zjqcPK9Hfh/ZY1mD6Ktd+oHv3R/Z2ijqufa/8PCdg0feu/UCDoHJN
iinSpgXBW6PGbHLtB/aGzE9rNvWoRj2TNzU0Odu1H0h6vueXcfGFmt/zjSVR
83a49gOjX6lYUPvJIX2gnf+GuCm7XfuBntEfzo5KOqALmuw+mDRij2s/0PjN
wNjilAK9FOt5de0HUuxz2tWu49oPBNt9dbiNw7UfKLFxa4LV4doPvGV163bL
wbUfeMBy0197e3J07QeiLHftaB5c+4HHhnm86WDz6NoP7P7Z410HWB+49gMT
Ej19Iy9bH7n2A2Os72SK9aFrP/CO9a18Yn3s2g8EW9/LVzYPXPuBxjZvZJvN
I9d+YLTNOym2eejaD+y1eSu1No9d+4EeNu/llojtXQuvXDsfVHV8ZFDtX8/9
xT6eEJZ67f9PcZu9TyfPmf7DlJeunSfjHpvfrbi+Lwou337z/LQqbRNe0SK7
vg8yZp2ZmZNeqRvHBf6aUu99qc/WS1c2ndLvbvX//s6bs3T2x4lvBGZX6A+9
896srPc65vbon2NyyjWo6OfpIzan6nNJwa+l5pXpyAkftr7Ybon2urtVaWVB
qf7Y/4Z7JhZPkn7PFKcFpZ7UMT43HSkcsEL+NnT2l2npJ/TS4SMr/es9nHzt
wYXts4t1e8p9JWH1uX878fjsxLxjmrNJb+5bn/Pb78bH+hQe0c4rX+8YUZ9r
yAfdR08tPawfzrutX2x9jncknhhy7vRBPT9p8ysJ9blVrpjzVGTtfn1h2GvT
UutzGm2vesL+Lg3f8LxPm9nnZLldRx+368o/7D460e4rR20c+m8bl/xg49Qj
Nm5pW+ipQ5tYXbLe6tRHrW65P8STg/awXOTAeE9OEmq5ya/HPDlKlOUq2y1n
mW65y1zzIEvMi6w2T7LOvElT8yj55lXGm2c5ZX0h5dYnzvkyxvrCOV/e2K5b
TUxctbZYXpg3bGye63z5U0rDkanxVfrdhi5r+szc6TpfHu5SdLxyXqU+sS8u
odPiba7z5aZ1a573TziluXvSatoMVtf58sue7+0NT6zQhn8OW3d65gbX+fL9
rMEDEpLK9a1w3/NjhqxxnS8n9H1gS15ymRZGH7t8U8Qy1/nyxdxGgY1WlWrW
6a87jiq9mOV9vnxneXrk1PCTOqLVjrzFYctc58snUl95/tyIE7rl/rlHA15Y
4zpftspoOiAyulhXVy/+d+iMDa7zZdW2DT0LpxzTsRlnSuJeVNf5cv2+EZ1D
4o7okr5t5xUv2uY6X8YV39I6c95hvdwld3XtjJ2u8+Uz1Rm3dEs8qCNaTtrR
LDrPdb5scyHySnLyfs358+/lncL3uc6XR+3veru9z3W+nGTX1YF2H9f5svn9
nnHpWzZO1/ky1erSVKvTdb5MsFy0xHJynS/zLVdtbjm7zpc3dfV40WDz5Dpf
XjSvOsk8u86XWSmr/+qLoDDrE9f5sr/1lfzL+sx1vuxufSnvWZ+6zpellzx9
LV9Yn7vOlyk2L2SDzRPX+bKnzSvZZ/PMdb5MsnkpP9o8dZ0vG9i8lutsnjvn
y/UB5b2j6j0ffzQ19FzXan1mUM92oft36fbsGTs7BVTpmcgPGwZUbdevB7z4
WGRgpc55+1T1nX9s0YQ9Xf6bFHRKn+jwxqIr9Z5iw67vXtinQmc9325YXr2X
4ceOfN0spFxjm3w+oGv1Su3/8rf3hISW6eple8LuqJmlXSvjkuLCSnXgxKhH
+1UskPsK13aOTSvRgOIhzW9u87X8r2xI65pNx3V41ozswPocd/7U+NaInCLt
+NHhuuhNmbLwf2lXCgqO6u9rfP32D9wqkY2G/dKnuFCHLs7qUfNQjjz4t5sq
0isP6ZbpUWGN6nO40vr7Q53OHdD2r7cY719f956OETlJdQW6zV6lh/1da+19
csA+p/9n15Gxdl19ye4jPms999UPbBwyyMalm22cMsvGrWetDnnH6tJ2VqcU
Wd3a0XKQ2Us9uUiw5SQPWG4y2HKU4ZarTLKcpYPlLvPMg0w2L5JinqTIvEmW
eZQg8ypHzbOkmHfZ+13THV037NERRZPPJUdXa9LGDenJ9efIF74oSw06V6Wj
c0as9s3frU8MH/R6cUyV9jxwy5L4+nNk0D0b7o2trdTGJRkf1NWfIx+oalfu
G1uph36MnBpdf45s/9W8pWl1p3RF7a3jSuvPka3G/DY4dOopHX/dxuFh9efI
pt1G3FFzpULf8ctdOa9lpl7+Jf9gfFyFturedk5M5ww9v/6Rj9s3qtD0kMn/
Cpf1WjVlxaDs+HJ99pX80KDn1mpRr1uaRPiU6/Ff+o4ceGC15v85ZUfdvDL1
bfdLZ99Ly3XLlvIZic3KNGl5rwp9MkHXz3wqKCChVEf9njhrU91IXd0/o67A
t1Qb9uvU8G6/ufLIbf3HFnc9qc37Zk56879J4v/ZXdW+ASVacD7twrnuKdLI
/5eXQwNP6KJtje6/t8l38tPKnKPxQce1a26X71PPrpODnZP+md2nWBPWFe7L
KUqXTWsn5NYNLNJfl0w/U7pjoyT3GNAnIPSYDp7Zuckfa7Pk/czWmdFhR7Xk
4dMJPvXnyHHB5wNWhR/R5p0lObH+HPnirp3flg4r1OA2C9a0rz9H9g79ooNf
5GGd1OLHzWldd8q9h2KWhUUd0pTGQflB9efImwcPbDU/+qAerUsoyrszTy6c
/PsnOTEH1Ods9Q/h9efIY69eaNIgdr/+o+Ifv1U23CfZNbviAqcW6AZ7lVD7
u+6390lr+5z+aNeR03ZdvcHuIxl2X73LxiGzbVz6sI1TnrNx61NWh9xtdelr
Vqecs7r1XctBplku+pnlJH6fe3LTNMtR0i1XzbOc5VnLXSvMg5SYF/2zjceT
tLrg8aYtzaMsN6/azTxLh/4e77rC+kBKLnj6Qr6zPhEf6xvJtD6S/LaevpJd
1meywPpODlkfSlfrSym1PpUE61v52fpYLj7o6Wupsz6XcOt7aWzzQCJsXkgL
myfysc0baWvzSLbavJIuNs/k4gnPvJOeNg+lg81L6WvzVMJt3sqzNo9lrs1r
ibB5Lttt3svoO5oGNKqplssrXjm4KXWfNPjS86rj7e/6/x2O31E=
              "], {{{
                 EdgeForm[], 
                 RGBColor[
                 0.798413061722744, 0.824719615472648, 0.968322270542458], 
                 GraphicsGroupBox[{
                   PolygonBox[CompressedData["
1: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
apDN8w==
                    "]], 
                   PolygonBox[CompressedData["
1:eJwtlXf4zlUYxt+eR1ND4+rSJtqD0p400FRIIhRJMn6IhF9W2TsRpZRUGrQ1
SNHQLu29NGnvXZ/7us8fn+vc533f7/d9zjPuU7dzVcveUalURkINuDQrlff4
oD1cA5uxvwpeQk8O61owJfxZQ/SFcDn6CZiF3gKmoVfBTPSmMAn9AhyL3gGu
Q3eA2eitYDr6Vdg8/Q49OxW2Rh8GrdFXwgz0xjAB/Rzsh+4Jo9FPwf7o3jAW
/TR8B2PY38mqgx6P3hGuR3eCX2A8+/tZ+8OZ6N3gHnRfaITuA+PRz8IQ9Fv6
nXIBZ7HfHe5DXwQfwjD2c1k7wk8wjv29rP3gGxjNfiFrT/gYhrO/gfUc+AHG
sr+btQ+cgd4V7kJXQSv0LrAI3Qtqp3Ok3DSC12Ew+xnhnL0brqlq2Q7eh6Hs
r2U9G+qjW6ZjuSOcm6bpWJQj/XebdCyKYV/0+TAc/Rhsiz4K2qr24doelz67
arw9+pj0f80Jx946XQudYWf0qXABegHUQ5+mnkLfBnXQJ8J56PlQF32yYkDf
DDuhm0Nn9DxooHfBSPQKaJKOYU7p6b31W6hGL4W9dFYYjH4Y3oZq9rPDZzoy
fcZZpeZHo7eDq1V7OBy9DcxUraBrOkfKzTB4s/SMeqVNefc75Vn9h549Iv2d
3qHea5vuFfWgeqtdujfVY3sol3AxejHsqVzDJegHw7E1TtdaMe6j3MFQ9LLS
G2+UWNUja2EUn90eznmLdA2U++7qafSB8GJ4hrunZ16zfplmBH0APB+eyU3S
M69ZnwjT0DXSv30crkCvB6PQT8IUdCWdq0dhKjpgBHo5dErXSLUZBN3SNVZt
9Zu/FBf7JeEanpuusWo7pMzSj+FZ1kxVpWdaszwOJqP/1YzAI+Vdf5dn9c7f
dC4+eyCc84noP0ssD0GHdA2U+4HQK+1B8p4x8Ed5Rr9VjdZHT4eVYc/Su38v
z+o/eqQ9TV6mHMmbfmUdEPaommkPlPfJk+QtP4e9Rx6zobwAngl74LrpnCvX
8ugR6E9Zu8CNkOkaqTaaGXnRJ8pj2JPkZR+FvVKe1j7dg4tLTAer9/Qf6FfC
vdAvXXv1xEHq1bSXvxzupf7pu0Q9dQj6UGiFfg2+Upzsbw17wknpmdesd4UT
0p4wv5xhdTmTziIPaJb2hHnlDJ/pXOxvCnvIF+pb9reEPUS52ijdC8rZ6WlP
lBf2CNdqg3QtV5bY1pTZUIz/lR5W72rGBqZzolzoDpTXfhC+6+S5uou+D3u5
7qR/Sg+q96pLrJ+XsyrmLdN3pO5G5Vh3x7dh79cdsk56ZjQr8mTN8tclds10
l7QHLCs9rrN/ydotnINB6Roo97qDB6Rrplrpjj8l7dELyjP/A44PCF4=
                    
                    "]]}]}, {}, {}, {}, {}}, {{
                 Directive[{
                   Opacity[0.4], 
                   GrayLevel[0]}], 
                 LineBox[CompressedData["
1:eJwl1Hl8iHUAx/HHpqZWzLWD3TaGnY0oIamVhMxZVtZU7q1ba6VUcpSjQysp
KuWWokMXXehwjbnpEK2DLN2Y3nv1x/v5PK/vH8/v9fr98SQVleQX1wmCoKdH
bkgQ1L5LUJcwwokgkjhSyaQj3elDAaMoZQqzWcoatlFFDU19PIM8CimjnFVU
UE1DhzeiMU1oSiRRRBNDM5oTSxzxJJBIEsm0IIVUWtKKNFrThrakk0EmWWST
Q7/ac0ODYA8X0JFSdtOEZ2nMLu6mA+PYSSOeoSE7uIvzuZNKIiinAdu5g/bc
zjbq8zTnUsFttONWtnIOswhnC7eQSwmbOZunOItNFHMeY9lIPZ4kjK8YQw6j
+ZIzeYIz+IJRZDOSz6nL44SygRFkMZz1hDCTOqzjZjK5ic8ImMFpd/yp3kgG
w/iEGvt0PaUfaxHp3MBHnLRP0xO6Vgtpy1DW8K/9Mf1HP9TracN1fMDf9kf1
L31fC2jNEN7jT/tU/UPf1WtJ4xpW87t9ih7Xd3QwrRjE2/xmn6zV+pYOpCUD
eJNj9kn6q67S/qTSj5UctT+iR/QNzSeFvrzOL/aJ+rOu0KtpQR9e4yf7w/qj
LtfeJNOLZVTZH9IfdKleRRI9WcJh+4N6SBfrlSTSg0V8b5+gB3WhXkECl7OA
7+wP6Lf6quYRz2W8wjf2+/Vrna+XEkd3XuaAfbzu15f0EmLpxovss9+ne3We
XkxzujKXPfZ7dbe+oF1oRmeeZ5e9THfqHL2IGDrxHDvs92ilztYLiSS69kyi
Qv//T/4HHP6cDQ==
                  "]]}}}], {GridLines -> Dynamic[
                Map[{{#, 
                   GrayLevel[0.7]}}& , 
                 MousePosition[{"Graphics", Graphics}, None]]], 
              Method -> {"GridLinesInFront" -> True}, Epilog -> {
                DynamicBox[
                 Typeset`ToBoxes[
                  
                  DynamicModule[{
                   CalculateUtilities`GraphicsUtilities`Private`pt = (
                    NearestFunction[1, {331, 2}, 3, CompressedData["
1:eJztmIs3lYkaxl1OhoaGlCN3kkjUaajk8iK6uDRUJGVEdFGKVpQuBqlTyKjU
RENEM6jcokR6N7ZyyW27buxdY9xCxmXICJ3Vfs98s9Y5/8JYy9prWctafN/7
PM/vedQ9j2/3FhESEvr8bSssJJTTGKrj5FSOf3/S57FfveXiCkpx5fhWUZ4i
Cznz9r61mCtE+2WahZXsfKywGrrhGJmNlysOdeSm/ISzC8aUL3rcRoeDsdqa
vCOoM/Fa1sTnGiQaOzsv0E6BtJnye3Pxj6CNH3/qg1geuCEn4bj5M+i6O5/d
F/QCDMzVJ7K4JRC42lT8aCAbnqntVtSWfQUz0gH63VmVYCZ8zSLJ7jWEjj7c
ufddLXT5dX8tWVYPoodPmPrIcEDTQ2hzhXsjbNod7aCV2QQHHJVcw2ea4fLW
jP1dNq2QbrHe1zyuDaqMXgYm9nFh6F87Q2YMO0BqRdcV1/BO0Nfwu1HA4YGD
wtyPcupvYJ9cebJ1xRuQ0d5jVvHpDaxXlR4R6/7r56uTH/oej3kDwitjjeJc
3oD20q2DrSZvmN9Xu99zyPwdH0ZX1Rj45PBBfnlYb9pNPpirrLvdF8QH6XQV
LxlLPvzytdhq4/l8mKdb9EvQMI/5O2Yf7nLviudB7TrQldzPgwn93zttNvNA
WSs9+oouD95nx7g+Hu+EF8antXhFndCzRq9NMamT+X94eZVO4XadkAk56pmL
OqF57YHGoakOmNVTvKjL64CaAhFHp/sdkLhxQOk73w4o3XC3ttixg3kuhc+N
7bTm2iFq81J5h5ftkGvWVhmd0Q7thlfP1kS3Qwbr5OYPzu1wznavrLpqO9yz
lCl3F21nnm88+5FlRRYXjn5zc8HYKS5c32TDWr2XC4Wmn/yPm3MhoqLXNE6c
C3t31EqU1bdBiM2FIuH8NuY9nX6tauTj0QZbd30xL1anDfy2PX/CkWqD29b+
h2TGWuFQvYuBcWErGO0xF/IOa4V92ydyUg60Mu/bpenaKknZVtBxD/po2NEC
Ds76j05iC5y2//XbxyktsKWtagXvSAss2Z87KWbQAqauB9Os5VuYuzHsFNXK
ZDeDxMHB0daoZtD7NilFzr8ZnJ0+fzXD8rcm6t8pN8OUj+b7tJ4mUPXkJvZV
NjH3J9cdoOQQ2AS9x9z6g8yaYMGBhfEFGk1g6PbK9oNYE4j1Z/5Tva4RWk7c
+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
APxJ2rI=
                    "], CompressedData["
1:eJxFmHk81WkbxslkaGhIeSu7JBJ5DZXQjWixNFpIypRCpY0+adI2SL2FjEpN
NEQ0I5UtSqRblmzZjvXgnBpjaVEjhozQq3PP78k/53Odz/Fbnue+7+t7PRrb
D6zzmiQmJmYvLib2+TOjPkjX2bkEdymWJNiWPUdOu8we/1VR44s20fS9lMMT
MD19fsc5t5B2pvv/uyFw1KSN6TrTp4fjevhMp1st2WcZ3cJ0xOqUHR12zUzv
W6vsFjLayLTDpggn7dQGpud7iK0s21rPtPTugxY+8jymX/p2fidTVMv0+fd3
Nmx5Vc20nfgFq3iHZ0xLyfsbdKaVM12ivklJR6GU6WBDC6m9h4uZtrTUGEzj
P2F65PqU4p6Ax0z7Iy/2gOVDpvuEMT9+kMxiumW05MZ4zF2mq81cXKbqJDId
OvhMwdznwpfn9YzS0RLsAU7HTu1XOe1xlWnXsl1tmYm/MZ1u03tpbVg60yZz
tXLLi7OZzp285YXVeC7T6gOrJQRKBUxv/9NLMTqnkOl/P2E/fc/0Avo/pnl0
XaYd6b5Ml9FzMX2WnpvpMXovpp12it6baV1aF+65II7WjelkWlemW2jdmXan
fWG6g/aNaWPaV6YP074z/ZDqgulROVHdML2M6orpIKq7L/ejumRaguqWaS2q
a6ZXUN0z7U19wfRZ6humb1FfMV1Bfcd0L/Ul07LUt0wbUF8z7UR9z/Q2mgtM
y+tsXlb26YteoibXJ9n5HMafvAnnqXz5vUO6c9/33cVgmHBn34HI59BbonU2
cWJdxRdEmUa7PofQtgG1D5LFoDNn9Ztm8+fQUu5+6lBNEbu/Vk5p9/tfikD9
Ztcuy1dCKK66ctJWpwjeL6wy9skQAlevM+cFdydfFkJGXU2AYlAhWKouvtoT
IASxAlPBpdWFIHdL1VPeWgjxjVL+PRP7/Md3koZmU4Rg9aZZxsznCUzWy/sj
4J0AIvlWvjlGT9h6CEtv15t8LICxOxu3dsQI4KTg6J5zYQVQvRj0ZHYIgOuf
QYO/2+1WCkBQuLMqqwxBRftWxDk9ARy9bhaVtgnhbXqk272Bdsit4Be5HH0M
j82OaAvy2mFs8MeBsZh86DLSb1GKb4cYnn3usF4+258laWpBA48egSCr3DnE
oR2OtOanxwjyIBUyNFKnT1zv335uXORd3zvcBq4dC383/zkXxvSVTusJ2mDw
scT+xeq5UJUzaa3zzTYweZ0QK5zog7jlr5V/2tcGR2ZYVp32yIHCpder89e2
wYx+hajA/gesXjKre9yOnXoAuY/MHLTHW6H/n9Ohmkn3IXzlnJlOT1uBmy+Z
y1rKI1JagSc+HFjsnA2tJuePVUW0wn5h5UrszoKUgkMrP7i0Qoa0z4/eX2fB
cfstChpqE9czlvpdVuce3LCWL9kq0QqR8u37pB5msvpd8C7NWMIuE2KK71qX
pfFh/6w1nik+GbD3+8tT+3/kAzfvLq6wKzDcwgdHjQI3B+V0yLX45HfAkg+N
H+ctj3BLg9CybotoKT64rfO80X7tLmxZXy1dVNsCguR4cT3BbQi0O5Unnt0C
M7ev+ln9UwrrJyelPmVFjRQ48kzN1MejBRr9Fhz33J4Mqzd+PTlKtwW4+eu7
5tF9nmwLXAyS251cchOu2vrtku9vhmdLc4Zie5JgV62rsVluM6y58Ldz78Tc
Mt1sKeYV3Az1PYbZS30SYNu6wYxE72aQTWixNgyPZ/0dmSWWYL/lOrg2XFgo
o9AMlz0Ctr4UXgPdrQEfTdqagPMDJxeDu4ewCeSCrEx9b16BI45//nAvsQlC
BiI3bH4VBataKuYL9jRBeLy0wvCeCzBrR+aQpHETaF/7KlFXEAYWbjuTbWc2
gWxgIv+T51k2b4Y8reWaekPApF1CO7W4EaRO7pyt1nkMpHe+ed8c3gicP+n/
EJ+o6NcIvL/UJEeGN4OL8+e/Rhg7GxYmaHyzbN4Lc42fVBrBXCbNwKZmDw77
aL1N7moAcd4hlYWCY6i2nR/XU94As0KUXJ94ByE3/wyvH9d4IwxBxU5/ZafD
DaBpG5aUwQ/D7v3uLwOWNQDnl1O9p8XkaDbAjFMnhp20L6GJe6n9B8kGuCFn
IPDqiELJl6n/0aiph5gd2arlW69i08Erf9r9Ug9R9823LRBcw/Hd9pfPHasH
dZu3NlbRscjN45S6WF0X5+v495ueaf3z6mHdxYvZW3YnYMnhGqFSHw84/+7d
FxLp1sCDqODUspmSSTjdy9Q6OocHbuWSZnM6k7DzL/WpRYE8aDxY0dZw4zfM
PirV2ruKB+uUI46f8UjGdr/8MD19Hszc0f0uEm4h5w8vbi3zuKaSgvUDm6Sj
+HXgtn7SJMf225h00qoxP6EOOJ6o9B86M3q6DmKXq86QDkjF/r23l5j51IFX
6OH/KWxMw6IPF7/yMqqDvlkqUR2h6RgVfLQ2YqQWUt+d9DTzycC8gIXBVcJa
kJ92O9aSn4GcX/mbNDfZrsrEzI+Vn0zCasFoiunvcfPuYfCZe5Vb19cCxzcp
J3adiFtcCxsmlaaP+mdh3edtVaqF+3MHXol3ZaHNJ+kh2bIa8B/ZkOs2wQVd
0/nnPVxrwKjmfui9xPtoLLH8vVC9Bi73dxTlTHuAnH8Oz/h2LD/oAWp8fbw3
LaAacl77Vil65GChsn2IxJRq4HhL/pvsnkBeFbR0jDcdSnuI2/5RtR+PqYKl
knpyR1VzUfzbdx1r9apgpDX8BW8sF29o5R+9mfcMctLepesJ8vD9tHlCzZBn
MLt+9mtDh0fI+fmJoRVzFuU9QqHiNv5AeyVYVCYPRMTkY+CChX4r91UCx3/V
s6Mbik0qwb1o0Vjvy8eoIi2xxHq8Agq6ty/q34j4WJVXczliQrtvP3Vzgpu2
GSfsfKVaAaqrLr1ZG1aAqZrfVHr3lEPtJt2zDYUFyPFF0B7U2jhSgL9q2zxd
bFkOfzj3hUv4PEELc4UfwmrLgOPR8PknnkhFl8H7tQ8uGMkXYuvMHq0zHmVw
Y4ejQfaqQjxucP8R/30pTFpz8orHBMep2JzeoB9cCh5L0sZldYpwr9FfD1Ls
SmGane21yK1FyPFO8ea2xQq/FOGmRTr3jiU+Ba0VMvEoWYwj9h/sar57Chwf
r17qkeowOsFR1vVJ7+4W41WdSvmK4hLoWr/byq+rGE2XxdxS+cw19Il8+h6S
6HeoQ/8HLnQd5PhLykF0H5xJ9wVveg7MoecCjtcl6bnhML0HOtN7gQ69Jw45
it4bztA64BVaF+imdcIuWjeIpnVEjgftaJ2xkdYdbtE+oD/tC3D5oZj2DR7S
PuI02lfwoX3GLNp3KKc6wGSqC9ClOkFbqhtopzpCjk/PU53hXKo76KU6RC+q
S+DyzCSqWxilOsZ4qmu4S3WOHVT3IEN9gJrUF7CX+gQLqG9AlfoIOV6upT7D
eOo7MKA+xBfUl8DlqxPUt7CM+hhnU19DH/U5ulPfwxqaAxhHcwGaaU6gOc0N
SKc5ghy/n6M5g7Np7kAOzSF0p7kEXN77R140t6CA5hheobkG0TTnsIXmHpTR
HEQTmoswTHMS99HcBB7NUeTyRArNWZxPcxdaaQ5jOs1l4PLny+2iuQ0dNMdR
k+Y65NKcx5s09+E1+QDOJ1+A2eQT6Em+AQPkI8jlm2fkM6hJvgMfyYfQjnwJ
uDxcsFzkWyDhI/IxNCJfg3byOVxKvgffkA+iFfkimJFPYnawyDdhOvkocnnr
LfksbrMR+S4okw/jgTiRLwOXz11PiXwbtMjH8WStyNdhjHweF0mLfB8MiANw
XUTEZy547E6cgIJBETegCXEEcvlvKnEGhv4k4g60IA7BB14iLmHnBbXELWhL
HIMviWtQlTgH3xL3oCNxEHYSF+EJ4iT0JW5CZ+Io5PKoAXEWDhJ3oTtxGPYR
l7HzCwviNvQijkOJlyKuQyviPDxJ3Ie+xIE4SlyI8cSJWEjciEeII5HLx2uJ
M3HyQRF3YiBxKAYSl7LzlFXErXiWOBZlb4m4Fj2IczGUuBcjiYNx8qiIi7GA
OBm9iJvxKnE0cnndjzgbzxB3YzxxONoQl7PznWTidkwmjscpJiKuxxDifCwn
7sdMygF4hnIBdlBOwNeUGzCXcgRy5wdRlDNwyogod2Ah5RCsoFzCzpv0Kbdg
BeUYjKRcg0mUc9CRcg/yKAehLIpyEU4yEOUk9KXchK2Uo5A7z8iinIWRlLuw
g3IYOlEuY+dfmZTb8DXlOJwxJMp1+JRyHvIo9+Eg5UC8SLkQ51JOxEHKjThG
ORK585UmypkYSrkTJ98V5VB8TbmUncf9SrkVZSnHoiPlWuymnIt3KPfiDMrB
KEO5GG0pJ2M+5WZUoRyN3HnPEOVsrKLcjXMph6M+5XJ2Piik3I76lOMxknI9
SlPOx3eU+3EJnQPgGjoXYOeNYoWicwO0pHMEdv41i84ZmOZ+/39zqNqy
                    
                    "], CompressedData["
1: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
                    
                    "], Automatic, 
                    Hold[
                    Nearest[CompressedData["
1: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
                    
                    "] -> CompressedData["
1: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
                    
                    "]]]][#/{
                    Rational[3, 2], 
                    Rational[3, 2]}]& )[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                   If[
                   CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     2]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     2]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[
                    Part[CalculateUtilities`GraphicsUtilities`Private`scaled, 
                    1] - 0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt]}]],
                   TraditionalForm, Graphics]]}, AspectRatio -> 1, Frame -> 
              True, FrameLabel -> {
                FormBox["x", TraditionalForm], 
                FormBox["y", TraditionalForm]}, ImageSize -> {300.}, 
              Method -> {
               "TransparentPolygonMesh" -> True, "AxesInFront" -> True}, 
              PlotRange -> NCache[{{
                  Rational[-1, 4], 
                  Rational[5, 4]}, {
                  Rational[-5, 4], 
                  Rational[1, 4]}}, {{-0.25, 1.25}, {-1.25, 0.25}}], 
              PlotRangeClipping -> True, PlotRangePadding -> {
                Scaled[0.02], 
                Scaled[0.02]}, RotateLabel -> False}], TraditionalForm]], 
          "Output", {}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "3", "datatypes" -> 
    "Solve", "timedout" -> "", "timedoutpods" -> "", "timing" -> "0.878", 
    "parsetiming" -> "0.498", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa3081hbae9b9d7d13ih70000545cf680ah85ee80", "host" -> 
    "http://www5a.wolframalpha.com", "server" -> "63", "related" -> 
    "http://www5a.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa3091hbae9b9d7d13ih7000012b84bd5060ca2c1&s=63", "version" -> "2.6"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -7., 
    "Date" -> {2014, 9, 8, 0, 45, 3.58275`7.306791493016748}, "Line" -> 134, 
    "SessionID" -> 24190340719069411275}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Result", "Result", 1, 1, "Input", "Reduce[x - y < 1/2, {y}]"}, 
   Typeset`open$$ = False, Typeset`newq$$ = "Solve x - y < (1/2) for y"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{295., {57., 26.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 RowBox[{
  RowBox[{"x", "\[Element]", "Reals"}], "&&", 
  RowBox[{"y", ">", 
   RowBox[{
    FractionBox["1", "2"], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      RowBox[{"2", " ", "x"}]}], ")"}]}]}]}]], "Output",
 CellChangeTimes->{3.619151103806905*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "/", "2"}], ")"}], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      RowBox[{"2", "x"}]}], ")"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.619151168606612*^9, 3.619151275853035*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1:eJwt1Ps/1XcAx3GXlUJmLXSayi2LRh6iUultklLkHrrIpVSystJGayGORy1d
jDWXI+o4coujG9nR53DknCXhOIdDx/kiCUe+EbWssu3x2A+vx/M/eBmHHfM5
oKaiouLxb/+57cBQG3/Yf6M19EdmZijysnxnGMWwg1/k1+feT1NEX0t66Q7D
Bad+W2v+Zooi1g4LOLkMPwiVu8IGlRRZ17qK+ytjP0Iy87qfdFKEnyOwv8iI
Qdr48qasCookJV6I/YWRjEn2+rJV+yiyP4ZmnGdkoGZO6NGDDxVkTobb9dfj
BYhv7lDWhfaQqlbbLVuWVGCYwzBYYygngUnybsGFu7Ckts79vKebHKs8YZU5
+QAFX7Inu852kYkrHSJVVYKG3Y8vEsiIqK6RtGyoh2GeoVFmXwc5HOc2L2i0
Ae6bdse1n5eSurm2M2XfCWH0d0SChZuEFLIbPi1a9hhW5bkJx1+JiZN+7Q3f
8ifojblu3VHURqyE8upGyxZEstLYrMhWInHyHSsea0XgmSDTMpOnJErziFhq
I8ZypcVuv2tNpEkWUKtzqR2RO7yY/c9FxNc1sG9gQIJdJzwdV69uJKvzLwTk
m3Uggwx5kfsC0vspXXIovhNOarKd1qp15IVbC1tfIEOUrD6a84ZHuFlUXJtx
N5yyEhfWxFYRzjn18xanniGqZ/xZkMFtMhW+ayTiDzkCe7+5JTIrIVouKT6V
Bgp4kZzOkeRr5LTuC+2+PRQSXu8NV4QnE+2HK1Q6PXqhkkRr8k8mwfEHz4+C
6V7kC8eK4wPzwCpIZZuy+sB3e7x2XX0xgv3tmudu78frkhuHdwTexj3pgfSH
b/tRdMs6Z/JeFRyecNUGrz6HKDRFz6aKB6PNEVPpLgNIWJAl9ZxfB3s7+7S7
gwOQtEpcxNkCUBMX/2QzX+B00xrzy/qNGF3lzWTYDoLb4qIXIRLBXGk1oto+
iMyyqiIN9yY0mJ0URye+hG66xE0w6ykuS6ThPmZDWFJcKizY2gral5+m1jAE
xc0E01nn2nDbX2+Tw/fD2F9qmXK8Xwx2c1Ju//wRuOZorH+0TIJ3wj0/za8f
wdjlB2/NkqXoTSNTukeV4JvGK43lHXjbtp5xVmcUo+wfbT9bLEN0hgk/jjeK
3uWbE97EdsGg2UR3IPgVrLM3G4lqu+ErLftg+OkVCkuC3jt8eIaJfdej5CVj
GCDOXdX+PSAhFUwddxpn6oK1FmcqUNMStV2xg0ZMXtdVXq4C9zdaflHuTSPq
Zz+TPWwFygw5LI8AGoEO2xxyyhXIlmXfSQ2jYVdpf5DxSIGTXil9mnE0RvK1
BXoTCqxw2uuoUUhjZ0LNKR13CuYVi9Q7i2i4B9vPLvemYLJEJiospeGygZvm
EUBh4QcfP9dKGjZ/cYpSwyjMrt56hMmjoR2d1qEZR6FvpV2WejuN+n2HbDUK
KcivjQe3S2lUOz6vLSylIJtXYcaW0eB+FezmWknhqdKC66ygwer0DWHyKPBu
LhUmDtOI9cQl9XYK1fo9qd6jNKKtahhsGYU7zGwfY5pGhJY9x1lBoSRcT8Gf
pOEntOQlDlPgiMXsK+9obONwthjTFPK/vXI4ZJqGU5JRO3+SAovrsdLmI421
oTnBIdMUfl+qNTUzQ+P/f+Ef0cKOKw==
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{0, 1}, {-0.49999997959183673`, 0.49999997959183673`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.6191511909262667`*^9, {3.6191512314420137`*^9, 3.619151276427354*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"prob", "=", 
  RowBox[{"RegionPlot", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"x", "<", 
        RowBox[{"1", "-", "x"}]}], "&&", 
       RowBox[{"y", ">", 
        RowBox[{"1", "-", "y"}]}], "&&", 
       RowBox[{"y", "<", 
        RowBox[{"x", "+", 
         RowBox[{"1", "/", "2"}]}]}]}], ")"}], "||", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"y", "<", 
        RowBox[{"1", "-", "y"}]}], "&&", 
       RowBox[{"x", ">", 
        RowBox[{"1", "-", "x"}]}], "&&", 
       RowBox[{"x", "<", 
        RowBox[{"y", "+", 
         RowBox[{"1", "/", "2"}]}]}]}], ")"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "0", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"y", ",", "0", ",", "1"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6191539512052507`*^9, 3.619154166191485*^9}, {
  3.619154209162634*^9, 3.6191542113185167`*^9}}],

Cell[BoxData[
 GraphicsBox[GraphicsComplexBox[CompressedData["
1:eJy9mXl0lNUZxgMiFkviAgpOgApug40iy4Ao4SJjAyqFCUX0AE4tLagMeyk4
qbZYYVisgDCUxSAMWxXEiUKr4ACCAXRYBCUMRIQQMiEsITAsQgXSm3Pyu1/O
S76T//wnOc/3vve79z7f8y73TvOBI3oPqp2UlFSo/1T83/fsy+2CsQKVu/3e
zMmJFQrc88tGIyYl1qkJtTouiAQKDcb+woxd/eKuXGMHt1lVr27cVWQw/g3U
bdcCiajxB+MPLng+f3hyPG4w4+MXP/AEY7vNeDDjwYwHT6uzMuYKHjOY93Xp
+UyLuGuveR+Y94F5H5j3gTvl/LWL133cYN7/7rJT51zBmHk/mPeDeT+Y94N5
P/hE/x4fBBInDGa+i1fe3hJI5Jv5wMwHZj4w84GZD8x84Lk3Nb09HDplMPNn
9mk1J+Y5ZOYHMz+Y+cHMD2Z+MPODmR+csbo0K+Y5bbCdjqVupS6lzqRO5HeV
vEse7OJIxo2MC6lzqVOpK/nd5XeQcSnjTsaRjAOpW6kr+Z1lHMu4lHEl40Dq
VOpGxrWMSxlHUudSdzKOZdzJuJA6lXEp40bqWMZRTbpetXL3y87wETW3Yd72
uGuN6v9caI/He1TV7vjQlGDsC1XvhtGP+ZPj6rNjI9LaB7epTz/quiQUKVbD
//XJNzHPLjWoX4P6UV+Jmrk4a20k8K1qULdoTMJxQp2+nPpWcjxPbfp4zQ+O
6EnVPXP9AK/7gBrxwsQMt79ULX3f+3A4dNDMyzqYl3UwL+tgXtbBvKyDeVkH
87IO5mUd8NGkXt+wz1lm4ip8sPMdUxPzzbqIe3Qv+SIO0ankjzhBZ5JPdI1u
JL/oEl1IvtEZOpD8oyN0IL8HukEX8AQv8AQvsq5LHcm6LnUl67jUmazTUney
7kodyropdSnrnNSprENSt/B04sF2jqivQKU0LVxV7Fpq/vN88/jsnl73EfN8
7r46byYchSp9fdv/BWM5amTasE8DiUJ1zjd2QfvgpyrjH3knHdGj6gPH2i77
PRtUs/3pd4dDRSqn6OrZSGCzOv/Q8j5uf1zd3Gnhl8nxLWrHmylTYp5iNXhW
l9le99dq8YGx633OY+qLE0cGh0M7VFarw2fLy4+plNATTZKSdivPxG73B2Ml
KtLj9onO8B7l/D7czxk+rl65VFjq8X6nrj3SeHokcEI1Wrq6rz85T+0LjP/S
4z2pcntN2BiK7FMfHiz5sch1So3+qY8z6tuvJrTJTPMnl6pf/fu+dxKOfNVv
8toXk+Olamfvi5cd0e8ND84Vc7b7nIfNf563PtR8dihyWmVd2zrQ7f/BYPzg
DR7hDR7hDR7hDR7hDR7hDR7hDR7hDR7hDR7hDR7hDR7hDR7hDR7hDR7hDR7h
DR7teAETh8QdvMILz/HDDo/857nMi6yLeVkXGD/GST/yg1yX1IWcR8bXhGuj
F7ydmGow763bburXrmDZdePAsq7AA5j3oRP8yUP4g/FHN/iTl/AHm/xQqSP8
yVP4g/FHV/iTt/A3eQw+KnWGP3kMfzD+6A5/8hr+YPzRIbzZ8QpPdjzCix1v
8GDHE/u244V92vHAvuz2zX7JI2DyBpg8ASYvgMkDYOIeTJz/XPPI7wg2/WMl
hheek3eJJ/KujH/G8dxuHH0AvIN5D3ncxHNlHgfTJzAezHjyPP7keTB9BOPB
jKcO4E8dANNnMB7MeOoE/tQJMH0I48GMp47gTx0Byz4WbM6FlXUGf+oM2I53
MH5238GOdzD+dt/Bjncw/nbfwY53MP5238GOd7DpU2y+gx3vYPxr+g6yXso6
Rt9NXNJ389zUTVEX8QPTf8s6B6b/lnUNTP8t6xiY/lvWLbA5l4g6BTbnW1GX
wOa8K/oF8rXhofK8AeZ8AeY8Aeb8AOa8YPrTyvOByV+V5wHyJ/mNvAfPPCev
Y4dn7OR57PCMnbyPHZ6xUwewwzN26gJ2eMZOncAOz9ipG+wLP/o3/MDy/gt/
9IY/+8SO3rCzT+zoDTv7xI7esLNPc26v1Bt29okdvWH/7NHn+rurnPdXVLjV
uv6ereuHizqk6L56cNEDub4q53/85b1YrE6DjU7dJzWccSktWOU+AH95r/X2
6mcHRmdtU5sf/3p2pMr9AP7ynso9cO6NQ3UfNfLYvGtFVe4L8Jf3UK9NHrY3
oPuqZrOGvJScat0f4C/vnfYfTlkeK8pTOzo/vttV5T4Bf3nv1KZDzjin7ruy
Tvyyo7fK/QL+8h5q2rTMp/xV+rDlFWn2ihXXYPgEwxcYPsDsF8x+wKwX3Kdi
+qQCdX7Px9PmxOar7tsOb/NV6GLNqrtu0edQ7Mf3tH6wZas1Bq+Y0//R9nu/
UBdH5zwS1HXzqw4DvovO+tTYX8x47/vYjG1qabM35kV0XZwfPVN/ko4L7Hde
KPib/7e7VO9oZu24rnsef9scp44L7MV7bnsneeK3KmlsC19yUomq6xz7u2j5
N8beteXqgd6jeeqj5ue+c+m65fUN+Mml4wJ79vg+7cJPHFADdn7Zyavr0trN
V3cEdFxgvxS7cGPSooPqZn9wWUCfwxo6Fr4X03GBvXfF57p22Pzn+X/vHZQS
1ufQEaO6jHTqvLh1UfPU4ANlxm/0qKlud0sLw6sdj/AM7/AqeZS8SZ4kL5IH
uW8wukSnz7uz93o+OmLWX7vhjVfLw0eu48POr27Z0HT/C0fN85yNeYOcv7fw
mvnpy0P14wZ7fct3eVIsPDAj5Zbo58UG1280roN/vYVvTRwalxhSYvC6zd0W
hYZaeMOCcIFD9zXgl4c3rhdNtfDQp8Y/5f76pMF3Oo6PSkQt7Ljg+cT3aqnB
uVvW5juyLIzO0T3P7faN7omDmnggDoiLmnghLoiTmngiToibmngjboijmngk
joirmngljogr7HZxhV4X95rn9Ou+MGPb+0sjVe6zB2SvXBWq5j678U+fOw+c
WaGmT9s4PVbNffalfkfzw2fXqfTHZlwqr+Y+u82ANTP8un6djL/4B2c199kl
N//YNlXXq3nvtI56qrnP3n0w2+fV9albeu22/mrusx9s1zk9rOvRhZJv3w1V
c58deOtwSpKuP0uCS+pEq7nPLigcX+DR9Sazy5hhiWrus+FJ1vnnHx+W++uy
+df9DgCPdnVe1nFZp2UdlnVW1lEwdUnet9On8B35rvQl8ncKvrOsq+yHPobv
jg7oW+TvGuhC1mX4oM9BJ+iGvkb+DoKOZF03fXFlH4Su0Bl9j/zdBN3JvoDv
QZ+EDtElfZH8nQWdyr6C70kfhW7RMX2T/F0GXcu+BD3QZ6FzdE9fJX/HIQ5k
X4Oe6MOIC+KEvkv+7kPc8D7s1Mkhx7a/+1ryuwYPzjiUfEt8he1zcLOm3a+U
OwrV7VPueqRlLEft+KrxIGf0qPpb8Xtjh+rzUtaY4zs9/rg633zmoVjRFuW8
e117vz73r9i99w2/Pg/t2z51YUif4z/e+NbMZH3+mTCu/y+i+lxev9FDf/Lq
806be9JGJfQ5+6Xhu1xhfb4p2HXlgCNeqjZvGXFTkj7PjC9tuyiyz+pnWNeV
e+duDPQ+ZP7Lvodx2aktbglnWnmZfbAv9sG+2Af7Yh/si32wL/bBvtgH+2If
7It1sC7yBnHPPro99+qwxZ0svHD8mJ3Rk+uMH+Owt8j0BWslrTT/eY5u0MXp
EZnLA4tPmXWceXptcXkvix/53G4dkm/eS96tU3/fqfwz89XIUeNmxXwFKu2F
UI9WZVPNuF4z0jalXHSYPCn9uSdhn+RRWTf/mbWzqztYppo2ve2AR5/7sy9O
6eUst+ou/tRd7m3wJ07gh/nIm6y3X/61A4l8C9ctu1JvUhurjpAXsd865YnX
g3MsHFmgVjnLrDpD3sO+tcOEu9v3sfBj9z/hjOdZdYi8hr3zn48e8U22cPD1
wsuudladIm9hnx+dsDpSbOEze9/cHphp1THykjlPNb9/YvJvLPx02n0LYmes
Okfewe7xb+vrXWLh5W9uHe7sdcjwKHmSPMh9yn3Idcp1yHi4euPntz552dLp
mtaLVro75lr5sKCwZ/xC1OAZ2273uw/sNvhUszVPBzvsNThj7LNN4rNjBi/e
ebHUdT7/Z5unJp7B9BXoOW1D9le+/VacPjyvTr34RKvvx49xPLcbR5/BuPxX
hrUOTrLed/DJvFHJLuucQB+B/+Q7Os+PtLfsU88sy3cVWecI+gT8229KuSEe
t+yPZo91e2cdM5g+AP+ioYd9ybMte3G3bh8GulrnBOo8/jMb5+x1PWnZg+ca
3RE+a50jqOP4d8kdn+49Z9m7Lix5Pbbo1HV8whPP7XjCH56w2/GEPzxht+MJ
f3jCbscT/vCE3Y4n/OEJux1P+FOXyOPkafIyed3Uy8q8zn0u5y3exzmBPMA5
wNwTVt5TMI73MM7ES2Wdog5Rp4gv6pQ8p5n8VjkP89rVjZrqRE11oaY6UFPe
rynPg9skGhS6Kn73/eOZSM7ZFerm7q/dGdXnkGEF62pl6T6kYEHR016t83um
X12aqs8ln53r8feE1vWpZncv9eq8P+2p/6wOaF13H7vpL2F9rhi8sGmJQ+t0
8c6B3ZJ0Heh0YWKTsNbxtXvr3JWpzwkNnzntceu+//nXlp0IVfwev6jvxJjW
bf4r93j9FffpFzes9ek+ftId57eGdJ2Y2+OB0+Vap65Nua2iuo8fuXh6i6Du
y48OnT03ofv4jEs/9nVqXc5oPLhWqu7Lm/V88a2I7rPTc9sPces6cn7JVxs9
WocnR9z0nU/32TsuP3K+SPcD81L3Px7UdQU90jewb3hgn+ybfbFP9sG+WDf7
YJ2sm3WxTtbBuvgOfBd45zvAM7zDKzzDI7zCGzzCE7zBCzz9HzZXo1g=
   "], {{
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      0.3], EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNWHm819MWPfukRLjSpDTcXimVSpRIV4OG20xXuc2DokiRkPCS9DLLMw+R
JGQMlQiZIkqUuTlDmd78DI+Htax1P9cf+7f39/z22eecPZ29T8OxUwZOziml
2/FTAbhdpPQa8CTAXwGTAcMAa5P+rwi4CXA2YDhgnccqA24BTAWMAGwE7Aeo
CjgAsA9gX8BtgGmAkYANnref/6ecSoDxgM6AHoCD/P/+gOqWVQC4A3A+YBTg
fa9TC3Cwac6rbVzN8yt7nUMsqwbgLsB0wGjAR5ZRH9DgD/IKjWv/QRb30dBj
dQB/MqbsRsZ1ATkkqynPFpJ1GGAM6NGAbaA3e80mgFMxNhawg/oKrdGM5wjJ
bQGoCbox8OGABYCLAWOpU4yPAJzK/YX21Nz7quYzj8f4OMAu0CcAjgN0BJyJ
sTMAe0D3B/4V+Cvb4RjAsYCJGJ8A+AL06cCnAT4DPc48nQB3A2bwfIBull1E
fYC3DuB40F0BHbx2F8vu4HO1sP7G+nw8Zy/P4X57G1N2A/DXB3QHfRqgJ6Av
oJ/pYsAAz+e8puBtAjgR9EDz9QeUGJO3EfUG6OOxYs8v9l65jwmeP4j2AG9z
wMnUD2AwoBTQGmOtAKeAfhFwBmAIYEVSPDHmTvceTkqKJfo/Y2x9Ulzt7TH6
LH13hGnGyDtJ8VPFaw70OchH/yyLqQP8PdL0vv6mPxzkser+Hp3ktzU8n/8z
lj5Oio16SfFG/gL/x7iolcrj7WDLquPv6pbJ7w+SYrWm7dPZOuV8xghjgD7P
+ChM5XHVMJXHFb+3JMXMoV6jYSqP0ULLGmN+xuCmpHx0YFJcNPMcxlRzy2Rs
NvVcxmwT7+fNpNy3F2AxYGZSfNGGk22v0Y5XxsBYxxZ9epzjg759muOGPs84
Y2wV+Zv+3NVzulgvHTzG7wcBs5LibIJjlHG1KilOWvq7m2UtAcxO5XmUuu5h
WcX+puwyvy6Lq14+A+cwlh8BzEnlsUVf7es5/f3NOQP8zbgZYFmM9W4+42OA
uanc3+mrJ6Xy2BtooB8zphhPg/3fgJCuqecnAFcmxd+UpJjh+JOAq5Pi72nA
tUnxdiTmrk6Kv7agjwKcCfos2w+fv8doqddmLultPVa0fMbahUn+RF86NymW
GEcHmGYs0M8ZG4wdxt0I85xjmnLOMw/5mYdKrLtGls9cd5FtSpo+P9rrXmCa
8tcArvf+R/gOaQ9YmeSbrQCXmm5vm44zfZnpTrbzeNM9bWf6yVXWMW1xhe12
km00wfRfzE9/uNxyOPcY7Gce8J+t04mWM8Q2oa6vMz0UsDzJJkN9pkk+1w22
E+l+3gPXutG2r2D7nG3d3mxdV7K+p1r/t9pmpK/xfkptt2m2xe22TYHtc771
PN+2r2v7zLBdqL9Z1idtMt08D1m/1Oc9tiX57wNckhSn91s3rWyfmaYfsM0o
k/a/2PxHQwGLPJ86nm35T/k8PMujtkdf62muadrqStuLtppjGz1sm5F+3DYm
z51JflbD9rnW8pfZZkOtv6tt06VJvjLIZ5rns0yy/cI2ZB05zHa76Q92u9n2
mmo70UaTbeMKtucttidteJvtxj3eZd1Ps/0KbIf5tsVqwKveM214t21Imyyw
jmfbZp2s7/usc+p6kWnaZLFt9RNgIW2S5CN3WlczbVeenT5C2ze2jpfYbnOs
d+qcPsKcXuZHtD3tTh9kXTvK9nzEdptrG9OmtPmTtsNzSTHPdUeF6r+Vts9S
24X1xrO2BW3FHDrB9nzadn7GfNl2WmF+xuUy65C+QJ8rtbw15nnJ+yjbw8vA
rZPupueTajiu8aLl0Nd4H9BPXzAf9TzPslrZNqs89xXPZf7oF/oe4rHVlkkf
px/Th9+w3Ja2/3LzLPJ/HP806Y5uwzmh+535/q2k+553/YkhmjoZGOJjTfZ2
Un3G2uzkUB1GelCoHmPd9G7SeBXPXW+ZJZbBGm1rUh3DGmZwaD5rlPeS6pUD
Pb7JckpZS4bqpyHGrJs+TKqrano/Jd7H0BAf67ZhxqxnPkmq5+qZ52PPHR7i
Y111ivfC+u7npLEm5tniuQG6p+v5fwO22+7sa0gfkXTv7Eiqa+jf2zy23TT5
d5qH/OxNaJsjPYc2Yh30X9uM9mJ/tNP0fzz/CNtrgG35eVLdRTk/AL4EtAXs
TqrBjkqqu0izbmJfs9s87Gs+N893lkU533v+Ud7TZ5bBvony2wG+Tqrr2lku
67Qir7/H8ovMQ7396DnkZ89F+mj717f2GfrR3+xj9IW/2x9o83/YT2iTf9ku
XUJ75T6LQrqjrjqFzvO7bkM2a21f+Kd9oBbGD3YPdkJId229x/95b8Q/md5s
/6AP/2K6ifH/PX5cyE60UXJfybk9Qt+kORb2pbL6m75aIUSzLu8e0lc7/1/B
NXpF003Nv5fHWc/v7fF9TLOvYK3PHoD1P8cqebwgNN7c45U9t0qoJ2HPQFzF
/Pubbmae/Tze0HyFtvOvtjVlF5ifemavy/zG2o99CPdVLURT/zVC3y28twM9
t6rlNPe8aqYLfWbqj7JreW5t02W9NP9r5LWqey7z3DdJuY57Ze1eZMy+nf01
Y72ubcSxeh5nvcy6mf1yXfOTp5vnk6e7eTjGepd9Antw9u8NPbePxymvMPRf
2bwG5ikO/dfdvI0sh703ewbW0/xmbc11Skzz/8NC/T//57xDTfcCbmz5TcxD
/saWz/HBln+KcQvT5G1m/t6hNShzof2bvn24+clD3NJz2XfwjYB32RGmOd4+
VEOznio1H3ledtwyZvuG5pCf9yH7HN6HvOvY5/DeZi3NtzzWYq8n1ZGsa7hO
G8vsE9of98ac3CEUp11D8c/Y7xjKI8whzMHHh3II82LnUJ7Zab42lnGc5ZC3
k/nLzkxdMh92C8UycXfTu712W8vuYvm8+5jvmOvod8X2gU1w2B9CNdp64Puy
9PsOYHHWOa8B9Mx60/wA9JKsPnAT5WfVEG+CXpBly5cAt2at8yrgjiwffR0w
P8tv7gScm5VznwB9WVb+Yo9/uvd8I/CUrNx9PeizsmLsOtAds2qoG0Dz8ZW5
nvcJ5/NO4f3NeoB5nvc573Xmf9YOrEMq2ha8L3lH8r5gnbHO+aa/fY/n6WP7
ct+97Z/UUV/7z83AZ2fdK7xfWHPw7md9wTqgqvfDfVT2Hkq8n43moV14T3Gf
G7xH7mcvn2Owz7LR36yRbgU+J+sOux301Kx7aD7jBfS9oGcBP45v3hNzQD8Z
yvczQT8WunNuAr0qlOfuATyeVcd/xbNn+fwttHMoP/Gd+5VQHvkW8FRWrF0B
/HTorvgQ8GBWHM0G/W5Wf3AD7RbKzYsAy7Lq/uuAnwnl5qtBLw/dDzNAPxy6
t+iL/Rx3S3mWrFinPz5kn+TbzkT7P+sFvhMVOdboV/SRrzzezvhM03cDt8zK
PYwvjlMG11kYWov1Dtfo6Fib6LG7wLMmlPPuAb02lMv2mJ/7WYjxdaF8UR30
zqw+4wv7LX3+foxtCOWmr+2H3O9a+wT9gf0F6zTeNa/hZ2uoF3wF9OZQ/7ce
9Oehfm4b6EpZ/RPt8GXIFguAW2XV9d2BPw7lukLGa1Y/sQF4d6gnW8s9h/rF
daAvCvWRb9P+oR7xLdCfhnq7d0DPCvWL9JFvQn7yOujtoZ6V/tXfPvYy8KRQ
v/s8cKes/mcF6Guz7u/NwN+H+sVnQT+XlSOXA6/Iyp2rOC8r/11Ev8uquVYD
v5SVL18AfjErV64EzMu6y58BXpmVi5cCLs+qh5YBrsqqUZ4D3JhV5z3KM2XV
al2BT8i6Z7Yyn2X1x0+BZ25WPbQF+OdQz0qf3Wi/Zax8FIoX+kUN+8aOpPfQ
Y41Zu7fxON9MeUewL2Gfwl6G76XMaUc6H44zvTNpLuft8ngHyxhjObu8BuWz
nmE/sNa+dqL9jXcc+bel8v/4zsC7hXfM+6m8v6rp3MZx5rcdtGFWr7nNa7OX
ob7Y97LvfgP/nxd6q1gDemroDYNvB3ynYw/0KsanhN5CtoOuktXf7wKuk9Vn
vwk8PfQewJ6e8lt73RGmWfOzH2MNvtJ8p6byfq+eeUdGeZ3Pfo//bzZPfePh
5ue5h/rse0IxQP+vnbU/7u2LUMwwXj6kT2X19CXAA7N66A+A9856wxgMPCir
b+4AfGzWe0MR83To7aAf832oTpkWijHG146QTqnPWozxrPeP7xxLjKMLQrHN
uH4Y+L3Qm8Vw0MOy+un2wO+H6qP36O+hNxje66z/WOMNwXhpVu++LWQ/2m5y
KDcxL01nrg71V5+EYp7xfiHwklC/dE4orzGnHZ6Vl5mTLwD9YKgHOx/0A6He
bBTokVl9fPOs++9e6gH0/aE+7TzQi0N9FHVQ03rYEvYn+i1wznpzujSU+5j3
fgmdmef9MVQzXQqaAbHVMd6NsRyqJT8BfUjW+1BBlt/T5ytkrUH5fbNsRnt1
Bn4h9OZyEPNA1jtTD+BeWXVX5SyfoD/sm+X39PlLQrmeeX488Lisd5HPQjma
+Xks8Jisd4virFzPPF8x627gvbB/li/SD+tmnYH7H5C1V+6TNWAP74d7rOp9
Pka/Dr1X/uQcx/w2I3Qf8C5oAFw/q6beFYpPxuZvYZg9MQ==
         "]], 
        PolygonBox[CompressedData["
1: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
         
         "]]}]}, {}, {}, {}, {}}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
     LineBox[CompressedData["
1:eJwl0llTT3EAx+GjF8JYsjXjmqahm4qSFtpsUblT/1a0074nkX3iBSg7bS5C
2cslRfbtVfSccfGZ53x/5+r85qwuiGSWrAiCYEq9Hj5qOioIjnMNw5dPucCz
WtQzO8K1LONzfuI5fdaMXc51rOQsl3heX/TCrmI0T/Ilv3JI3/TKPsX1rOFr
fucl/dAbu5YbWM+3/Mkr+qV3dgM38jTn+JvX9Efz9hluYjPf8y+HNer5H1O4
R2narVTddH6bN7iF6YrXE3s7p7iD3eG3cjK8E05wkF0c4Dj7ORbeKTvZx8fs
4SP2soPdfMhOPmAX29nB+2zjPbazja28y2beYQtb2cgR1vMWG9jCzbzOGDbx
GItUqKt2BRtZwKM6ost2OeuYz8M6pIt2Gat5kAe0XxfsUp5gHnOVo0E7wgpm
M0v7NGCXsJR7makM9dvFLGYst2mr+uw4JmuVVobfqB7nSUzULu1Ugj44H4n6
/78vA/YaZ1A=
      "]], LineBox[CompressedData["
1:eJwl0sdOVGEAhuHDiF1RbFgT2EsQRF0QFpYr8BJcKJbgRqToArgHBCxYhiaQ
oIgVFLFiB8EG9q3YsYGKzx8Xb57z5Z+cmTkzaZt2bsxPiKKoU3EXObEoWqf1
+mDvYh0384zO6qNdwHpu4Tmd1yd7NxuYxwvq0Ge7kI3cyk5d1Be7iMe5jZfU
pa92MZu4nZfVrRG7hM3cwT3aqxZ7OWuYzm8sYytLeYLlHOW+cD9WhHuykuOs
5lVW8Rr3M1EHdcM+wJs8xKk6rFt2DW/zCJN0THfto7zHOOeGZ6gHdi17Wc+F
2qCHdgP7uZbLtEaP7BY+ZlN4TuG1emI38imbOcClHNQSrdYivdVi9TlP4TMt
0CrN0xvN133nc8L9lKxszdJrzdYd5zPD+2qGVmqaXmm6epxPCZ9Tk5WliXqp
SbrufEL4PoopU5FeKEFXnP/VgOs/XMExPudvdumX+u2fzOB3DvFHeKY67fo9
T3GYJ9kWfg/X7UxVmt7ZubH///V/SAluPg==
      "]]}}],
  AspectRatio->1,
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{Automatic, Automatic},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "ScalingFunctions" -> None, "TransparentPolygonMesh" -> True, 
    "AxesInFront" -> True},
  PlotRange->{{0, 1}, {0, 1}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.619154099027338*^9, 3.619154166603335*^9}, 
   3.6191542126756687`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<prob.pdf\>\"", ",", "prob"}], "]"}]], "Input",
 CellChangeTimes->{{3.6191542162195587`*^9, 3.619154230379076*^9}}],

Cell[BoxData["\<\"prob.pdf\"\>"], "Output",
 CellChangeTimes->{3.619154232096808*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "/", "2"}], ")"}], "*", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], " ", "+", " ", 
      RowBox[{"2", "*", "x"}]}], ")"}]}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", "0.5", ",", " ", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6191513172333527`*^9, 3.6191513173703747`*^9}}],

Cell[BoxData["0.125`"], "Output",
 CellChangeTimes->{{3.6191511522587347`*^9, 3.619151157936254*^9}, 
   3.6191513181875343`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"x", "-", "y"}], "<", 
    RowBox[{"(", 
     RowBox[{"1", "/", "2"}], ")"}]}], ",", "y"}], "]"}]], "Input",
 CellChangeTimes->{{3.619150952215646*^9, 3.619151010216682*^9}, 
   3.6191510798295593`*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Solve", "::", "fdimc"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"When parameter values satisfy the condition \
\[NoBreak]\\!\\(x \[Element] Reals\\)\[NoBreak], the solution set contains a \
full-dimensional component; use Reduce for complete solution information. \\!\
\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/Solve\\\", ButtonNote -> \
\\\"Solve::fdimc\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{{3.619150997341875*^9, 3.619151010674999*^9}, 
   3.619151080628254*^9}],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{{3.619150997344397*^9, 3.619151010677972*^9}, 
   3.619151080632505*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{"1", "/", "2"}], ")"}], 
   RowBox[{"(", 
    RowBox[{"1", "/", "2"}], ")"}], "*", 
   RowBox[{"(", 
    RowBox[{"1", "/", "2"}], ")"}]}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.61915080540086*^9, 3.619150811813857*^9}, {
  3.619151366332924*^9, 3.619151380453558*^9}, {3.619151533873526*^9, 
  3.6191515359409857`*^9}, {3.6191515696753187`*^9, 3.619151590735708*^9}, {
  3.6191517308707523`*^9, 3.619151732750146*^9}, {3.619152232974028*^9, 
  3.6191522331471767`*^9}}],

Cell[BoxData[
 FractionBox["1", "8"]], "Output",
 CellChangeTimes->{
  3.619150819050321*^9, {3.6191513699710712`*^9, 3.6191513811588373`*^9}, 
   3.619151536957244*^9, {3.6191515798489847`*^9, 3.61915159146905*^9}, 
   3.619151733794216*^9, 3.619152233631407*^9}]
}, Open  ]],

Cell[BoxData["z"], "Input",
 CellChangeTimes->{3.6191508402022467`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"avgWait", "[", "n_", "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"Block", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"randtime", ",", "\[IndentingNewLine]", 
       RowBox[{"timelist", "=", 
        RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", "0"}], ",", 
        RowBox[{"i", "<", "n"}], ",", 
        RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"randtime", "=", 
          RowBox[{
           RowBox[{"-", "30"}], 
           RowBox[{"Log", "[", 
            RowBox[{"RandomReal", "[", 
             RowBox[{"{", 
              RowBox[{"0", ",", "1"}], "}"}], "]"}], "]"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"timelist", "=", 
          RowBox[{"Append", "[", 
           RowBox[{"timelist", ",", "randtime"}], "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Histogram", "[", 
          RowBox[{
           RowBox[{"Select", "[", 
            RowBox[{"timelist", ",", 
             RowBox[{
              RowBox[{"0", "\[LessEqual]", "#", "\[LessEqual]", "120"}], 
              "&"}]}], "]"}], ",", "24"}], "]"}], ",", "\[IndentingNewLine]", 
         
         RowBox[{"Plot", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"1", "/", "30"}], ")"}], 
            RowBox[{"Exp", "[", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"(", 
                RowBox[{"1", "/", "30"}], ")"}]}], "x"}], "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"x", ",", "0", ",", "120"}], "}"}]}], "]"}]}], "}"}], 
       "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.619126793631844*^9, 3.619127213261245*^9}, {
   3.619127274789469*^9, 3.619127375228982*^9}, {3.6191275255947123`*^9, 
   3.619127534140482*^9}, {3.619127595982956*^9, 3.619127597860767*^9}, {
   3.619127781436771*^9, 3.619127787534225*^9}, 3.619127827596531*^9, {
   3.6191278613344517`*^9, 3.6191278616376743`*^9}, {3.6191280346291656`*^9, 
   3.619128036856372*^9}, {3.619128070951416*^9, 3.6191281215217733`*^9}, {
   3.619128195895732*^9, 3.6191282077382307`*^9}, {3.6191282576207047`*^9, 
   3.6191283275234003`*^9}, {3.6191283714629593`*^9, 3.619128390055686*^9}, {
   3.6191284888578577`*^9, 3.619128512451853*^9}, {3.619128792995064*^9, 
   3.6191287931836767`*^9}, {3.619129191360023*^9, 3.619129201649678*^9}, 
   3.619129260701243*^9, {3.6191293185177402`*^9, 3.6191295126067257`*^9}, {
   3.619130974416231*^9, 3.619131013194537*^9}, {3.619132258280662*^9, 
   3.619132296703549*^9}, {3.619132380308888*^9, 3.619132411374262*^9}, {
   3.619134554190009*^9, 3.619134569157797*^9}, {3.6191346716612597`*^9, 
   3.6191346933548107`*^9}, {3.61914966359864*^9, 3.619149670488266*^9}, {
   3.619155382491012*^9, 3.619155405201045*^9}, {3.619155703055524*^9, 
   3.619155704929793*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"hist", ",", " ", "plot"}], "}"}], " ", "=", " ", 
  RowBox[{"avgWait", "[", "10000", "]"}]}]], "Input",
 CellChangeTimes->{{3.6191273842927628`*^9, 3.619127393063014*^9}, {
  3.619127486693265*^9, 3.619127499337412*^9}, {3.619127659962384*^9, 
  3.619127682630163*^9}, {3.6191285438688393`*^9, 3.619128553589616*^9}, {
  3.619134573121778*^9, 3.6191345797809896`*^9}, {3.619155409549266*^9, 
  3.619155409899847*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[{
     {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
      Opacity[0.5319999999999999], Thickness[Small]}], {}, 
      {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], 
       EdgeForm[{Opacity[0.5319999999999999], Thickness[Small]}], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{0., 0}, {5., 1560}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{38.89338235294119, 
            46.718137254901976`}, {-64.1253834498995, 39.95498438197053}}],
          StatusArea[#, 1560]& ,
          TagBoxNote->"1560"],
         StyleBox["1560", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[1560, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{5., 0}, {10., 1319}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{46.093137254901976`, 
            53.91789215686276}, {-48.14285547074522, 39.95498438197053}}],
          StatusArea[#, 1319]& ,
          TagBoxNote->"1319"],
         StyleBox["1319", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[1319, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{10., 0}, {15., 1086}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{53.29289215686276, 
            61.11764705882354}, {-32.69086783944668, 39.95498438197053}}],
          StatusArea[#, 1086]& ,
          TagBoxNote->"1086"],
         StyleBox["1086", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[1086, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{15., 0}, {20., 902}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{60.49264705882354, 
            68.31740196078434}, {-20.488439838764577`, 39.95498438197053}}],
          StatusArea[#, 902]& ,
          TagBoxNote->"902"],
         StyleBox["902", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[902, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{20., 0}, {25., 756}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{67.69240196078434, 
            75.51715686274511}, {-10.806078490397255`, 39.95498438197053}}],
          StatusArea[#, 756]& ,
          TagBoxNote->"756"],
         StyleBox["756", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[756, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{25., 0}, {30., 675}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{74.89215686274511, 
            82.7169117647059}, {-5.434357468357845, 39.95498438197053}}],
          StatusArea[#, 675]& ,
          TagBoxNote->"675"],
         StyleBox["675", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[675, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{30., 0}, {35., 594}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{82.0919117647059, 
            89.91666666666669}, {-0.062636446318443, 39.95498438197053}}],
          StatusArea[#, 594]& ,
          TagBoxNote->"594"],
         StyleBox["594", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[594, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{35., 0}, {40., 473}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{89.29166666666669, 97.11642156862747}, {
            7.9617863149996815`, 39.95498438197053}}],
          StatusArea[#, 473]& ,
          TagBoxNote->"473"],
         StyleBox["473", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[473, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{40., 0}, {45., 393}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{96.49142156862747, 104.31617647058826`}, {
            13.267189793557119`, 39.95498438197053}}],
          StatusArea[#, 393]& ,
          TagBoxNote->"393"],
         StyleBox["393", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[393, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{45., 0}, {50., 339}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{103.69117647058826`, 111.51593137254905`}, {
            16.84833714158339, 39.95498438197053}}],
          StatusArea[#, 339]& ,
          TagBoxNote->"339"],
         StyleBox["339", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[339, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{50., 0}, {55., 293}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{110.89093137254905`, 118.71568627450982`}, {
            19.898944141753915`, 39.95498438197053}}],
          StatusArea[#, 293]& ,
          TagBoxNote->"293"],
         StyleBox["293", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[293, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{55., 0}, {60., 257}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{118.09068627450982`, 125.91544117647061`}, {
            22.286375707104764`, 39.95498438197053}}],
          StatusArea[#, 257]& ,
          TagBoxNote->"257"],
         StyleBox["257", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[257, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{60., 0}, {65., 215}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{125.29044117647061`, 133.11519607843138`}, {
            25.07171253334742, 39.95498438197053}}],
          StatusArea[#, 215]& ,
          TagBoxNote->"215"],
         StyleBox["215", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[215, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{65., 0}, {70., 187}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{132.49019607843138`, 140.31495098039218`}, {
            26.928603750842523`, 39.95498438197053}}],
          StatusArea[#, 187]& ,
          TagBoxNote->"187"],
         StyleBox["187", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[187, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{70., 0}, {75., 138}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{139.68995098039218`, 147.51470588235298`}, {
            30.17816338145895, 39.95498438197053}}],
          StatusArea[#, 138]& ,
          TagBoxNote->"138"],
         StyleBox["138", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[138, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{75., 0}, {80., 139}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{146.88970588235298`, 154.71446078431376`}, {
            30.111845837976986`, 39.95498438197053}}],
          StatusArea[#, 139]& ,
          TagBoxNote->"139"],
         StyleBox["139", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[139, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{80., 0}, {85., 108}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{154.08946078431376`, 161.91421568627453`}, {
            32.16768968591799, 39.95498438197053}}],
          StatusArea[#, 108]& ,
          TagBoxNote->"108"],
         StyleBox["108", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[108, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{85., 0}, {90., 92}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{161.28921568627453`, 169.11397058823533`}, {
            33.22877038162948, 39.95498438197053}}],
          StatusArea[#, 92]& ,
          TagBoxNote->"92"],
         StyleBox["92", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[92, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{90., 0}, {95., 61}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{168.48897058823533`, 176.3137254901961}, {
            35.28461422957049, 39.95498438197053}}],
          StatusArea[#, 61]& ,
          TagBoxNote->"61"],
         StyleBox["61", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[61, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{95., 0}, {100., 60}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{175.6887254901961, 183.5134803921569}, {
            35.35093177305245, 39.95498438197053}}],
          StatusArea[#, 60]& ,
          TagBoxNote->"60"],
         StyleBox["60", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[60, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{100., 0}, {105., 63}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{182.8884803921569, 190.71323529411768`}, {
            35.15197914260655, 39.95498438197053}}],
          StatusArea[#, 63]& ,
          TagBoxNote->"63"],
         StyleBox["63", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[63, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{105., 0}, {110., 45}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{190.08823529411768`, 197.91299019607845`}, {
            36.345694925281975`, 39.95498438197053}}],
          StatusArea[#, 45]& ,
          TagBoxNote->"45"],
         StyleBox["45", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[45, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{110., 0}, {115., 39}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{197.28799019607845`, 205.11274509803926`}, {
            36.74360018617378, 39.95498438197053}}],
          StatusArea[#, 39]& ,
          TagBoxNote->"39"],
         StyleBox["39", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[39, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{115., 0}, {120., 20}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{204.48774509803926`, 212.31250000000003`}, {
            38.00363351233118, 39.95498438197053}}],
          StatusArea[#, 20]& ,
          TagBoxNote->"20"],
         StyleBox["20", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[20, {}], 
         "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{-2.4, 0},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    PlotRange->{{0., 120.}, {All, All}},
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", 
   GraphicsBox[{{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwVzX080wkcwHHnXNRRHgqViigljzWu3EvfL34jsh1jmPxyW4kyT1moq3mR
JS+9VMitPDSr1MnycOjSAy3lqaumy3aKFo2ULg9Teehc98fn9f7zY8GJZ0Rq
amho0L72vx/72lusclq2CoJqpvQNymDK04nrrhCDNG2osv77MohsHGKaKmqh
zViwMHxeGRRNSju+VUghNqSnRzIjApd8R8GUvAtWGjhlRw6KQIsTxVHL+yEe
trRa3RJBTLumbEw+Dpmrzq59GS2ClUf8j4/KNZHCXNhFyz0PrdOUX2ViI/Qc
UCktZ4qh4kJTF8d2BRbYs3XoLefA8qZ9ibanJTK906+XS4XASi6uoDPXoW7x
7K2h5kJQWftUjunb4XL7uWoj7TNQyey4p7nUCf3ml+hq0fPh6Sve4fySTVhf
ZaRj23wa1gxvdej66IzEbG/Fl72nIIaloLdnbMb+vgu9c9a58II4HR034Irq
fmXnw+c5cHOaTlu22Q3fX3Z1qH2QDblLX5TymwBBYNaENVnwgEUcaNNzx6wc
y4WpgwKAHRkyO6YHLqDM7fcyy4QPdz3yCws9MW2sO3KInwGUQUNGsJTAzPh3
HjuWp8PEHV/v/dpeaEI6VFfHp8E2Zt4WlYs3si5sVLvoHgETkTunLm0bak48
Tv782yFY4Z80ekzqg33zu98WHE2FP27X/VL9wRerVGkU54pk+PMl6ebi4oeq
voNXXWU8SGkynjWMoqGzvtNJvmsShGoxzCdO0zG1VJ2qak+E37+oDzl0/4Qj
BjbTNqwEYPQE7mVn+CM1t6x12eY40NFnO7LWBqBhzNPLvXdigJXqUMFoDcCd
3ESZ+OheONAkEKeQDGwZF25nCKPgkXJRg69GIF56FfbESRIJ40qLbT7CQBwY
5vC65+2GGqPJEz52QWi6YEGS1nEOSMxnRz49CsLGYK3pfh028HRzOmWRTIyK
ELo28SMgtYt2nzU/GBNYRSm8kXDwThG66YmDscDuojyiIQxq6BejpT+E4OIS
iYpbHwqhGq+vrekJwZOxf8Un1AVDx6mrSXWJoUjj+pUSM0FwcKY8cGwJC60p
lIE3HoFwT7hr0OE6C/8t4sVerw8AxeIrn87SwtDsfsus6c/+YBNjblU7GoaO
1hxV9BI6eIvMH08e34FLZIXnt3ZshzntftsfV4bjjc97Upc2+IDaR37Jvjkc
xaFVwZVl3lC3L6iEFkIiW9yS0iKnQrNmw55RFomBdyYKTJ9QofOciWN+OIle
/Je74tuo0N/RI1WwSaz1sjJac4MKBhvYb3ZxSbxvMlVcfY4Kce9iNx1KJ9HO
tTDHeycV1nOz2suvktjV/V1Q3BABFK3hPJ9rJM5zlv1trCQAi33DR6pJVOrW
TdxVEBD6UO+DUwOJq9ZZKFd1EHDMtmDx7WYSr3QGZExXEvB6RBTx9BmJsREv
VtskETCaqbk+WUFi4rgVfyaGgBmz3eOmz0l8dN4u4vFuAgxp1oKdShL/iVFf
4wcT4C6RVAy/JTHcooQ7s4UAP+oi3on3JHKr1vcqN3799ya4OYySKJBEP2zb
QECCHuUJb5JES60jlqIVBBy+dOasyWcSxeV52SeNCchy+8RpnCZxyO/5vvRF
BOQ9C7Ulv5BIV6Y8OKBDQGls4+TcHInHhNlF3G8I+A/Xxz4Q
       "]]}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0, 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
    
    PlotRange->{{0, 120}, {0., 0.033333330612245006`}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.05], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.619128141073258*^9, 3.619128342072209*^9, 3.619128394985565*^9, {
   3.6191285188162003`*^9, 3.6191285558274717`*^9}, 3.6191292083197536`*^9, 
   3.619129265643938*^9, {3.619129328169529*^9, 3.619129388020941*^9}, {
   3.61912942200152*^9, 3.619129441575857*^9}, 3.6191294810144587`*^9, 
   3.619129644416312*^9, 3.619129732549159*^9, {3.6191307834423723`*^9, 
   3.619130794696477*^9}, 3.619130986689457*^9, 3.619131017980042*^9, {
   3.6191322783198423`*^9, 3.619132300592635*^9}, {3.6191323856044693`*^9, 
   3.6191324071183643`*^9}, 3.619134581342798*^9, 3.619134698121819*^9, 
   3.619149678704911*^9, 3.619155411816753*^9, {3.619155709729436*^9, 
   3.6191557287911158`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<exp.pdf\>\"", ",", "plot"}], "]"}]], "Input",
 CellChangeTimes->{{3.619134719842688*^9, 3.619134751489046*^9}, {
  3.6191349352631197`*^9, 3.619134936409258*^9}, {3.6191350084049253`*^9, 
  3.61913501409706*^9}}],

Cell[BoxData["\<\"exp.pdf\"\>"], "Output",
 CellChangeTimes->{3.619134753215197*^9, 3.6191348094845047`*^9, 
  3.6191349373247538`*^9, 3.6191350151992064`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{".01", 
    RowBox[{"Exp", "[", 
     RowBox[{
      RowBox[{"-", ".01"}], " ", "t"}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "1000"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6191396875043373`*^9, 3.619139816221752*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1: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
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{0, 1000}, {0., 0.004241074834243744}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6191397070217543`*^9, 3.619139712069512*^9}, {
  3.619139768574952*^9, 3.61913981686579*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"SystemOpen", "[", 
  RowBox[{"DirectoryName", "[", 
   RowBox[{"AbsoluteFileName", "[", "\"\<barchart.png\>\"", "]"}], "]"}], 
  "]"}]], "Input",
 NumberMarks->False],

Cell[BoxData[
 RowBox[{"SystemOpen", "[", "\"\<barchart.png\>\"", "]"}]], "Input",
 NumberMarks->False],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "/", "30"}], ")"}], 
    RowBox[{"Exp", "[", 
     RowBox[{
      RowBox[{"-", 
       RowBox[{"(", 
        RowBox[{"1", "/", "30"}], ")"}]}], "x"}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "120"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.619127329650424*^9, 3.619127336699361*^9}, {
  3.619127463922781*^9, 3.6191274756875668`*^9}, {3.619128678689539*^9, 
  3.619128738867569*^9}, {3.61912879795168*^9, 3.619128801860297*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1:eJwVzX080wkcwHHnXNRRHgqViigljzWu3EvfL34jsh1jmPxyW4kyT1moq3mR
JS+9VMitPDSr1MnycOjSAy3lqaumy3aKFo2ULg9Teehc98fn9f7zY8GJZ0Rq
amho0L72vx/72lusclq2CoJqpvQNymDK04nrrhCDNG2osv77MohsHGKaKmqh
zViwMHxeGRRNSju+VUghNqSnRzIjApd8R8GUvAtWGjhlRw6KQIsTxVHL+yEe
trRa3RJBTLumbEw+Dpmrzq59GS2ClUf8j4/KNZHCXNhFyz0PrdOUX2ViI/Qc
UCktZ4qh4kJTF8d2BRbYs3XoLefA8qZ9ibanJTK906+XS4XASi6uoDPXoW7x
7K2h5kJQWftUjunb4XL7uWoj7TNQyey4p7nUCf3ml+hq0fPh6Sve4fySTVhf
ZaRj23wa1gxvdej66IzEbG/Fl72nIIaloLdnbMb+vgu9c9a58II4HR034Irq
fmXnw+c5cHOaTlu22Q3fX3Z1qH2QDblLX5TymwBBYNaENVnwgEUcaNNzx6wc
y4WpgwKAHRkyO6YHLqDM7fcyy4QPdz3yCws9MW2sO3KInwGUQUNGsJTAzPh3
HjuWp8PEHV/v/dpeaEI6VFfHp8E2Zt4WlYs3si5sVLvoHgETkTunLm0bak48
Tv782yFY4Z80ekzqg33zu98WHE2FP27X/VL9wRerVGkU54pk+PMl6ebi4oeq
voNXXWU8SGkynjWMoqGzvtNJvmsShGoxzCdO0zG1VJ2qak+E37+oDzl0/4Qj
BjbTNqwEYPQE7mVn+CM1t6x12eY40NFnO7LWBqBhzNPLvXdigJXqUMFoDcCd
3ESZ+OheONAkEKeQDGwZF25nCKPgkXJRg69GIF56FfbESRIJ40qLbT7CQBwY
5vC65+2GGqPJEz52QWi6YEGS1nEOSMxnRz49CsLGYK3pfh028HRzOmWRTIyK
ELo28SMgtYt2nzU/GBNYRSm8kXDwThG66YmDscDuojyiIQxq6BejpT+E4OIS
iYpbHwqhGq+vrekJwZOxf8Un1AVDx6mrSXWJoUjj+pUSM0FwcKY8cGwJC60p
lIE3HoFwT7hr0OE6C/8t4sVerw8AxeIrn87SwtDsfsus6c/+YBNjblU7GoaO
1hxV9BI6eIvMH08e34FLZIXnt3ZshzntftsfV4bjjc97Upc2+IDaR37Jvjkc
xaFVwZVl3lC3L6iEFkIiW9yS0iKnQrNmw55RFomBdyYKTJ9QofOciWN+OIle
/Je74tuo0N/RI1WwSaz1sjJac4MKBhvYb3ZxSbxvMlVcfY4Kce9iNx1KJ9HO
tTDHeycV1nOz2suvktjV/V1Q3BABFK3hPJ9rJM5zlv1trCQAi33DR6pJVOrW
TdxVEBD6UO+DUwOJq9ZZKFd1EHDMtmDx7WYSr3QGZExXEvB6RBTx9BmJsREv
VtskETCaqbk+WUFi4rgVfyaGgBmz3eOmz0l8dN4u4vFuAgxp1oKdShL/iVFf
4wcT4C6RVAy/JTHcooQ7s4UAP+oi3on3JHKr1vcqN3799ya4OYySKJBEP2zb
QECCHuUJb5JES60jlqIVBBy+dOasyWcSxeV52SeNCchy+8RpnCZxyO/5vvRF
BOQ9C7Ulv5BIV6Y8OKBDQGls4+TcHInHhNlF3G8I+A/Xxz4Q
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{0, 120}, {0., 0.033333330612245006`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.6191287182136507`*^9, {3.619128798950151*^9, 3.619128802535791*^9}}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "Areabargraph", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Areabargraph", "[", 
   RowBox[{"data_", ",", "xmin_", ",", "xmax_", ",", "k_"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Block", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"sorteddata", "=", 
       RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"length", "=", 
       RowBox[{"Length", "[", "data", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"dx", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"xmax", "-", "xmin"}], ")"}], "/", "k"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"currentupperlim", "=", 
         RowBox[{"xmin", "+", "dx"}]}], ","}], "*)"}], "\[IndentingNewLine]", 
      "currentupperlim", ",", "\[IndentingNewLine]", 
      RowBox[{"result", "=", 
       RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"index", "=", "1"}], ",", "\[IndentingNewLine]", "counter", ",",
       "\[IndentingNewLine]", 
      RowBox[{"rectanglelist", "=", 
       RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"linelist", "=", 
       RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"graphicslist", "=", 
       RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"currentupperlim", "=", 
      RowBox[{"xmin", "+", "dx"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"sorteddata", "=", 
      RowBox[{"Sort", "[", "data", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"sorteddata", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "<", "xmin"}], ")"}], "||", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"sorteddata", "[", 
            RowBox[{"[", "length", "]"}], "]"}], ">", "xmax"}], ")"}]}], 
        ")"}], ",", 
       RowBox[{
       "Print", "[", 
        "\"\<Note:  some data values lie outside the user-defined interval.\>\
\"", "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{
        RowBox[{"For", "[", 
         RowBox[{
          RowBox[{"i", "=", "1"}], ",", 
          RowBox[{"i", "\[LessEqual]", "k"}], ",", 
          RowBox[{"i", "++"}], ",", 
          RowBox[{
           RowBox[{"counter", "=", "0"}], ";", "\[IndentingNewLine]", 
           RowBox[{"While", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"index", "\[LessEqual]", "length"}], ")"}], "&&", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"sorteddata", "[", 
                  RowBox[{"[", "index", "]"}], "]"}], "\[LessEqual]", 
                 "currentupperlim"}], ")"}]}], ")"}], ",", 
             RowBox[{
              RowBox[{"counter", "++"}], ";", "\[IndentingNewLine]", 
              RowBox[{"index", "++"}], ";"}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"result", "=", 
            RowBox[{"Append", "[", 
             RowBox[{"result", ",", "counter"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"currentupperlim", "+=", "dx"}], ";"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"rectanglelist", "=", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"Rectangle", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"xmin", "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"i", "-", "1"}], ")"}], "*", "dx"}]}], ",", "0"}], 
              "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"xmin", "+", 
                RowBox[{"i", "*", "dx"}]}], ",", 
               RowBox[{
                RowBox[{"result", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "/", 
                RowBox[{"(", 
                 RowBox[{"length", "*", "dx"}], ")"}]}]}], "}"}]}], "]"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "1", ",", "k"}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"rectanglelist", "=", 
         RowBox[{"Prepend", "[", 
          RowBox[{"rectanglelist", ",", 
           RowBox[{"RGBColor", "[", 
            RowBox[{"0", ",", "0", ",", "1"}], "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"linelist", "=", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Line", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"xmin", "+", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "-", "1"}], ")"}], "*", "dx"}]}], ",", "0"}],
                  "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"xmin", "+", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "-", "1"}], ")"}], "*", "dx"}]}], ",", 
                  RowBox[{
                   RowBox[{"result", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "/", 
                   RowBox[{"(", 
                    RowBox[{"length", "*", "dx"}], ")"}]}]}], "}"}]}], "}"}], 
              "]"}], ",", 
             RowBox[{"Line", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"xmin", "+", 
                   RowBox[{"i", "*", "dx"}]}], ",", "0"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"xmin", "+", 
                   RowBox[{"i", "*", "dx"}]}], ",", 
                  RowBox[{
                   RowBox[{"result", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "/", 
                   RowBox[{"(", 
                    RowBox[{"length", "*", "dx"}], ")"}]}]}], "}"}]}], "}"}], 
              "]"}], ",", 
             RowBox[{"Line", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"xmin", "+", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "-", "1"}], ")"}], "*", "dx"}]}], ",", 
                  RowBox[{
                   RowBox[{"result", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "/", 
                   RowBox[{"(", 
                    RowBox[{"length", "*", "dx"}], ")"}]}]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"xmin", "+", 
                   RowBox[{"i", "*", "dx"}]}], ",", 
                  RowBox[{
                   RowBox[{"result", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "/", 
                   RowBox[{"(", 
                    RowBox[{"length", "*", "dx"}], ")"}]}]}], "}"}]}], "}"}], 
              "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "1", ",", "k"}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"linelist", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"linelist", ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"graphicslist", "=", 
         RowBox[{"Union", "[", 
          RowBox[{"rectanglelist", ",", "linelist"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Show", "[", 
         RowBox[{"Graphics", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"rectanglelist", ",", "linelist"}], "}"}], ",", 
           RowBox[{"Axes", "\[Rule]", "True"}], ",", 
           RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
           RowBox[{"Frame", "\[Rule]", "True"}]}], "]"}], "]"}]}]}], 
      "]"}]}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.619129177333939*^9, 3.619129177334955*^9}, {
   3.6191295882166243`*^9, 3.619129591012373*^9}, {3.619129623345386*^9, 
   3.619129627321837*^9}, {3.619129664881955*^9, 3.61912966768312*^9}, {
   3.6191306134014807`*^9, 3.619130676193837*^9}, {3.6191307313496933`*^9, 
   3.619130774939912*^9}, 3.6191309128669662`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "range of f(x) = -30 Log(x), 0 \[LessEqual] x \[LessEqual] 1", 
   Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, PodStates -> {"Input__Step-by-step solution"}, 
    Method -> {
     "ExtrusionChosen" -> {
       "IndefiniteIntegral", "Indefinite integral", 1, 1, "Input", 
        "Integrate[-30 Log[x], x]"}, "ExtrusionOpen" -> True, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"f[x] == -30 Log[x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"f", "(", "x", ")"}], "\[LongEqual]", 
               TagBox[
                RowBox[{
                  RowBox[{"-", "30"}], " ", 
                  RowBox[{"log", "(", "x", ")"}]}], Identity]}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/mathematica/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox["\"log(x) is the natural logarithm\"", TraditionalForm]],
             "Output", {}]}]}]}]}], Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plotter", "id" -> "Plot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[-30 Log[x], {x, -3, 3}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max3085$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min3084$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3084$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3085$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$764252$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min3084$\
764257$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max3085$764258$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max3085$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min3084$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$764252$$\
, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3084$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3084$\
764257$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3085$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max3085$\
764258$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$3205643[
                    
                    Plot[{
                    Re[(-30) Log[$CellContext`x]], 
                    Im[(-30) Log[$CellContext`x]]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][(-30) Log[$CellContext`x], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3084$$], 
                    (
                    Piecewise[{{
                    0. + 3.2071349029490923` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    3.2071349029490923` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min3084$$], \
-3], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3084$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max3085$$]], \

                    (Piecewise[{{
                    0. + 3.2071349029490923` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    3.2071349029490923` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min3084$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max3085$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3084$$ + 
                    3/500, CalculateUtilities`GraphicsUtilities`Private`\
max3085$$]], 3]}, LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, Ticks -> Automatic, 
                    ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min3084$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max3085$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, $CellContext`UnitNumberForm, 
                    NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat = \
$CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$3205643]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3205643[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines = 
                    ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3205643[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    All, 1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbinv7/APkPiMxsb4hgR0MCYNKEn53lvsNBauHWxnG/\
x58NlN0qxdpZgO0JR+ONWX5vHdc89d78mRjNJ+r9fTV635IDlJb+\
DpsTVDOctlIci701xRrZkU6RV8dtuamJo9yuEHJd533Zr3Us3A+\
PMrfB94UnAw9KthnBlG9WRfQZ6xRNeekWLH9icTLhPg7Cd9urO9tftyd8vDYCwjMIYqoXfaQuaZAk3\
THgJds+YtB/HNHx+\
Vx08F5zH9XlCRUP3AescKiIWRAjjmE3zr5WbqLiZmQBBQ5MJpcvIctr1AG8XEdExnOb5xPlnP2wKDm\
mrPzb2Sm3UK8uHfxAcydjF5j0vanR2BYWFcMvrOyuqfczfA8+\
u28EqerCYO83vDkTcw7JjqZTqfta6TZ6TqWhf9nKuLmi8bDfL8KVP/\
Lx0ybZbD2G4bBp0d2Rqv1t4y/Iu28DLHrp+L+741n72jBFw1HCrBfZSk4PMomikPvETbp6tz6/\
AYdyq+Y3SGVLDCiWycZb+4/nhYgdebQoy1m2xAOqKeARHNqXURx+0emzIzzEBBYoHn1/\
XLJhvLOpSAO9vXngnC7ADzhKxbntAcpAt1B5NkX/6ouJVczjQZ8n4gDJ1StVb0t7A+\
ypIryFgGRhLjBU29BnNYJTUCFSz7QQkS5yAYQrJf9uO++YeLlUCq9hWqS3kWB640p+\
FJ9MsCH1IxNVlzxw4cXcFti9lE8qRWXcTSdHHabI7pfpPpxg3NgR5KQmhJwgd6tyl0m8Jf3RSW9uBu\
TejWhG5N6NaEbk34f9cEFzH+K/0GCW64Rg=="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {}]}], 
       XMLElement["dataformats", {}, {"minput"}], 
       XMLElement["states", {"count" -> "1"}, {
         XMLElement[
         "statelist", {
          "count" -> "2", "value" -> "Complex-valued plot", "delimiters" -> 
           ""}, {
           XMLElement[
           "state", {
            "name" -> "Complex-valued plot", "input" -> 
             "Plot__1_Complex-valued plot"}, {}], 
           XMLElement[
           "state", {
            "name" -> "Real-valued plot", "input" -> 
             "Plot__1_Real-valued plot"}, {}]}]}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[-30 Log[x], {x, -18, 18}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max3087$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min3086$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3086$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3087$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$764317$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min3086$\
764318$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max3087$764319$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max3087$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min3086$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$764317$$\
, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3086$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3086$\
764318$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3087$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max3087$\
764319$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$3205658[
                    
                    Plot[{
                    Re[(-30) Log[$CellContext`x]], 
                    Im[(-30) Log[$CellContext`x]]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][(-30) Log[$CellContext`x], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3086$$], 
                    (
                    Piecewise[{{
                    0. + 19.242809417694552` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    19.242809417694552` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min3086$$], \
-18.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3086$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max3087$$]], \

                    (Piecewise[{{
                    0. + 19.242809417694552` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    19.242809417694552` Tan[1.5040801783846716` #]]& )[
                    If[CalculateUtilities`GraphicsUtilities`Private`min3086$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max3087$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3086$$ + 
                    0.036000000000000004`, 
                    CalculateUtilities`GraphicsUtilities`Private`max3087$$]], 
                    18.]}, LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, Ticks -> Automatic, 
                    ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min3086$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max3087$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, $CellContext`UnitNumberForm, 
                    NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat = \
$CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$3205658]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3205658[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines = 
                    ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3205658[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    All, 1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbinv7/APkPiMYGP7hgR0MCYNKEn53lvsNBauHWxnG/\
x58NlN0qxdpZgO0JR+ONWX5vHdc89d78mRjNJ+r9fTV635IDlJb+\
DpsTVDOctlIci701xRrZkU6RV8dtuamJo9yuEHJd533Zr3Us3A+\
PMrfB94UnAw9KthnBlG9WRfQZ6xRNeekWLH9icTLhPg7Cd9ur31fGd3d8fDYCwjMIYqobfbQuaZAk3\
THgJds+YtB/HNHx+\
Vx08F5zH9XlCRUP3AescKiIWRAjjmE3zr5WbqLiZmQBBQ5MJpcvIctr1AG8XEdExnOb5xPlkv2gKDm\
mrPzb2Sm3UK8uHfxAcydjF5j0vanR2BYWFcMvrOyuqfczfA8+\
u28EqerCYO83vDkTcw7JjqZTqfta6TZ6TqWhf9nKuLmi8bDfL8KVP/\
Lx0ybZbD2GobBp0d2Rqv1t4y/Mu28DLHrp+L+741n72jBFw1HCrBfZSk4PMomikPvETbp6tz6/\
AYdyq+Y3SGVLDCiWycZb+4/nhYgdebQoy1m2xAOqKeARHNqXURx+0emzIzzEBBYoHn1/\
XLJhvLOpSAO9vXngnC7ADzhKxbntAcpAt1B5NkX/6ouJVczjQZ8n4gDJ1StVb0t7A+\
ypIryFgGRhLjBU29BnNYJTUCFSz7QQkS5yAYQrJf9uO++YeLlUCq9hWqS3kWB640p+\
FJ9MsCH1IxNVlzxw4cXcFti9lE8qRWXcTSdHHabI7pfpPpxg3NgR5KQmhJwgd6tyl0m8Jf3RSW9uBu\
TejWhG5N6NaEbk34f9cEFzH+K/0G5Ca4dg=="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {}]}], 
       XMLElement["dataformats", {}, {"minput"}], 
       XMLElement["states", {"count" -> "1"}, {
         XMLElement[
         "statelist", {
          "count" -> "2", "value" -> "Complex-valued plot", "delimiters" -> 
           ""}, {
           XMLElement[
           "state", {
            "name" -> "Complex-valued plot", "input" -> 
             "Plot__2_Complex-valued plot"}, {}], 
           XMLElement[
           "state", {
            "name" -> "Real-valued plot", "input" -> 
             "Plot__2_Real-valued plot"}, {}]}]}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Properties as a real function", "scanner" -> 
     "FunctionProperties", "id" -> "PropertiesAsARealFunction", "position" -> 
     "300", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> "Domain"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               TemplateBox[{"\"{\"", 
                 RowBox[{"x", "\[Element]", 
                   TagBox["\[DoubleStruckCapitalR]", 
                    Function[{}, Reals]]}], "\" : \"", 
                 RowBox[{"x", ">", "0"}], "\"}\""}, "RowDefault"], "\"  \"", 
               StyleBox[
                
                RowBox[{
                 "\"(\"", "\[NoBreak]", "\"all positive real numbers\"", 
                  "\[NoBreak]", "\")\""}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False]}, "RowDefault"], 
             LineIndent -> 0], TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Range"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               TagBox["\[DoubleStruckCapitalR]", 
                Function[{}, Reals]], "\"  \"", 
               StyleBox[
                
                RowBox[{
                 "\"(\"", "\[NoBreak]", "\"all real numbers\"", "\[NoBreak]", 
                  "\")\""}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False]}, "RowDefault"], 
             LineIndent -> 0], TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Surjectivity"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             TagBox[
              FormBox[
               TemplateBox[{"\"surjective \"", 
                 StyleBox[
                 "\" onto \[DoubleStruckCapitalR]\"", 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, 
                  GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
               TraditionalForm], Format[#, TraditionalForm]& ], 
             TraditionalForm], TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement[
       "info", {
        "text" -> "\[DoubleStruckCapitalR] is the set of real numbers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/mathematica/ref/Reals.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/R.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
             "\"\[DoubleStruckCapitalR] is the set of real numbers\"", 
              TraditionalForm]], "Output", {}]}]}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"title" -> "Derivative", "scanner" -> "Derivative", "id" -> 
     "Derivative", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"D[f[x] == -30 Log[x], x]"}], 
       XMLElement["moutput", {}, {"-30/x"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                TagBox[
                 FractionBox["\[DifferentialD]", 
                  RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", "x"}]], 
                 Global`TagBoxWrapper["StringBoxes" -> RowBox[{"d/d", "x"}]]],
                 "\[InvisibleSpace]", 
                RowBox[{"(", 
                  TagBox[
                   TagBox[
                    RowBox[{
                    RowBox[{"-", "30"}], " ", 
                    RowBox[{"log", "(", "x", ")"}]}], HoldForm], 
                   PolynomialForm[#, TraditionalOrder -> False]& ], ")"}]}], 
              "\[LongEqual]", 
              TagBox[
               RowBox[{"-", 
                 FractionBox["30", "x"]}], Identity]}], TraditionalForm]], 
          "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Derivative__Step-by-step solution"}, {}]}]}], Typeset`pod5$$ = 
   XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "500", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[-30 Log[x], x]"}], 
       XMLElement["moutput", {}, {"-30 x (-1 + Log[x])"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   TagBox[
                    RowBox[{
                    RowBox[{"-", "30"}], " ", 
                    RowBox[{"log", "(", "x", ")"}]}], HoldForm], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{
                    RowBox[{"-", "30"}], " ", "x", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "(", "x", ")"}], "-", "1"}], ")"}]}], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0, 
                   GrayLevel[0], StripOnInput -> False], "+", 
                  StyleBox[
                  "constant", FontFamily -> "Helvetica", Magnification -> 
                   0.9 Inherited]}], 
                LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 0, 
                
                GrayLevel[0.6], StripOnInput -> False], Identity]}], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution"}, {}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False, False, False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Function", "word" -> "Log", "template" -> 
        "Assuming \"${word}\" is ${desc1}. Use ${desc2} instead", "count" -> 
        "2"}, {
        XMLElement[
        "value", {
         "name" -> "Log", "desc" -> "the natural logarithm", "input" -> 
          "*FunClash.Log-_*Log.Log10-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Log10", "desc" -> "the base 10 logarithm", "input" -> 
          "*FunClash.Log-_*Log10.Log-"}, {}]}]}], 
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "reinterpret", {
       "text" -> "Using closest Wolfram|Alpha interpretation:", "new" -> 
        "f(x) = -30 Log(x)", "score" -> "0.609459", "level" -> "high"}, {
       "\n   ", 
        XMLElement[
        "alternative", {"score" -> "0.363636", "level" -> "medium"}, {
         "(x), 0 \[LessEqual] x \[LessEqual] 1"}], "\n   ", 
        XMLElement[
        "alternative", {"score" -> "0.135135", "level" -> "low"}, {"range"}], 
        "\n  "}]}]}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "5", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "7.967", 
    "parsetiming" -> "0.358", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa34251cff9fc2021eba4000003a5a376f13i7bc15", "host" -> 
    "http://www2.wolframalpha.com", "server" -> "8", "related" -> "", 
    "version" -> "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -7., 
    "Date" -> {2014, 9, 7, 18, 19, 9.839096`7.745530184704922}, "Line" -> 11, 
    "SessionID" -> 24190340719069411275}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "IndefiniteIntegral", "Indefinite integral", 1, 1, "Input", 
    "Integrate[-30 Log[x], x]"}, Typeset`open$$ = True, Typeset`newq$$ = 
   "range of f(x) = -30 Log(x), 0 \[LessEqual] x \[LessEqual] 1"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{700., {1721., 26.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "30"}], " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "x"}], "+", 
    RowBox[{"x", " ", 
     RowBox[{"Log", "[", "x", "]"}]}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.6191255087995453`*^9, 3.619127949901133*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "Integral of sin (pi*x), 0 \\[LessEqual] x \\[LessEqual] 1", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Fast parse", "Fast parse", 1, 0, "Input", 
        "Integrate[Sin[Pi*x], {x, 0, 1}]"}, "ExtrusionOpen" -> False, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}, 
    PodStates -> {"Input__Step-by-step solution"}}, Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Definite integrals", "scanner" -> "Integral", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "2", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[Sin[Pi x], {x, 0, 1}]"}], 
       XMLElement["moutput", {}, {"2/Pi"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", "1"], 
                 RowBox[{
                   RowBox[{"sin", "(", 
                    RowBox[{"\[Pi]", " ", "x"}], ")"}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TemplateBox[{
                FractionBox["2", "\[Pi]"], "\" \[TildeTilde] \"", 
                "0.63661977236758134307553505349005718152`5."}, 
               "RowDefault"]}], TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{"\"Compute the definite integral:\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, StripOnInput -> False]}, {
                    RowBox[{
                    SubsuperscriptBox["\[Integral]", "0", "1"], 
                    RowBox[{
                    RowBox[{"sin", "(", 
                    RowBox[{"\[Pi]", " ", "x"}], ")"}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"For the integrand \"", 
                    RowBox[{"sin", "(", 
                    RowBox[{"\[Pi]", " ", "x"}], ")"}], "\", substitute \"", 
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{"\[Pi]", " ", "x"}]}], "\" and \"", 
                    RowBox[{
                    RowBox[{"\[DifferentialD]", "u"}], "\[LongEqual]", 
                    "\[Pi]"}], "\"\"", 
                    TemplateBox[{"\"\[ThinSpace]\"", 
                    RowBox[{"\[DifferentialD]", "x"}]}, "RowDefault"], 
                    "\".\\nThis gives a new lower bound \"", 
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{"\[Pi]", " ", "0"}], "\[LongEqual]", "0"}], 
                    "\" and upper bound \"", 
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{"\[Pi]", " ", "1"}], "\[LongEqual]", "\[Pi]"}], 
                    "\":\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, StripOnInput -> False]}, {
                    TemplateBox[{"\" \[LongEqual] \"", 
                    RowBox[{
                    FractionBox["1", "\[Pi]"], 
                    RowBox[{
                    SubsuperscriptBox["\[Integral]", "0", "\[Pi]"], 
                    RowBox[{
                    RowBox[{"sin", "(", "u", ")"}], 
                    RowBox[{"\[DifferentialD]", "u"}]}]}]}]}, "RowDefault"]}},
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Apply the fundamental theorem of calculus.\\nThe \
antiderivative of \"", 
                    RowBox[{"sin", "(", "u", ")"}], "\" is \"", 
                    RowBox[{"-", 
                    RowBox[{"cos", "(", "u", ")"}]}], "\":\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, StripOnInput -> False]}, {
                    TemplateBox[{"\" \[LongEqual] \"", 
                    TemplateBox[{
                    RowBox[{"(", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"cos", "(", "u", ")"}], "\[Pi]"]}], ")"}], "0", 
                    "\[Pi]"}, "", DisplayFunction :> (SubsuperscriptBox[
                    RowBox[{#, 
                    StyleBox[
                    "\[RightBracketingBar]", SpanMinSize -> 
                    3.5]}], #2, #3]& )]}, "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Evaluate the antiderivative at the limits and \
subtract.\\n \"", 
                    RowBox[{
                    TemplateBox[{
                    RowBox[{"(", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"cos", "(", "u", ")"}], "\[Pi]"]}], ")"}], "0", 
                    "\[Pi]"}, "", DisplayFunction :> (SubsuperscriptBox[
                    RowBox[{#, 
                    StyleBox[
                    "\[RightBracketingBar]", SpanMinSize -> 
                    3.5]}], #2, #3]& )], "\[LongEqual]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"cos", "(", "\[Pi]", ")"}], "\[Pi]"]}], ")"}], 
                    "-", 
                    RowBox[{"(", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"cos", "(", "0", ")"}], "\[Pi]"]}], ")"}]}], 
                    "\[LongEqual]", 
                    FractionBox["2", "\[Pi]"]}]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, StripOnInput -> False]}, {
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer\"", "\":\""}, "RowDefault"], 
                    FontFamily -> "Arial", FontSize -> 12, StripOnInput -> 
                    False], "\[SpanFromLeft]"}, {"\"\"", 
                    TemplateBox[{"\" \[LongEqual] \"", 
                    FractionBox["2", "\[Pi]"]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{
                    RGBColor[{1., 0.984313725490196, 0.6745098039215687}]}}}, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False, FrameStyle -> 
                    RGBColor[{0.8196078431372549, 0.788235294117647, 
                    0.16078431372549018`}]], "Grid"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {}]}], 
       
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "More digits", "input" -> "Input__More digits"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Input__Hide steps"}, {}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Visual representation of the integral", "scanner" -> 
     "Integral", "id" -> "VisualRepresentationOfTheIntegral", "position" -> 
     "200", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[Sin[Pi x], {x, 0, 1}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{
              GraphicsComplexBox[CompressedData["
1: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
NMo87v/h/96f/su3/wDItq2S
               "], {{{}, {
                  EdgeForm[], 
                  Directive[
                   Opacity[0.1], 
                   RGBColor[0, 0, 1]], 
                  GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJwt0WWQEFQUgNEtSrqkY+mULkFKpEOWTmEB6V1SSgGDEJDuRjqU7lC6pTuV
TqVLwbOz/Djz3blv5v25oeGRYRFBAQEBgcQMjO6V93NBDdZD+oYZ7OIJXzGB
LdyjARH8xBquUZaatOEHlnKeAuQnHx+RlzzkJhc5yUF2spGVLGQmE6FkJANl
qEFrvmcJ50hPaarTiu9YzFnSUZ/OjGA1f/EJ1QjnWxZxhrTUoxPDWcWflKIq
LRnIQk6Thp6MZzN3qUtHhrGSq5SkG2PYwC2qMIltPKAFA1jAKVIznZ08pgf7
eME4NnGHOhzgFVN4y+/8TYeA6IPvkWf8yL+sIIZ9CB+bg/SgvmYq79jOP3SN
+sL7Xn3OaP5jPTepzH5eMpGt3OcLdvOU/sznJKmYxg4e0Z2xbOQ2YUzmNx7S
nqEs5zIl6MIo1nGDSjTnG+ZxgpTUph1D+JVLFCeSkazlOhVpxtfM5Tgp+Jy2
DOYXLlKMz2hKP37mGB9Siy8ZxDIuUJQKNKEvczhKcorwKY3pw2yOkIzClKcR
vZnFHyQlCYlJREISEJ94xOUD4hCbWMSMujchBEfdm0KUoyG9mMlh/gdCe4FZ

                    "]]}]}, {}, {}}}], {{{}, {}, {
                 Hue[0.67, 0.6, 0.6], 
                 Directive[
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]], 
                 LineBox[CompressedData["
1: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
                  
                  "]]}}}}, {GridLines -> Dynamic[
                Map[{{#, 
                   GrayLevel[0.7]}}& , 
                 MousePosition[{"Graphics", Graphics}, None]]], 
              Method -> {"GridLinesInFront" -> True}, Epilog -> {{
                 LineBox[{{0, 0}, {0, 0}}], 
                 LineBox[{{1, 0}, {1, 0}}]}, 
                DynamicBox[
                 Typeset`ToBoxes[
                  
                  DynamicModule[{
                   CalculateUtilities`GraphicsUtilities`Private`pt = (
                    NearestFunction[1, {253, 1}, 3, CompressedData["
1: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
pA5w6PEUsjh6Zf33KEQWSsUmJlL4D0dFIoo=
                    "], CompressedData["
1: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
PsChJVDI5uiXi+9RiCqSjktKovAfMLUiiA==
                    "], CompressedData["
1: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
                    
                    "], Automatic, 
                    Hold[
                    Nearest[CompressedData["
1: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
PsChJVDI5uiXi+9RiCqSjktKovAfMLUiiA==
                    "] -> CompressedData["
1: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
                    
                    "]]]][
                    Part[#, 1]]& )[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                   If[
                   CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     2]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     3]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[
                    Part[CalculateUtilities`GraphicsUtilities`Private`scaled, 
                    1] - 0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt]}]],
                   TraditionalForm, Graphics]]}, AxesOrigin -> {Automatic, 0},
               PlotRange -> All, ImageSize -> 200, AspectRatio -> 
              NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> True, 
              AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
              BaseStyle -> {CellBaseline -> Baseline}, Epilog -> {
                LineBox[{{0, 0}, {0, 0}}], 
                LineBox[{{1, 0}, {1, 0}}]}, FrameTicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10], 
              LabelStyle -> {FontFamily -> "Verdana", FontSize -> 10}, 
              Method -> {"AxesInFront" -> True}, 
              PlotRange -> {{-0.1, 1.1}, {-0.30901692120354657`, 
               0.9999999579063413}}, PlotRangeClipping -> True, 
              PlotRangePadding -> {Automatic, Automatic}, Prolog -> {
                Opacity[0], 
                TagBox[
                 RectangleBox[
                  Scaled[{0, 0}], 
                  Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
              TicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10]}], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Riemann sums", "scanner" -> "Integral", "id" -> 
     "RiemannSums", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 TagBox[
                  GridBox[{{
                    TagBox[
                    PaneBox[
                    StyleBox[
                    "\"left sum\"", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, StripOnInput -> False], 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    RowBox[{
                    FractionBox[
                    RowBox[{"cot", "(", 
                    FractionBox["\[Pi]", 
                    RowBox[{"2", " ", "n"}]], ")"}], "n"], "\[LongEqual]", 
                    TagBox[
                    TemplateBox[{
                    RowBox[{
                    FractionBox["2", "\[Pi]"], "-", 
                    FractionBox["\[Pi]", 
                    RowBox[{"6", " ", 
                    SuperscriptBox["n", "2"]}]], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "n"], ")"}], "4"], ")"}], 
                    SeriesData[$CellContext`n, 
                    DirectedInfinity[1], {}, 0, 4, 1], Editable -> False]}], 
                    RowBox[{"SeriesData", "[", 
                    RowBox[{"n", ",", "\[Infinity]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["2", "\[Pi]"], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["\[Pi]", "6"]}]}], "}"}], ",", "0", ",", "4", 
                    ",", "1"}], "]"}]}, "SeriesData", 
                    DisplayFunction -> (#& ), 
                    InterpretationFunction -> (#2& ), SyntaxForm -> Plus], 
                    Identity]}]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxBackground -> {"Columns" -> {None, None}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, FrameStyle -> 
                   GrayLevel[0.84], BaselinePosition -> Automatic, 
                   AllowScriptLevelChange -> False], "Grid"], 
                 LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
                 False]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`RiemannSumScanner`Private`intervals$$ = 10, 
                 CalculateScan`RiemannSumScanner`Private`method$$ = 
                 CalculateScan`RiemannSumScanner`Private`LeftValue, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[CalculateScan`RiemannSumScanner`Private`intervals$$],
                     10, "number of subintervals"}, 2, 100, 1}, {{
                    Hold[CalculateScan`RiemannSumScanner`Private`method$$], 
                    CalculateScan`RiemannSumScanner`Private`LeftValue, 
                    "summation method"}, {
                    CalculateScan`RiemannSumScanner`Private`LeftValue -> 
                    "left endpoint", 
                    CalculateScan`RiemannSumScanner`Private`MidpointValue -> 
                    "midpoint", 
                    CalculateScan`RiemannSumScanner`Private`RightValue -> 
                    "right endpoint"}}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2939663$$ = 
                 False, CalculateScan`RiemannSumScanner`Private`intervals$\
2939664$$ = 0, CalculateScan`RiemannSumScanner`Private`method$2939665$$ = 
                 False}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`RiemannSumScanner`Private`intervals$$ = 10, 
                    CalculateScan`RiemannSumScanner`Private`method$$ = 
                    CalculateScan`RiemannSumScanner`Private`LeftValue, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2939663$\
$, False], 
                    Hold[
                    CalculateScan`RiemannSumScanner`Private`intervals$$, 
                    CalculateScan`RiemannSumScanner`Private`intervals$2939664$\
$, 0], 
                    Hold[
                    CalculateScan`RiemannSumScanner`Private`method$$, 
                    CalculateScan`RiemannSumScanner`Private`method$2939665$$, 
                    False]}, 
                  "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    
                    With[{CalculateScan`RiemannSumScanner`Private`delta$ = (1 - 
                    0)/CalculateScan`RiemannSumScanner`Private`intervals$$, 
                    CalculateScan`RiemannSumScanner`Private`epsilon$ = 
                    RandomReal[{0, 0.001}]}, 
                    Labeled[
                    Plot[
                    Sin[
                    Pi $CellContext`x], {$CellContext`x, -0.09999999999999998,
                     1.1}, PlotRange -> {{-0.09999999999999998, 
                    1.1}, {-0.09999999999999998, 1.1}}, Prolog -> Table[
                    (Flatten[{
                    If[
                    TrueQ[Part[#, 2, 2] > 0], {
                    Opacity[0.1], Blue, 
                    EdgeForm[
                    RGBColor[{0.63, 0.64, 0.84}]]}, {
                    Opacity[0.1], Red, 
                    EdgeForm[
                    RGBColor[{0.9, 0.64, 0.64}]]}], 
                    Polygon[#]}]& )[
                    ({{#, 0}, {#, #3}, {#2, #3}, {#2, 0}}& )[
                    0 + CalculateScan`RiemannSumScanner`Private`i 
                    CalculateScan`RiemannSumScanner`Private`delta$, 
                    0 + (CalculateScan`RiemannSumScanner`Private`i + 1) 
                    CalculateScan`RiemannSumScanner`Private`delta$, 
                    (If[
                    Or[
                    Not[
                    NumericQ[#]], 
                    Not[
                    FreeQ[#, 
                    Alternatives[Complex, I]]]], 0, #]& )[
                    Quiet[
                    Which[
                    MatchQ[
                    CalculateScan`RiemannSumScanner`Private`method$$, 
                    CalculateScan`RiemannSumScanner`Private`LeftValue], 
                    (If[
                    Not[
                    NumericQ[#]], 
                    N[
                    ReplaceAll[
                    Sin[Pi $CellContext`x], $CellContext`x -> 
                    0 + CalculateScan`RiemannSumScanner`Private`i 
                    CalculateScan`RiemannSumScanner`Private`delta$ + 
                    CalculateScan`RiemannSumScanner`Private`epsilon$]], #]& )[
                    
                    N[
                    ReplaceAll[
                    Sin[Pi $CellContext`x], $CellContext`x -> 
                    0 + CalculateScan`RiemannSumScanner`Private`i 
                    CalculateScan`RiemannSumScanner`Private`delta$]]], 
                    MatchQ[
                    CalculateScan`RiemannSumScanner`Private`method$$, 
                    CalculateScan`RiemannSumScanner`Private`MidpointValue], 
                    (If[
                    Not[
                    NumericQ[#]], 
                    N[
                    ReplaceAll[
                    Sin[Pi $CellContext`x], $CellContext`x -> 
                    0 + (CalculateScan`RiemannSumScanner`Private`i 
                    CalculateScan`RiemannSumScanner`Private`delta$ + (
                    CalculateScan`RiemannSumScanner`Private`i + 1) 
                    CalculateScan`RiemannSumScanner`Private`delta$)/2 + 
                    CalculateScan`RiemannSumScanner`Private`epsilon$]], #]& )[
                    
                    N[
                    ReplaceAll[
                    Sin[Pi $CellContext`x], $CellContext`x -> 
                    0 + (CalculateScan`RiemannSumScanner`Private`i 
                    CalculateScan`RiemannSumScanner`Private`delta$ + (
                    CalculateScan`RiemannSumScanner`Private`i + 1) 
                    CalculateScan`RiemannSumScanner`Private`delta$)/2]]], 
                    MatchQ[
                    CalculateScan`RiemannSumScanner`Private`method$$, 
                    CalculateScan`RiemannSumScanner`Private`RightValue], 
                    (If[
                    Not[
                    NumericQ[#]], 
                    N[
                    ReplaceAll[
                    Sin[Pi $CellContext`x], $CellContext`x -> 
                    0 + (CalculateScan`RiemannSumScanner`Private`i + 1) 
                    CalculateScan`RiemannSumScanner`Private`delta$ - 
                    CalculateScan`RiemannSumScanner`Private`epsilon$]], #]& )[
                    
                    N[
                    ReplaceAll[
                    Sin[Pi $CellContext`x], $CellContext`x -> 
                    0 + (CalculateScan`RiemannSumScanner`Private`i + 1) 
                    CalculateScan`RiemannSumScanner`Private`delta$]]], True, 
                    0]]]]], {
                    CalculateScan`RiemannSumScanner`Private`i, 0, 
                    CalculateScan`RiemannSumScanner`Private`intervals$$ - 1}],
                     PlotStyle -> AbsoluteThickness[1], ImageSize -> 1.5 200], 
                    (If[
                    NumericQ[#], 
                    Grid[{{
                    Row[{
                    Style["integral: ", 
                    GrayLevel[0.6]], 
                    TildeTilde[2/Pi, 0.6366197723675814]}]}, {
                    Row[{
                    Style["Riemann sum: ", 
                    GrayLevel[0.6]], #}]}, {
                    Row[{
                    Style["error: ", 
                    GrayLevel[0.6]], 
                    Abs[# - 2/Pi]}]}}, Alignment -> ":"], ""]& )[
                    (Chop[
                    N[
                    TimeConstrained[
                    Simplify[#], 0.5, #]]]& )[
                    Quiet[CalculateScan`RiemannSumScanner`Private`delta$ Sum[
                    ReplaceAll[
                    Sin[
                    Pi $CellContext`x], {$CellContext`x -> 
                    0 + CalculateScan`RiemannSumScanner`Private`k 
                    CalculateScan`RiemannSumScanner`Private`delta$ + 
                    CalculateScan`RiemannSumScanner`Private`delta$ 
                    ReplaceAll[
                    CalculateScan`RiemannSumScanner`Private`method$$, {
                    CalculateScan`RiemannSumScanner`Private`LeftValue -> 0, 
                    CalculateScan`RiemannSumScanner`Private`MidpointValue -> 
                    Rational[1, 2], 
                    CalculateScan`RiemannSumScanner`Private`RightValue -> 
                    1}]}], {
                    CalculateScan`RiemannSumScanner`Private`k, 0, 
                    CalculateScan`RiemannSumScanner`Private`intervals$$ - 
                    1}]]]]]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`RiemannSumScanner`Private`intervals$$, 10, 
                    "number of subintervals"}, 2, 100, 1, ControlPlacement -> 
                    1}, {{CalculateScan`RiemannSumScanner`Private`method$$, 
                    CalculateScan`RiemannSumScanner`Private`LeftValue, 
                    "summation method"}, {
                    CalculateScan`RiemannSumScanner`Private`LeftValue -> 
                    "left endpoint", 
                    CalculateScan`RiemannSumScanner`Private`MidpointValue -> 
                    "midpoint", 
                    CalculateScan`RiemannSumScanner`Private`RightValue -> 
                    "right endpoint"}, ControlPlacement -> 2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbinv7/\
APkPiMtA2Q9gEJ6GBMGlCS8r232GksXDvYzjb48+Czm6RZu0oxHaAp/XCqL83ju+eeu96TIxml/\
V6vp69a80Fykt7A02NrhnKWy0KQd6e5olozKdIr+Oy2NTE1e5TDD0q877o176WagfHnV/g+\
8KTgYOhXwzgzjOrJvoI8Y4muPSPFju1PJlwmwNlP+\
nR7d2d368VLD4OxjMAYqoTeaQuZZwo0TXsIdM2atxzEN398VB4/FZzH9HtBRUL1A+sdKyAWRgrgmE/\
wrZebqbuYmAFBQJELp8nJc9j2Am0UE9MxneX4xvlkbbUFBjXVnpt7JTfrFOTDv4kPZOxi8h6XtDs7A\
sPCuGT0nZXVP+dugOfXbeGVPFlNHOb3hiNvYNgx1ct0PmtdJ89I1bUu+jlXFzVfNhrk+VOm/\
l86ZNosh7HdNgw6O7I1Xq29ZfjnbeFljl0/F/\
d9az57Rwm4ajhUgvsoScHnUTRTHniJtk9X59bhMe5UfMfoDKlghRPZOMt+\
cf3xsAKvN4UYazfZgHREPQMimlPrIo7bPTZlZpiBgsQCz6/\
rl002lnUoAXe2rz0ThNkB5glZtzyhOUgX6g4myb78UXEruZxpMuT9QBg6pWqt6G9hfZQlV5CxDIwkx\
guaeg3msEpqBCpY9oMSJM5BMIRkv+zHffMPFyuBVO0rVJfyLA5caU7Dk+\
iXBT6kYmqy5o4dOLqC2xazieRJrbqIpenitNkc0/\
0m040bmgM9lITQkoQP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCS5i/Ff6DbPKuLY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More cases", "input" -> "RiemannSums__More cases"}, {}]}], 
     
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "cot(x) is the cotangent function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/mathematica/ref/Cot.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Cot", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Cotangent.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
             "\"cot(x) is the cotangent function\"", TraditionalForm]], 
            "Output", {}]}]}]}]}], Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "400", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[Sin[Pi x], x]"}], 
       XMLElement["moutput", {}, {"-(Cos[Pi x]/Pi)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   TagBox[
                    RowBox[{"sin", "(", 
                    RowBox[{"\[Pi]", " ", "x"}], ")"}], HoldForm], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{"-", 
                    FractionBox[
                    RowBox[{"cos", "(", 
                    RowBox[{"\[Pi]", " ", "x"}], ")"}], "\[Pi]"]}], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0, 
                   GrayLevel[0], StripOnInput -> False], "+", 
                  StyleBox[
                  "constant", FontFamily -> "Helvetica", Magnification -> 
                   0.9 Inherited]}], 
                LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 0, 
                
                GrayLevel[0.6], StripOnInput -> False], Identity]}], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "IndefiniteIntegral__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution"}, {}]}]}], 
   Typeset`aux1$$ = {True, False, {False, False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {
   True, False, {False, False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "4", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.354", 
    "parsetiming" -> "0.589", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa4446224478ae8ahae93100005569d8c3e75ae377", "host" -> 
    "http://www3.wolframalpha.com", "server" -> "20", "related" -> 
    "http://www3.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa4447224478ae8ahae93100002g89cced70df7ib1&s=20", "version" -> "2.6"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -7., 
    "Date" -> {2014, 9, 7, 15, 21, 54.544316`8.489324474388614}, "Line" -> 
    113, "SessionID" -> 24189925911411440498}, Typeset`showpods$$ = {1, 2, 3, 
   4}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Fast parse", "Fast parse", 1, 0, "Input", 
    "Integrate[Sin[Pi*x], {x, 0, 1}]"}, Typeset`open$$ = False, 
   Typeset`newq$$ = 
   "Integral of sin (pi*x), 0 \\[LessEqual] x \\[LessEqual] 1"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{335., {37., 26.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}],
        Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 FractionBox["2", "\[Pi]"]], "Output",
 CellChangeTimes->{
  3.619067802771283*^9, 3.619068375504437*^9, {3.619117287242999*^9, 
   3.6191173075663652`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"2", "/", "x"}], "\[Equal]", ".6333"}], ",", "x"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.619116837345366*^9, 3.6191168465468082`*^9}, {
  3.6191168801505127`*^9, 3.6191168933892517`*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Solve", "::", "ratnz"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Solve was unable to solve the system with inexact \
coefficients. The answer was obtained by solving a corresponding exact system \
and numericizing the result. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/Solve\\\", ButtonNote -> \
\\\"Solve::ratnz\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.6191168941465073`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"x", "\[Rule]", "3.158060950576346`"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.619116894148623*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"1", "/", ".6333"}]], "Input",
 CellChangeTimes->{{3.6191170641841803`*^9, 3.6191170667575417`*^9}}],

Cell[BoxData["1.5790304752881732`"], "Output",
 CellChangeTimes->{3.6191170671773233`*^9}]
}, Open  ]],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{3.619117265188817*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Solve 2/x == .6333 for x", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Fast parse", "Fast parse", 1, 0, "Input", "Solve[2/x == 0.6333, x]"}, 
      "ExtrusionOpen" -> False, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}, 
    PodStates -> {"Result__Step-by-step solution"}}, Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Solve[2/x == 0.6333, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"solve\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox[
                    RowBox[{
                    FractionBox["2", "x"], "\[LongEqual]", 
                    TagBox["0.6333`", Identity]}], HoldForm], 
                    StyleBox[
                    "\" for \"", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, 
                    GrayLevel[0.6], StripOnInput -> False], "x"}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None, None, None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Results", "scanner" -> "Solve", "id" -> "Result", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "2", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "{Reduce[2/x == 0.6333, x], N[Reduce[2/x == 0.6333, x]]}"}], 
       XMLElement[
       "moutput", {}, {
        "{x == Row[{20000/6333, \" \[TildeTilde] \", Chop[N[20000/6333, 5], \
2/10^5]}], {3.15806}}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"x", "\[LongEqual]", 
              TemplateBox[{
                FractionBox["20000", "6333"], "\" \[TildeTilde] \"", 
                "3.15806095057634612348018316753513342807`5."}, 
               "RowDefault"]}], TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    FormBox[
                    TagBox[
                    FormBox[
                    TemplateBox[{"\"Solve for \"", "x"}, "RowDefault"], 
                    TraditionalForm], Format[#, TraditionalForm]& ], 
                    TraditionalForm]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, StripOnInput -> False]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    FractionBox["2", "x"], "\[LongEqual]", "0.6333`"}], 
                    HoldForm]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{"\"Take the reciprocal of both sides\""}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, StripOnInput -> False]}, {
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    FractionBox["x", "2"], "\[LongEqual]", 
                    "1.5790304752881732`"}], HoldForm], HoldForm], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{"\"Multiply both sides by \"", "2"}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, StripOnInput -> False]}, {
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer\"", "\":\""}, "RowDefault"], 
                    FontFamily -> "Arial", FontSize -> 12, StripOnInput -> 
                    False], "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{"x", "\[LongEqual]", "3.1580609505763464`"}], 
                    HoldForm], HoldForm], HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{
                    RGBColor[{1., 0.984313725490196, 0.6745098039215687}]}}}, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False, FrameStyle -> 
                    RGBColor[{0.8196078431372549, 0.788235294117647, 
                    0.16078431372549018`}]], "Grid"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {}]}], 
       
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "More digits", "input" -> "Result__More digits"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Result__Hide steps"}, {}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Plot", "scanner" -> "Solve", "id" -> "RootPlot", 
     "position" -> "300", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Plot[{2/x, 0.6333}, {x, -3.17801, 4.23209}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{{{}, {}, {
                  Hue[0.67, 0.6, 0.6], 
                  Directive[
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   AbsoluteThickness[1]], 
                  LineBox[CompressedData["
1:eJwVkns41PkCh2dch3CSS20pISW6yYbOiUgxe0glbC4V0YbVKEvqdMpTWGxl
1+UUZUydUtGjMNhKfL6ekDjnUEtaq3LGjMu4zs38zM1x/vg871/vX+/H5kRS
0EktGo0Wvbj/s8drwPnnRANikf3PNJYdHxO7GitHTxkQh7A2yZoNfOjtLLXz
ijEgmnq3zh5HPjycj1mIwgxIhYFervt2PipteFSQnwFZeLQ3ZoU3HxlaQlja
GpCCDMpl5XE+XFvn95f1M8jTlss1TqV8lPp9lVC1h0G4HpsTuCsFkJVrPJoW
9EjDrsI5hs8I4iYi2S7vdUnLTp2uinOjSPbwcS+q1CEWXK3UgPYxMEa7WSPx
2sTPebwz+7gQL9L6tnE8tYiJz4/Z9ksnMXf8St43ChphRa447eUwjYKKhAOv
0hbQalg0xNw3C1Z0a3GtvRrO9Bdvh38RwVDZrrm3Sg2rbV71czdFeFj0Njbf
VI0px2t9xmwRPr35z7YzahVu5orbmBUiBGz5vWNznwp3yvR5ohYRnJRT1ONM
FSLO9CrNpSKMFS0P4wwrUdvTV40IMWI6Er66fk+B67u9Q9t3SuC+8S13fbEC
TbQL3vleEhj9tCGwJU+BeKG9MspPggZ//tW5iwqcex4ybRIiAaP76GRUqAIZ
JcOx5WckeNp3EDuWKODWMe7c8lgCiud68kvKPOrjbn0esJIiT61Vs51J4bVS
aDlqIUNHmQdb5UnhZfvezvHVMtC9zue276AQobC4KbaXIeXqVHS4HYVfTzEK
LV1lCNP/uOyqRo53OsLRx6EyrDOtSnlXJ0fw6dwD6mIZXq771v2MjRxcm1z6
bds5CPyfoEohQ/D1+KEf/OUYsH7t/mxWhrqNvkeXhsrRIxmoqR6RYathbG5D
lByv7hg+4L6XgbpVum7tOTkKJ+JzXlTKENQ1PRR/Tw7vaw6H2sJlmBhMKhye
l4PdWc4bfCnFLfUT1odaCgVlTRGfq6UYOpWR3dpMISe5r/fLQym2dIVtau6k
kLJS9w2vQIqc8aCjvTwK/gmxT8YSpIjL7/9zntk85g3sUqQrpfh6ptLXL20e
Id/c1TW6KMG/ut+uOsRUIJNvxn1+VgL5Cp7OZLACtenZUSfjJOh5brSkMFqB
pQ2sxubFLjMu9XW6i506bT3Ont0mQf/d60npTxXwVP0++EEgxkRpVE7vciUc
npnV3TsoRnNDsfkNqRKhf82ODvQTY/og3adHS4UsgcJE6SFGyUKinq2pCrxV
vPhgJzHWXFr9ULRZBXZOtbW+nhjdya/e+MSpsOzE/muJjSKk+v7FoeOLCkrz
7BNu60WgqvZepv2hxgivv3SVlQhZzvmq+5NqvKt26F8wXfzxsRfHIjVqPAro
9O9Qz8KNiRgjWw0OZxrvCOubRUmSY/HpBA2eSAr1L2bOwmrrl+XfLmhQ/8A7
7FLbDASNL13SVtPIT17D/95XM4PkhVv/bd5AI1GDmXtM2DNgG39Xb7adRozM
O5w4KTO48GDX1wJfGonNCNQQuxm4HjaLcTxLI+YnIu7rXJ3Gp95IRkgHjaRY
p05d85zCRY66be4KnZjv6tblOk7BJbzm/tANOuEe2bhmwHIKlfWbXg+U0Ik4
/1Ogw8wkNEf899Nq6SRJx7e6lTOJwgInf/NhOkkYt/xBTZtEwMQVs3SmFoni
PqdYr4W4zap4yrLRJrSeZaY3nwmx7CMsKrZqE85k4samO0IcLr/dQHlok8/2
NuFLUoQwP/Jr7MdwbRJRnNv4aJ0QG4wXusr+oU1CL4VfHsoaR8lIZlbKn3SI
v59KO4g5hj37aoa7LHRJpNg4q3vHGIr6QpuE9rqExbbW2283BuUFl4O2rrrk
F8keBlMziuK/Jf84GKpLejm5Rp51owh28SnLKFn0KUsLx7Wj6Dr626b3dnok
scJ5vRYlwM70w6+YgfrkUrDPo3SBAN1hH11V0fokbyHYQf1eAFP291bvUvVJ
dch5R6pKgPJO6/Qhtj6R0rFlOkaAHpfdXpwZffL38AC3gW4+btz9mTNVwiAf
Dp3PMNzNx1qT0tQtBwzI/wC81GcR
                   "]], 
                  LineBox[CompressedData["
1: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
0xjCbdjcGG8cwikdQZUyDCXNw/kXDBz+D9DuFjg=
                   "]], 
                  
                  LineBox[{{-0.000544180844187034, -3.1636628330468426`}, \
{-0.0005397536894725694, 3.1295968815192055`}}]}, {
                  Hue[0.9060679774997897, 0.6, 0.6], 
                  Directive[
                   RGBColor[0.6, 0.24, 0.4428931686004542], 
                   AbsoluteThickness[1]], 
                  LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQfcHhlmF/DucBv4sTY/45P7E3O/LTd951Djh/jrtk
1lonBP/r0n+2e/+zwfkZr2PmGl9ihfOLbJ0tpqxigfM5np/Pe5bJDOfvLL9q
MN+OCc7/Ft/Y5/mLAc6ftDLLf0/5//0wfl7ikRmbVP/C+cknsiR7Fv6C8/v+
Mm008vgB5z/1Xr1/7a+vcH6o5wJWnurPcP5vkfYkc7WPcH6JfOnbbru3cL63
+x/mII8XcH4vd7rHpuWP4XymmGvfNrrehfMP3Vy6w/j5ZTj/tHrA+paGw3C+
zOJlXdPWZdvD+CavxdZMYD8M53c/PLdw2YzLcP4SkdMTA5juwvlthYeDQuQe
w/kdv9jf7ZR/AefLPc+Ibj39Bs4/aCWhe/TtBzj/+Its08+Zn+H86SfOqoXs
/grn+/189OCi3Q84/3w0W0vT9F9wvspSyQ1xT/7A+Qn2D5aEJ/+H8ze3Rh08
eJvBAcbXmjJP5JkcE5zfujvzzmIfZjjf+9qajPISFoT8TM/IyK2scP6S0tx9
Vx6wwfmmv161x6lywPmGRQ9E/yVzwvlCzLES5r1ccH6ajXF93XluOH9+34So
+D88cL7zldRfocp8cH7UoSn/opL54fzVKUt3/3ETgPNZzLZzBM9C8OPYT4au
fIvgAwDml7jy
                   "]]}}}, {GridLines -> Dynamic[
                  Map[{{#, 
                    GrayLevel[0.7]}}& , 
                   MousePosition[{"Graphics", Graphics}, None]]], 
                Method -> {"GridLinesInFront" -> True}, Epilog -> {{
                   AbsolutePointSize[5], 
                   Hue[0], {
                    TagBox[
                    TooltipBox[
                    PointBox[{3.158060950214062, 0.6333000000726505}], 
                    
                    TemplateBox[{
                    "\"(\"", 
                    "3.15806095021406184099337630140743933997`7.\
9772948850955", "\",\"", 
                    "0.63330000007265047752904930265825061298`7.\
977294885095501", "\")\""}, "RowDefault"]], Annotation[#, 
                    
                    Row[{"(", 
                    3.15806095021406184099337630140743933997`7.9772948850955, 
                    ",", 0.63330000007265047752904930265825061298`7.\
977294885095501, ")"}], "Tooltip"]& ]}}, 
                  DynamicBox[
                   Typeset`ToBoxes[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = (
                    NearestFunction[1, {254, 2}, 3, CompressedData["
1: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
                    
                    "], CompressedData["
1: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
SU+Iyf+L+D/NmuW8
                    "], CompressedData["
1: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
uE/YuE/YuCfY+PnC/j+0eEFK
                    "], Automatic, 
                    Hold[
                    Nearest[CompressedData["
1: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
SU+Iyf+L+D/NmuW8
                    "] -> CompressedData["
1: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
uE/YuE/YuCfY+PnC/j+0eEFK
                    "]]]][#/{7.4100990743759745`, 
                    6.293259714566048}]& )[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     2]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     2]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[
                    Part[CalculateUtilities`GraphicsUtilities`Private`scaled, 
                    1] - 0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt]}]],
                     TraditionalForm, Graphics]]}, AspectRatio -> 
                NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> True, 
                AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
                BaseStyle -> {CellBaseline -> Baseline}, Epilog -> {
                  AbsolutePointSize[5], 
                  Hue[0], {
                   TagBox[
                    TooltipBox[
                    PointBox[{3.158060950214062, 0.6333000000726505}], 
                    
                    TemplateBox[{
                    "\"(\"", 
                    "3.15806095021406184099337630140743933997`7.\
9772948850955", "\",\"", 
                    "0.63330000007265047752904930265825061298`7.\
977294885095501", "\")\""}, "RowDefault"]], Annotation[#, 
                    
                    Row[{"(", 
                    3.15806095021406184099337630140743933997`7.9772948850955, 
                    ",", 0.63330000007265047752904930265825061298`7.\
977294885095501, ")"}], "Tooltip"]& ]}}, FrameTicksStyle -> 
                Directive[FontFamily -> "Times", FontSize -> 10], ImageSize -> 
                300., LabelStyle -> {FontFamily -> "Verdana", FontSize -> 10},
                 Method -> {}, 
                PlotRange -> {{-3.1780076485114566`, 
                 4.232091425864518}, {-3.1636628330468426`, 
                 3.1295968815192055`}}, PlotRangeClipping -> True, 
                PlotRangePadding -> {
                  Scaled[0.02], 
                  Scaled[0.02]}, Prolog -> {
                  Opacity[0], 
                  TagBox[
                   RectangleBox[
                    Scaled[{0, 0}], 
                    Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
                TicksStyle -> 
                Directive[FontFamily -> "Times", FontSize -> 10]}], 
              TagBox[
               GridBox[{{
                  GraphicsBox[{
                    RGBColor[0.24720000000000014`, 0.24, 0.6], {
                    AbsoluteThickness[2], 
                    LineBox[{{0, 0}, {1, 0}}]}}, ImageSize -> 13, 
                   BaselinePosition -> (Center -> Center)], 
                  StyleBox[
                   FractionBox["2", "x"], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0, {FontFamily -> "Verdana", FontSize -> 10}, 
                   GrayLevel[0.5], StripOnInput -> False]}, {
                  GraphicsBox[{
                    RGBColor[0.6, 0.24, 0.4428931686004542], {
                    AbsoluteThickness[2], 
                    LineBox[{{0, 0}, {1, 0}}]}}, ImageSize -> 13, 
                   BaselinePosition -> (Center -> Center)], 
                  StyleBox[
                  "0.6333`", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                   LineIndent -> 0, {FontFamily -> "Verdana", FontSize -> 10}, 
                   GrayLevel[0.5], StripOnInput -> False]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{0.3}}, "Rows" -> {{0.3}}}],
                "Grid"]}, "Labeled", DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"], 
                  
                  ItemBox[#2, Alignment -> {Inherited, Bottom}, 
                   DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  RowBox[{"(", "\[NoBreak]", 
                    GridBox[{{
                    StyleBox[
                    "Right", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], 
                    StyleBox[
                    "Bottom", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited]}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center], "\[NoBreak]", ")"}]}], 
                "]"}]& )], TraditionalForm]], "Output", {}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"title" -> "Number line", "scanner" -> "Solve", "id" -> 
     "NumberLine", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{
                TagBox[
                 TooltipBox[{
                   PointSize[0.02], 
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   PointBox[{3.158060950576346, 0.05684509711037424}]}, 
                  "3.158060950576346`"], 
                 Annotation[#, 3.158060950576346, "Tooltip"]& ]}, ImageSize -> 
               300., Axes -> {True, False}, AxesStyle -> {}, 
               PlotRange -> {{2.210642665403442, 4.10547923574925}, 
                 Automatic}, AxesOrigin -> {0, 0}], "\"\""}, "Labeled", 
             DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"]}, {
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  StyleBox[
                  "Bottom", FontFamily -> "Bitstream Vera Sans", 
                   FontSize -> -1 + Inherited]}], "]"}]& )], 
            TraditionalForm]], "Output", {Background -> None}]}], 
       XMLElement["dataformats", {}, {}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "4", "datatypes" -> 
    "Solve", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.149", 
    "parsetiming" -> "0.449", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa25231baf514ee7bbg87c000064e9igf00351bg49", "host" -> 
    "http://www5a.wolframalpha.com", "server" -> "34", "related" -> 
    "http://www5a.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa25241baf514ee7bbg87c00004d6d8iagb41de40i&s=34", "version" -> "2.6"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -7., 
    "Date" -> {2014, 9, 7, 15, 17, 11.351536`7.807629616956691}, "Line" -> 
    109, "SessionID" -> 24189925911411440498}, Typeset`showpods$$ = {1, 2, 3, 
   4}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Fast parse", "Fast parse", 1, 0, "Input", "Solve[2/x == 0.6333, x]"}, 
   Typeset`open$$ = False, Typeset`newq$$ = "Solve 2/x == .6333 for x"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{252., {37., 26.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}],
        Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Solve", "::", "ratnz"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Solve was unable to solve the system with inexact \
coefficients. The answer was obtained by solving a corresponding exact system \
and numericizing the result. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/Solve\\\", ButtonNote -> \
\\\"Solve::ratnz\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.6191170228580723`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"x", "\[Rule]", "3.158060950576346`"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.619117022859521*^9}]
}, Open  ]]
},
WindowSize->{960, 1012},
WindowMargins->{{Automatic, -9}, {Automatic, 2}},
Magnification:>1.25 Inherited,
FrontEndVersion->"10.0 for Linux x86 (64-bit) (June 27, 2014)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 4967, 120, 696, "Input"],
Cell[5528, 142, 247, 6, 58, "Input"],
Cell[CellGroupData[{
Cell[5800, 152, 182, 3, 35, "Input"],
Cell[5985, 157, 219, 4, 25, "Print"],
Cell[6207, 163, 6564, 120, 452, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12808, 288, 211, 4, 35, "Input"],
Cell[13022, 294, 89, 1, 25, "Print"],
Cell[13114, 297, 6474, 119, 453, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[19625, 421, 4260, 95, 366, "Input"],
Cell[23888, 518, 322, 4, 25, "Print"]
}, Open  ]],
Cell[CellGroupData[{
Cell[24247, 527, 278, 8, 35, "Input"],
Cell[24528, 537, 142, 3, 64, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[24707, 545, 558, 13, 58, "Input"],
Cell[25268, 560, 130, 2, 25, "Print"],
Cell[25401, 564, 330125, 5425, 452, 210939, 3470, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[355563, 5994, 391, 11, 58, "Input"],
Cell[355957, 6007, 123, 2, 25, "Print"],
Cell[356083, 6011, 282284, 4640, 467, 207477, 3413, "CachedBoxData", \
"BoxData", "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[638404, 10656, 220, 6, 35, "Input"],
Cell[638627, 10664, 130, 2, 35, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[638794, 10671, 218, 6, 35, "Input"],
Cell[639015, 10679, 88, 1, 35, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[639140, 10685, 31172, 609, 33, "WolframAlphaShortInput"],
Cell[670315, 11296, 959, 30, 74, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[671311, 11331, 340, 10, 35, "Input"],
Cell[671654, 11343, 567, 11, 72, "Message"],
Cell[672224, 11356, 580, 14, 35, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[672841, 11375, 206, 5, 35, "Input"],
Cell[673050, 11382, 171, 5, 64, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[673258, 11392, 6835, 146, 847, "WolframAlphaShortInput"],
Cell[680096, 11540, 309, 10, 70, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[680442, 11555, 54555, 961, 160, "WolframAlphaShortInput"],
Cell[735000, 12518, 299, 10, 100, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[735336, 12533, 370, 12, 53, "Input"],
Cell[735709, 12547, 2655, 54, 437, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[738401, 12606, 922, 28, 125, "Input"],
Cell[739326, 12636, 14243, 250, 722, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[753606, 12891, 168, 3, 53, "Input"],
Cell[753777, 12896, 85, 1, 53, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[753899, 12902, 416, 12, 53, "Input"],
Cell[754318, 12916, 129, 2, 53, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[754484, 12923, 275, 8, 53, "Input"],
Cell[754762, 12933, 611, 12, 112, "Message"],
Cell[755376, 12947, 137, 3, 53, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[755550, 12955, 552, 13, 90, "Input"],
Cell[756105, 12970, 264, 5, 100, "Output"]
}, Open  ]],
Cell[756384, 12978, 71, 1, 53, "Input"],
Cell[756458, 12981, 3185, 71, 468, "Input"],
Cell[CellGroupData[{
Cell[759668, 13056, 469, 9, 53, "Input"],
Cell[760140, 13067, 20383, 545, 293, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[780560, 13617, 266, 5, 53, "Input"],
Cell[780829, 13624, 159, 2, 53, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[781025, 13631, 313, 9, 53, "Input"],
Cell[781341, 13642, 7865, 139, 437, "Output"]
}, Open  ]],
Cell[789221, 13784, 190, 5, 53, "Input"],
Cell[789414, 13791, 103, 2, 53, "Input"],
Cell[CellGroupData[{
Cell[789542, 13797, 556, 15, 53, "Input"],
Cell[790101, 13814, 2653, 54, 452, "Output"]
}, Open  ]],
Cell[792769, 13871, 8441, 212, 1788, "Input"],
Cell[CellGroupData[{
Cell[801235, 14087, 106670, 2086, 3450, "WolframAlphaShortInput"],
Cell[907908, 16175, 260, 8, 66, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[908205, 16188, 69537, 1308, 160, "WolframAlphaShortInput"],
Cell[977745, 17498, 171, 4, 125, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[977953, 17507, 265, 7, 66, "Input"],
Cell[978221, 17516, 525, 11, 140, "Message"],
Cell[978749, 17529, 162, 4, 66, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[978948, 17538, 123, 2, 66, "Input"],
Cell[979074, 17542, 90, 1, 66, "Output"]
}, Open  ]],
Cell[979179, 17546, 87, 1, 112, "Input"],
Cell[CellGroupData[{
Cell[979291, 17551, 53768, 990, 160, "WolframAlphaShortInput"],
Cell[1033062, 18543, 525, 11, 140, "Message"],
Cell[1033590, 18556, 162, 4, 66, "Output"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
